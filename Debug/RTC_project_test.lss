
RTC_project_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f20  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000a  00800060  00800060  00001f94  2**0
                  ALLOC
  2 .stab         00002f64  00000000  00000000  00001f94  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000035ad  00000000  00000000  00004ef8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 84 06 	jmp	0xd08	; 0xd08 <__vector_1>
       8:	0c 94 d4 06 	jmp	0xda8	; 0xda8 <__vector_2>
       c:	0c 94 24 07 	jmp	0xe48	; 0xe48 <__vector_3>
      10:	0c 94 86 02 	jmp	0x50c	; 0x50c <__vector_4>
      14:	0c 94 36 02 	jmp	0x46c	; 0x46c <__vector_5>
      18:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__vector_6>
      1c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__vector_7>
      20:	0c 94 96 01 	jmp	0x32c	; 0x32c <__vector_8>
      24:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__vector_9>
      28:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__vector_10>
      2c:	0c 94 56 00 	jmp	0xac	; 0xac <__vector_11>
      30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	aa 36       	cpi	r26, 0x6A	; 106
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
      70:	0e 94 75 0e 	call	0x1cea	; 0x1cea <main>
      74:	0c 94 8e 0f 	jmp	0x1f1c	; 0x1f1c <_exit>

00000078 <__bad_interrupt>:
      78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Set_CallBack_TIMER_0_OVF_INT>:




void Set_CallBack_TIMER_0_OVF_INT(void (*ptr)(void))
{
      7c:	df 93       	push	r29
      7e:	cf 93       	push	r28
      80:	00 d0       	rcall	.+0      	; 0x82 <Set_CallBack_TIMER_0_OVF_INT+0x6>
      82:	cd b7       	in	r28, 0x3d	; 61
      84:	de b7       	in	r29, 0x3e	; 62
      86:	9a 83       	std	Y+2, r25	; 0x02
      88:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
      8a:	89 81       	ldd	r24, Y+1	; 0x01
      8c:	9a 81       	ldd	r25, Y+2	; 0x02
      8e:	00 97       	sbiw	r24, 0x00	; 0
      90:	41 f0       	breq	.+16     	; 0xa2 <Set_CallBack_TIMER_0_OVF_INT+0x26>
	{
		TIMER_ISR->TIMER_0_OVF_INT = ptr;
      92:	e0 91 64 00 	lds	r30, 0x0064
      96:	f0 91 65 00 	lds	r31, 0x0065
      9a:	89 81       	ldd	r24, Y+1	; 0x01
      9c:	9a 81       	ldd	r25, Y+2	; 0x02
      9e:	91 83       	std	Z+1, r25	; 0x01
      a0:	80 83       	st	Z, r24
	}
}
      a2:	0f 90       	pop	r0
      a4:	0f 90       	pop	r0
      a6:	cf 91       	pop	r28
      a8:	df 91       	pop	r29
      aa:	08 95       	ret

000000ac <__vector_11>:
void __vector_11 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_11 (void)
{
      ac:	1f 92       	push	r1
      ae:	0f 92       	push	r0
      b0:	0f b6       	in	r0, 0x3f	; 63
      b2:	0f 92       	push	r0
      b4:	11 24       	eor	r1, r1
      b6:	2f 93       	push	r18
      b8:	3f 93       	push	r19
      ba:	4f 93       	push	r20
      bc:	5f 93       	push	r21
      be:	6f 93       	push	r22
      c0:	7f 93       	push	r23
      c2:	8f 93       	push	r24
      c4:	9f 93       	push	r25
      c6:	af 93       	push	r26
      c8:	bf 93       	push	r27
      ca:	ef 93       	push	r30
      cc:	ff 93       	push	r31
      ce:	df 93       	push	r29
      d0:	cf 93       	push	r28
      d2:	cd b7       	in	r28, 0x3d	; 61
      d4:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_ISR->TIMER_0_OVF_INT != NULL)
      d6:	e0 91 64 00 	lds	r30, 0x0064
      da:	f0 91 65 00 	lds	r31, 0x0065
      de:	80 81       	ld	r24, Z
      e0:	91 81       	ldd	r25, Z+1	; 0x01
      e2:	00 97       	sbiw	r24, 0x00	; 0
      e4:	41 f0       	breq	.+16     	; 0xf6 <__vector_11+0x4a>
	{
		TIMER_ISR->TIMER_0_OVF_INT();
      e6:	e0 91 64 00 	lds	r30, 0x0064
      ea:	f0 91 65 00 	lds	r31, 0x0065
      ee:	01 90       	ld	r0, Z+
      f0:	f0 81       	ld	r31, Z
      f2:	e0 2d       	mov	r30, r0
      f4:	09 95       	icall
	}
}
      f6:	cf 91       	pop	r28
      f8:	df 91       	pop	r29
      fa:	ff 91       	pop	r31
      fc:	ef 91       	pop	r30
      fe:	bf 91       	pop	r27
     100:	af 91       	pop	r26
     102:	9f 91       	pop	r25
     104:	8f 91       	pop	r24
     106:	7f 91       	pop	r23
     108:	6f 91       	pop	r22
     10a:	5f 91       	pop	r21
     10c:	4f 91       	pop	r20
     10e:	3f 91       	pop	r19
     110:	2f 91       	pop	r18
     112:	0f 90       	pop	r0
     114:	0f be       	out	0x3f, r0	; 63
     116:	0f 90       	pop	r0
     118:	1f 90       	pop	r1
     11a:	18 95       	reti

0000011c <Set_CallBack_TIMER_0_OC_INT>:

void Set_CallBack_TIMER_0_OC_INT(void (*ptr)(void))
{
     11c:	df 93       	push	r29
     11e:	cf 93       	push	r28
     120:	00 d0       	rcall	.+0      	; 0x122 <Set_CallBack_TIMER_0_OC_INT+0x6>
     122:	cd b7       	in	r28, 0x3d	; 61
     124:	de b7       	in	r29, 0x3e	; 62
     126:	9a 83       	std	Y+2, r25	; 0x02
     128:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
     12a:	89 81       	ldd	r24, Y+1	; 0x01
     12c:	9a 81       	ldd	r25, Y+2	; 0x02
     12e:	00 97       	sbiw	r24, 0x00	; 0
     130:	41 f0       	breq	.+16     	; 0x142 <Set_CallBack_TIMER_0_OC_INT+0x26>
	{
		TIMER_ISR->TIMER_0_OC_INT = ptr;
     132:	e0 91 64 00 	lds	r30, 0x0064
     136:	f0 91 65 00 	lds	r31, 0x0065
     13a:	89 81       	ldd	r24, Y+1	; 0x01
     13c:	9a 81       	ldd	r25, Y+2	; 0x02
     13e:	93 83       	std	Z+3, r25	; 0x03
     140:	82 83       	std	Z+2, r24	; 0x02
	}
}
     142:	0f 90       	pop	r0
     144:	0f 90       	pop	r0
     146:	cf 91       	pop	r28
     148:	df 91       	pop	r29
     14a:	08 95       	ret

0000014c <__vector_10>:
void __vector_10 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_10 (void)
{
     14c:	1f 92       	push	r1
     14e:	0f 92       	push	r0
     150:	0f b6       	in	r0, 0x3f	; 63
     152:	0f 92       	push	r0
     154:	11 24       	eor	r1, r1
     156:	2f 93       	push	r18
     158:	3f 93       	push	r19
     15a:	4f 93       	push	r20
     15c:	5f 93       	push	r21
     15e:	6f 93       	push	r22
     160:	7f 93       	push	r23
     162:	8f 93       	push	r24
     164:	9f 93       	push	r25
     166:	af 93       	push	r26
     168:	bf 93       	push	r27
     16a:	ef 93       	push	r30
     16c:	ff 93       	push	r31
     16e:	df 93       	push	r29
     170:	cf 93       	push	r28
     172:	cd b7       	in	r28, 0x3d	; 61
     174:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_ISR->TIMER_0_OC_INT != NULL)
     176:	e0 91 64 00 	lds	r30, 0x0064
     17a:	f0 91 65 00 	lds	r31, 0x0065
     17e:	82 81       	ldd	r24, Z+2	; 0x02
     180:	93 81       	ldd	r25, Z+3	; 0x03
     182:	00 97       	sbiw	r24, 0x00	; 0
     184:	41 f0       	breq	.+16     	; 0x196 <__vector_10+0x4a>
	{
		TIMER_ISR->TIMER_0_OC_INT();
     186:	e0 91 64 00 	lds	r30, 0x0064
     18a:	f0 91 65 00 	lds	r31, 0x0065
     18e:	02 80       	ldd	r0, Z+2	; 0x02
     190:	f3 81       	ldd	r31, Z+3	; 0x03
     192:	e0 2d       	mov	r30, r0
     194:	09 95       	icall
	}
}
     196:	cf 91       	pop	r28
     198:	df 91       	pop	r29
     19a:	ff 91       	pop	r31
     19c:	ef 91       	pop	r30
     19e:	bf 91       	pop	r27
     1a0:	af 91       	pop	r26
     1a2:	9f 91       	pop	r25
     1a4:	8f 91       	pop	r24
     1a6:	7f 91       	pop	r23
     1a8:	6f 91       	pop	r22
     1aa:	5f 91       	pop	r21
     1ac:	4f 91       	pop	r20
     1ae:	3f 91       	pop	r19
     1b0:	2f 91       	pop	r18
     1b2:	0f 90       	pop	r0
     1b4:	0f be       	out	0x3f, r0	; 63
     1b6:	0f 90       	pop	r0
     1b8:	1f 90       	pop	r1
     1ba:	18 95       	reti

000001bc <Set_CallBack_TIMER_1_OVF_INT>:




void Set_CallBack_TIMER_1_OVF_INT(void (*ptr)(void))
{
     1bc:	df 93       	push	r29
     1be:	cf 93       	push	r28
     1c0:	00 d0       	rcall	.+0      	; 0x1c2 <Set_CallBack_TIMER_1_OVF_INT+0x6>
     1c2:	cd b7       	in	r28, 0x3d	; 61
     1c4:	de b7       	in	r29, 0x3e	; 62
     1c6:	9a 83       	std	Y+2, r25	; 0x02
     1c8:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
     1ca:	89 81       	ldd	r24, Y+1	; 0x01
     1cc:	9a 81       	ldd	r25, Y+2	; 0x02
     1ce:	00 97       	sbiw	r24, 0x00	; 0
     1d0:	41 f0       	breq	.+16     	; 0x1e2 <Set_CallBack_TIMER_1_OVF_INT+0x26>
	{
		TIMER_ISR->TIMER_1_OVF_INT = ptr;
     1d2:	e0 91 64 00 	lds	r30, 0x0064
     1d6:	f0 91 65 00 	lds	r31, 0x0065
     1da:	89 81       	ldd	r24, Y+1	; 0x01
     1dc:	9a 81       	ldd	r25, Y+2	; 0x02
     1de:	95 83       	std	Z+5, r25	; 0x05
     1e0:	84 83       	std	Z+4, r24	; 0x04
	}
}
     1e2:	0f 90       	pop	r0
     1e4:	0f 90       	pop	r0
     1e6:	cf 91       	pop	r28
     1e8:	df 91       	pop	r29
     1ea:	08 95       	ret

000001ec <__vector_9>:
void __vector_9 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_9 (void)
{
     1ec:	1f 92       	push	r1
     1ee:	0f 92       	push	r0
     1f0:	0f b6       	in	r0, 0x3f	; 63
     1f2:	0f 92       	push	r0
     1f4:	11 24       	eor	r1, r1
     1f6:	2f 93       	push	r18
     1f8:	3f 93       	push	r19
     1fa:	4f 93       	push	r20
     1fc:	5f 93       	push	r21
     1fe:	6f 93       	push	r22
     200:	7f 93       	push	r23
     202:	8f 93       	push	r24
     204:	9f 93       	push	r25
     206:	af 93       	push	r26
     208:	bf 93       	push	r27
     20a:	ef 93       	push	r30
     20c:	ff 93       	push	r31
     20e:	df 93       	push	r29
     210:	cf 93       	push	r28
     212:	cd b7       	in	r28, 0x3d	; 61
     214:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_ISR->TIMER_1_OVF_INT != NULL)
     216:	e0 91 64 00 	lds	r30, 0x0064
     21a:	f0 91 65 00 	lds	r31, 0x0065
     21e:	84 81       	ldd	r24, Z+4	; 0x04
     220:	95 81       	ldd	r25, Z+5	; 0x05
     222:	00 97       	sbiw	r24, 0x00	; 0
     224:	41 f0       	breq	.+16     	; 0x236 <__vector_9+0x4a>
	{
		TIMER_ISR->TIMER_1_OVF_INT();
     226:	e0 91 64 00 	lds	r30, 0x0064
     22a:	f0 91 65 00 	lds	r31, 0x0065
     22e:	04 80       	ldd	r0, Z+4	; 0x04
     230:	f5 81       	ldd	r31, Z+5	; 0x05
     232:	e0 2d       	mov	r30, r0
     234:	09 95       	icall
	}
}
     236:	cf 91       	pop	r28
     238:	df 91       	pop	r29
     23a:	ff 91       	pop	r31
     23c:	ef 91       	pop	r30
     23e:	bf 91       	pop	r27
     240:	af 91       	pop	r26
     242:	9f 91       	pop	r25
     244:	8f 91       	pop	r24
     246:	7f 91       	pop	r23
     248:	6f 91       	pop	r22
     24a:	5f 91       	pop	r21
     24c:	4f 91       	pop	r20
     24e:	3f 91       	pop	r19
     250:	2f 91       	pop	r18
     252:	0f 90       	pop	r0
     254:	0f be       	out	0x3f, r0	; 63
     256:	0f 90       	pop	r0
     258:	1f 90       	pop	r1
     25a:	18 95       	reti

0000025c <Set_CallBack_TIMER_1_OCA_INT>:

void Set_CallBack_TIMER_1_OCA_INT(void (*ptr)(void))
{
     25c:	df 93       	push	r29
     25e:	cf 93       	push	r28
     260:	00 d0       	rcall	.+0      	; 0x262 <Set_CallBack_TIMER_1_OCA_INT+0x6>
     262:	cd b7       	in	r28, 0x3d	; 61
     264:	de b7       	in	r29, 0x3e	; 62
     266:	9a 83       	std	Y+2, r25	; 0x02
     268:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
     26a:	89 81       	ldd	r24, Y+1	; 0x01
     26c:	9a 81       	ldd	r25, Y+2	; 0x02
     26e:	00 97       	sbiw	r24, 0x00	; 0
     270:	41 f0       	breq	.+16     	; 0x282 <Set_CallBack_TIMER_1_OCA_INT+0x26>
	{
		TIMER_ISR->TIMER_1_OCA_INT = ptr;
     272:	e0 91 64 00 	lds	r30, 0x0064
     276:	f0 91 65 00 	lds	r31, 0x0065
     27a:	89 81       	ldd	r24, Y+1	; 0x01
     27c:	9a 81       	ldd	r25, Y+2	; 0x02
     27e:	97 83       	std	Z+7, r25	; 0x07
     280:	86 83       	std	Z+6, r24	; 0x06
	}
}
     282:	0f 90       	pop	r0
     284:	0f 90       	pop	r0
     286:	cf 91       	pop	r28
     288:	df 91       	pop	r29
     28a:	08 95       	ret

0000028c <__vector_7>:
void __vector_7 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_7 (void)
{
     28c:	1f 92       	push	r1
     28e:	0f 92       	push	r0
     290:	0f b6       	in	r0, 0x3f	; 63
     292:	0f 92       	push	r0
     294:	11 24       	eor	r1, r1
     296:	2f 93       	push	r18
     298:	3f 93       	push	r19
     29a:	4f 93       	push	r20
     29c:	5f 93       	push	r21
     29e:	6f 93       	push	r22
     2a0:	7f 93       	push	r23
     2a2:	8f 93       	push	r24
     2a4:	9f 93       	push	r25
     2a6:	af 93       	push	r26
     2a8:	bf 93       	push	r27
     2aa:	ef 93       	push	r30
     2ac:	ff 93       	push	r31
     2ae:	df 93       	push	r29
     2b0:	cf 93       	push	r28
     2b2:	cd b7       	in	r28, 0x3d	; 61
     2b4:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_ISR->TIMER_1_OCA_INT != NULL)
     2b6:	e0 91 64 00 	lds	r30, 0x0064
     2ba:	f0 91 65 00 	lds	r31, 0x0065
     2be:	86 81       	ldd	r24, Z+6	; 0x06
     2c0:	97 81       	ldd	r25, Z+7	; 0x07
     2c2:	00 97       	sbiw	r24, 0x00	; 0
     2c4:	41 f0       	breq	.+16     	; 0x2d6 <__vector_7+0x4a>
	{
		TIMER_ISR->TIMER_1_OCA_INT();
     2c6:	e0 91 64 00 	lds	r30, 0x0064
     2ca:	f0 91 65 00 	lds	r31, 0x0065
     2ce:	06 80       	ldd	r0, Z+6	; 0x06
     2d0:	f7 81       	ldd	r31, Z+7	; 0x07
     2d2:	e0 2d       	mov	r30, r0
     2d4:	09 95       	icall
	}
}
     2d6:	cf 91       	pop	r28
     2d8:	df 91       	pop	r29
     2da:	ff 91       	pop	r31
     2dc:	ef 91       	pop	r30
     2de:	bf 91       	pop	r27
     2e0:	af 91       	pop	r26
     2e2:	9f 91       	pop	r25
     2e4:	8f 91       	pop	r24
     2e6:	7f 91       	pop	r23
     2e8:	6f 91       	pop	r22
     2ea:	5f 91       	pop	r21
     2ec:	4f 91       	pop	r20
     2ee:	3f 91       	pop	r19
     2f0:	2f 91       	pop	r18
     2f2:	0f 90       	pop	r0
     2f4:	0f be       	out	0x3f, r0	; 63
     2f6:	0f 90       	pop	r0
     2f8:	1f 90       	pop	r1
     2fa:	18 95       	reti

000002fc <Set_CallBack_TIMER_1_OCB_INT>:


void Set_CallBack_TIMER_1_OCB_INT(void (*ptr)(void))
{
     2fc:	df 93       	push	r29
     2fe:	cf 93       	push	r28
     300:	00 d0       	rcall	.+0      	; 0x302 <Set_CallBack_TIMER_1_OCB_INT+0x6>
     302:	cd b7       	in	r28, 0x3d	; 61
     304:	de b7       	in	r29, 0x3e	; 62
     306:	9a 83       	std	Y+2, r25	; 0x02
     308:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
     30a:	89 81       	ldd	r24, Y+1	; 0x01
     30c:	9a 81       	ldd	r25, Y+2	; 0x02
     30e:	00 97       	sbiw	r24, 0x00	; 0
     310:	41 f0       	breq	.+16     	; 0x322 <Set_CallBack_TIMER_1_OCB_INT+0x26>
	{
		TIMER_ISR->TIMER_1_OCB_INT = ptr;
     312:	e0 91 64 00 	lds	r30, 0x0064
     316:	f0 91 65 00 	lds	r31, 0x0065
     31a:	89 81       	ldd	r24, Y+1	; 0x01
     31c:	9a 81       	ldd	r25, Y+2	; 0x02
     31e:	91 87       	std	Z+9, r25	; 0x09
     320:	80 87       	std	Z+8, r24	; 0x08
	}
}
     322:	0f 90       	pop	r0
     324:	0f 90       	pop	r0
     326:	cf 91       	pop	r28
     328:	df 91       	pop	r29
     32a:	08 95       	ret

0000032c <__vector_8>:
void __vector_8 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_8 (void)
{
     32c:	1f 92       	push	r1
     32e:	0f 92       	push	r0
     330:	0f b6       	in	r0, 0x3f	; 63
     332:	0f 92       	push	r0
     334:	11 24       	eor	r1, r1
     336:	2f 93       	push	r18
     338:	3f 93       	push	r19
     33a:	4f 93       	push	r20
     33c:	5f 93       	push	r21
     33e:	6f 93       	push	r22
     340:	7f 93       	push	r23
     342:	8f 93       	push	r24
     344:	9f 93       	push	r25
     346:	af 93       	push	r26
     348:	bf 93       	push	r27
     34a:	ef 93       	push	r30
     34c:	ff 93       	push	r31
     34e:	df 93       	push	r29
     350:	cf 93       	push	r28
     352:	cd b7       	in	r28, 0x3d	; 61
     354:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_ISR->TIMER_1_OCB_INT != NULL)
     356:	e0 91 64 00 	lds	r30, 0x0064
     35a:	f0 91 65 00 	lds	r31, 0x0065
     35e:	80 85       	ldd	r24, Z+8	; 0x08
     360:	91 85       	ldd	r25, Z+9	; 0x09
     362:	00 97       	sbiw	r24, 0x00	; 0
     364:	41 f0       	breq	.+16     	; 0x376 <__vector_8+0x4a>
	{
		TIMER_ISR->TIMER_1_OCB_INT();
     366:	e0 91 64 00 	lds	r30, 0x0064
     36a:	f0 91 65 00 	lds	r31, 0x0065
     36e:	00 84       	ldd	r0, Z+8	; 0x08
     370:	f1 85       	ldd	r31, Z+9	; 0x09
     372:	e0 2d       	mov	r30, r0
     374:	09 95       	icall
	}
}
     376:	cf 91       	pop	r28
     378:	df 91       	pop	r29
     37a:	ff 91       	pop	r31
     37c:	ef 91       	pop	r30
     37e:	bf 91       	pop	r27
     380:	af 91       	pop	r26
     382:	9f 91       	pop	r25
     384:	8f 91       	pop	r24
     386:	7f 91       	pop	r23
     388:	6f 91       	pop	r22
     38a:	5f 91       	pop	r21
     38c:	4f 91       	pop	r20
     38e:	3f 91       	pop	r19
     390:	2f 91       	pop	r18
     392:	0f 90       	pop	r0
     394:	0f be       	out	0x3f, r0	; 63
     396:	0f 90       	pop	r0
     398:	1f 90       	pop	r1
     39a:	18 95       	reti

0000039c <Set_CallBack_TIMER_1_CAPT_INT>:


void Set_CallBack_TIMER_1_CAPT_INT(void (*ptr)(void))
{
     39c:	df 93       	push	r29
     39e:	cf 93       	push	r28
     3a0:	00 d0       	rcall	.+0      	; 0x3a2 <Set_CallBack_TIMER_1_CAPT_INT+0x6>
     3a2:	cd b7       	in	r28, 0x3d	; 61
     3a4:	de b7       	in	r29, 0x3e	; 62
     3a6:	9a 83       	std	Y+2, r25	; 0x02
     3a8:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
     3aa:	89 81       	ldd	r24, Y+1	; 0x01
     3ac:	9a 81       	ldd	r25, Y+2	; 0x02
     3ae:	00 97       	sbiw	r24, 0x00	; 0
     3b0:	41 f0       	breq	.+16     	; 0x3c2 <Set_CallBack_TIMER_1_CAPT_INT+0x26>
	{
		TIMER_ISR->TIMER_1_CAPT_INT = ptr;
     3b2:	e0 91 64 00 	lds	r30, 0x0064
     3b6:	f0 91 65 00 	lds	r31, 0x0065
     3ba:	89 81       	ldd	r24, Y+1	; 0x01
     3bc:	9a 81       	ldd	r25, Y+2	; 0x02
     3be:	93 87       	std	Z+11, r25	; 0x0b
     3c0:	82 87       	std	Z+10, r24	; 0x0a
	}
}
     3c2:	0f 90       	pop	r0
     3c4:	0f 90       	pop	r0
     3c6:	cf 91       	pop	r28
     3c8:	df 91       	pop	r29
     3ca:	08 95       	ret

000003cc <__vector_6>:
void __vector_6 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_6 (void)
{
     3cc:	1f 92       	push	r1
     3ce:	0f 92       	push	r0
     3d0:	0f b6       	in	r0, 0x3f	; 63
     3d2:	0f 92       	push	r0
     3d4:	11 24       	eor	r1, r1
     3d6:	2f 93       	push	r18
     3d8:	3f 93       	push	r19
     3da:	4f 93       	push	r20
     3dc:	5f 93       	push	r21
     3de:	6f 93       	push	r22
     3e0:	7f 93       	push	r23
     3e2:	8f 93       	push	r24
     3e4:	9f 93       	push	r25
     3e6:	af 93       	push	r26
     3e8:	bf 93       	push	r27
     3ea:	ef 93       	push	r30
     3ec:	ff 93       	push	r31
     3ee:	df 93       	push	r29
     3f0:	cf 93       	push	r28
     3f2:	cd b7       	in	r28, 0x3d	; 61
     3f4:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_ISR->TIMER_1_CAPT_INT != NULL)
     3f6:	e0 91 64 00 	lds	r30, 0x0064
     3fa:	f0 91 65 00 	lds	r31, 0x0065
     3fe:	82 85       	ldd	r24, Z+10	; 0x0a
     400:	93 85       	ldd	r25, Z+11	; 0x0b
     402:	00 97       	sbiw	r24, 0x00	; 0
     404:	41 f0       	breq	.+16     	; 0x416 <__vector_6+0x4a>
	{
		TIMER_ISR->TIMER_1_CAPT_INT();
     406:	e0 91 64 00 	lds	r30, 0x0064
     40a:	f0 91 65 00 	lds	r31, 0x0065
     40e:	02 84       	ldd	r0, Z+10	; 0x0a
     410:	f3 85       	ldd	r31, Z+11	; 0x0b
     412:	e0 2d       	mov	r30, r0
     414:	09 95       	icall
	}
}
     416:	cf 91       	pop	r28
     418:	df 91       	pop	r29
     41a:	ff 91       	pop	r31
     41c:	ef 91       	pop	r30
     41e:	bf 91       	pop	r27
     420:	af 91       	pop	r26
     422:	9f 91       	pop	r25
     424:	8f 91       	pop	r24
     426:	7f 91       	pop	r23
     428:	6f 91       	pop	r22
     42a:	5f 91       	pop	r21
     42c:	4f 91       	pop	r20
     42e:	3f 91       	pop	r19
     430:	2f 91       	pop	r18
     432:	0f 90       	pop	r0
     434:	0f be       	out	0x3f, r0	; 63
     436:	0f 90       	pop	r0
     438:	1f 90       	pop	r1
     43a:	18 95       	reti

0000043c <Set_CallBack_TIMER_2_OVF_INT>:
 */



void Set_CallBack_TIMER_2_OVF_INT(void (*ptr)(void))
{
     43c:	df 93       	push	r29
     43e:	cf 93       	push	r28
     440:	00 d0       	rcall	.+0      	; 0x442 <Set_CallBack_TIMER_2_OVF_INT+0x6>
     442:	cd b7       	in	r28, 0x3d	; 61
     444:	de b7       	in	r29, 0x3e	; 62
     446:	9a 83       	std	Y+2, r25	; 0x02
     448:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
     44a:	89 81       	ldd	r24, Y+1	; 0x01
     44c:	9a 81       	ldd	r25, Y+2	; 0x02
     44e:	00 97       	sbiw	r24, 0x00	; 0
     450:	41 f0       	breq	.+16     	; 0x462 <Set_CallBack_TIMER_2_OVF_INT+0x26>
	{
		TIMER_ISR->TIMER_2_OVF_INT = ptr;
     452:	e0 91 64 00 	lds	r30, 0x0064
     456:	f0 91 65 00 	lds	r31, 0x0065
     45a:	89 81       	ldd	r24, Y+1	; 0x01
     45c:	9a 81       	ldd	r25, Y+2	; 0x02
     45e:	95 87       	std	Z+13, r25	; 0x0d
     460:	84 87       	std	Z+12, r24	; 0x0c
	}
}
     462:	0f 90       	pop	r0
     464:	0f 90       	pop	r0
     466:	cf 91       	pop	r28
     468:	df 91       	pop	r29
     46a:	08 95       	ret

0000046c <__vector_5>:
void __vector_5 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_5 (void)
{
     46c:	1f 92       	push	r1
     46e:	0f 92       	push	r0
     470:	0f b6       	in	r0, 0x3f	; 63
     472:	0f 92       	push	r0
     474:	11 24       	eor	r1, r1
     476:	2f 93       	push	r18
     478:	3f 93       	push	r19
     47a:	4f 93       	push	r20
     47c:	5f 93       	push	r21
     47e:	6f 93       	push	r22
     480:	7f 93       	push	r23
     482:	8f 93       	push	r24
     484:	9f 93       	push	r25
     486:	af 93       	push	r26
     488:	bf 93       	push	r27
     48a:	ef 93       	push	r30
     48c:	ff 93       	push	r31
     48e:	df 93       	push	r29
     490:	cf 93       	push	r28
     492:	cd b7       	in	r28, 0x3d	; 61
     494:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_ISR->TIMER_2_OVF_INT != NULL)
     496:	e0 91 64 00 	lds	r30, 0x0064
     49a:	f0 91 65 00 	lds	r31, 0x0065
     49e:	84 85       	ldd	r24, Z+12	; 0x0c
     4a0:	95 85       	ldd	r25, Z+13	; 0x0d
     4a2:	00 97       	sbiw	r24, 0x00	; 0
     4a4:	41 f0       	breq	.+16     	; 0x4b6 <__vector_5+0x4a>
	{
		TIMER_ISR->TIMER_2_OVF_INT();
     4a6:	e0 91 64 00 	lds	r30, 0x0064
     4aa:	f0 91 65 00 	lds	r31, 0x0065
     4ae:	04 84       	ldd	r0, Z+12	; 0x0c
     4b0:	f5 85       	ldd	r31, Z+13	; 0x0d
     4b2:	e0 2d       	mov	r30, r0
     4b4:	09 95       	icall
	}
}
     4b6:	cf 91       	pop	r28
     4b8:	df 91       	pop	r29
     4ba:	ff 91       	pop	r31
     4bc:	ef 91       	pop	r30
     4be:	bf 91       	pop	r27
     4c0:	af 91       	pop	r26
     4c2:	9f 91       	pop	r25
     4c4:	8f 91       	pop	r24
     4c6:	7f 91       	pop	r23
     4c8:	6f 91       	pop	r22
     4ca:	5f 91       	pop	r21
     4cc:	4f 91       	pop	r20
     4ce:	3f 91       	pop	r19
     4d0:	2f 91       	pop	r18
     4d2:	0f 90       	pop	r0
     4d4:	0f be       	out	0x3f, r0	; 63
     4d6:	0f 90       	pop	r0
     4d8:	1f 90       	pop	r1
     4da:	18 95       	reti

000004dc <Set_CallBack_TIMER_2_OC_INT>:


void Set_CallBack_TIMER_2_OC_INT(void (*ptr)(void))
{
     4dc:	df 93       	push	r29
     4de:	cf 93       	push	r28
     4e0:	00 d0       	rcall	.+0      	; 0x4e2 <Set_CallBack_TIMER_2_OC_INT+0x6>
     4e2:	cd b7       	in	r28, 0x3d	; 61
     4e4:	de b7       	in	r29, 0x3e	; 62
     4e6:	9a 83       	std	Y+2, r25	; 0x02
     4e8:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
     4ea:	89 81       	ldd	r24, Y+1	; 0x01
     4ec:	9a 81       	ldd	r25, Y+2	; 0x02
     4ee:	00 97       	sbiw	r24, 0x00	; 0
     4f0:	41 f0       	breq	.+16     	; 0x502 <Set_CallBack_TIMER_2_OC_INT+0x26>
	{
		TIMER_ISR->TIMER_2_OC_INT = ptr;
     4f2:	e0 91 64 00 	lds	r30, 0x0064
     4f6:	f0 91 65 00 	lds	r31, 0x0065
     4fa:	89 81       	ldd	r24, Y+1	; 0x01
     4fc:	9a 81       	ldd	r25, Y+2	; 0x02
     4fe:	97 87       	std	Z+15, r25	; 0x0f
     500:	86 87       	std	Z+14, r24	; 0x0e
	}
}
     502:	0f 90       	pop	r0
     504:	0f 90       	pop	r0
     506:	cf 91       	pop	r28
     508:	df 91       	pop	r29
     50a:	08 95       	ret

0000050c <__vector_4>:
void __vector_4 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_4 (void)
{
     50c:	1f 92       	push	r1
     50e:	0f 92       	push	r0
     510:	0f b6       	in	r0, 0x3f	; 63
     512:	0f 92       	push	r0
     514:	11 24       	eor	r1, r1
     516:	2f 93       	push	r18
     518:	3f 93       	push	r19
     51a:	4f 93       	push	r20
     51c:	5f 93       	push	r21
     51e:	6f 93       	push	r22
     520:	7f 93       	push	r23
     522:	8f 93       	push	r24
     524:	9f 93       	push	r25
     526:	af 93       	push	r26
     528:	bf 93       	push	r27
     52a:	ef 93       	push	r30
     52c:	ff 93       	push	r31
     52e:	df 93       	push	r29
     530:	cf 93       	push	r28
     532:	cd b7       	in	r28, 0x3d	; 61
     534:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_ISR->TIMER_2_OC_INT != NULL)
     536:	e0 91 64 00 	lds	r30, 0x0064
     53a:	f0 91 65 00 	lds	r31, 0x0065
     53e:	86 85       	ldd	r24, Z+14	; 0x0e
     540:	97 85       	ldd	r25, Z+15	; 0x0f
     542:	00 97       	sbiw	r24, 0x00	; 0
     544:	41 f0       	breq	.+16     	; 0x556 <__vector_4+0x4a>
	{
		TIMER_ISR->TIMER_2_OC_INT();
     546:	e0 91 64 00 	lds	r30, 0x0064
     54a:	f0 91 65 00 	lds	r31, 0x0065
     54e:	06 84       	ldd	r0, Z+14	; 0x0e
     550:	f7 85       	ldd	r31, Z+15	; 0x0f
     552:	e0 2d       	mov	r30, r0
     554:	09 95       	icall
	}
}
     556:	cf 91       	pop	r28
     558:	df 91       	pop	r29
     55a:	ff 91       	pop	r31
     55c:	ef 91       	pop	r30
     55e:	bf 91       	pop	r27
     560:	af 91       	pop	r26
     562:	9f 91       	pop	r25
     564:	8f 91       	pop	r24
     566:	7f 91       	pop	r23
     568:	6f 91       	pop	r22
     56a:	5f 91       	pop	r21
     56c:	4f 91       	pop	r20
     56e:	3f 91       	pop	r19
     570:	2f 91       	pop	r18
     572:	0f 90       	pop	r0
     574:	0f be       	out	0x3f, r0	; 63
     576:	0f 90       	pop	r0
     578:	1f 90       	pop	r1
     57a:	18 95       	reti

0000057c <Timer_init>:
 */



void Timer_init(timer_config_type *timer_config_ptr)
{
     57c:	df 93       	push	r29
     57e:	cf 93       	push	r28
     580:	00 d0       	rcall	.+0      	; 0x582 <Timer_init+0x6>
     582:	00 d0       	rcall	.+0      	; 0x584 <Timer_init+0x8>
     584:	cd b7       	in	r28, 0x3d	; 61
     586:	de b7       	in	r29, 0x3e	; 62
     588:	9a 83       	std	Y+2, r25	; 0x02
     58a:	89 83       	std	Y+1, r24	; 0x01
	Timer_DeInit(timer_config_ptr->timer);/*deinitialize the desired timer */
     58c:	e9 81       	ldd	r30, Y+1	; 0x01
     58e:	fa 81       	ldd	r31, Y+2	; 0x02
     590:	81 85       	ldd	r24, Z+9	; 0x09
     592:	0e 94 24 04 	call	0x848	; 0x848 <Timer_DeInit>
	switch(timer_config_ptr->timer)
     596:	e9 81       	ldd	r30, Y+1	; 0x01
     598:	fa 81       	ldd	r31, Y+2	; 0x02
     59a:	81 85       	ldd	r24, Z+9	; 0x09
     59c:	28 2f       	mov	r18, r24
     59e:	30 e0       	ldi	r19, 0x00	; 0
     5a0:	3c 83       	std	Y+4, r19	; 0x04
     5a2:	2b 83       	std	Y+3, r18	; 0x03
     5a4:	8b 81       	ldd	r24, Y+3	; 0x03
     5a6:	9c 81       	ldd	r25, Y+4	; 0x04
     5a8:	81 30       	cpi	r24, 0x01	; 1
     5aa:	91 05       	cpc	r25, r1
     5ac:	09 f4       	brne	.+2      	; 0x5b0 <Timer_init+0x34>
     5ae:	4e c0       	rjmp	.+156    	; 0x64c <Timer_init+0xd0>
     5b0:	2b 81       	ldd	r18, Y+3	; 0x03
     5b2:	3c 81       	ldd	r19, Y+4	; 0x04
     5b4:	22 30       	cpi	r18, 0x02	; 2
     5b6:	31 05       	cpc	r19, r1
     5b8:	09 f4       	brne	.+2      	; 0x5bc <Timer_init+0x40>
     5ba:	b1 c0       	rjmp	.+354    	; 0x71e <Timer_init+0x1a2>
     5bc:	8b 81       	ldd	r24, Y+3	; 0x03
     5be:	9c 81       	ldd	r25, Y+4	; 0x04
     5c0:	00 97       	sbiw	r24, 0x00	; 0
     5c2:	09 f0       	breq	.+2      	; 0x5c6 <Timer_init+0x4a>
     5c4:	ee c0       	rjmp	.+476    	; 0x7a2 <Timer_init+0x226>
		 * FOC0= 0 ; because non_pwm mode
		 * select a prescaler
		 * if mode is Normal mode we enable  Timer0 normal mode Interrupt
		 * else if mode is CTC mode we enable Timer0  compare mode Interrupt
		 * */
		TCNT0_REG = timer_config_ptr->initial_value; /*Set Timer0 initial value to 0*/
     5c6:	a2 e5       	ldi	r26, 0x52	; 82
     5c8:	b0 e0       	ldi	r27, 0x00	; 0
     5ca:	e9 81       	ldd	r30, Y+1	; 0x01
     5cc:	fa 81       	ldd	r31, Y+2	; 0x02
     5ce:	84 81       	ldd	r24, Z+4	; 0x04
     5d0:	95 81       	ldd	r25, Z+5	; 0x05
     5d2:	8c 93       	st	X, r24
		SET_BIT(TCC0_REG,7)   ; /* non-pwm mode*/
     5d4:	a3 e5       	ldi	r26, 0x53	; 83
     5d6:	b0 e0       	ldi	r27, 0x00	; 0
     5d8:	e3 e5       	ldi	r30, 0x53	; 83
     5da:	f0 e0       	ldi	r31, 0x00	; 0
     5dc:	80 81       	ld	r24, Z
     5de:	80 68       	ori	r24, 0x80	; 128
     5e0:	8c 93       	st	X, r24
		if (timer_config_ptr->operated_mode==NORMAL_MODE)
     5e2:	e9 81       	ldd	r30, Y+1	; 0x01
     5e4:	fa 81       	ldd	r31, Y+2	; 0x02
     5e6:	80 85       	ldd	r24, Z+8	; 0x08
     5e8:	88 23       	and	r24, r24
     5ea:	41 f4       	brne	.+16     	; 0x5fc <Timer_init+0x80>
		{
			SET_BIT(TIMSK_REG,0)    ;/* Enable Timer0 over flow Interrupt*/
     5ec:	a9 e5       	ldi	r26, 0x59	; 89
     5ee:	b0 e0       	ldi	r27, 0x00	; 0
     5f0:	e9 e5       	ldi	r30, 0x59	; 89
     5f2:	f0 e0       	ldi	r31, 0x00	; 0
     5f4:	80 81       	ld	r24, Z
     5f6:	81 60       	ori	r24, 0x01	; 1
     5f8:	8c 93       	st	X, r24
     5fa:	1a c0       	rjmp	.+52     	; 0x630 <Timer_init+0xb4>
		}
		else if (timer_config_ptr->operated_mode==CTC_MODE)
     5fc:	e9 81       	ldd	r30, Y+1	; 0x01
     5fe:	fa 81       	ldd	r31, Y+2	; 0x02
     600:	80 85       	ldd	r24, Z+8	; 0x08
     602:	81 30       	cpi	r24, 0x01	; 1
     604:	a9 f4       	brne	.+42     	; 0x630 <Timer_init+0xb4>
		{
			OCR0_REG = timer_config_ptr->compared_value; /*Set Compare Value*/
     606:	ac e5       	ldi	r26, 0x5C	; 92
     608:	b0 e0       	ldi	r27, 0x00	; 0
     60a:	e9 81       	ldd	r30, Y+1	; 0x01
     60c:	fa 81       	ldd	r31, Y+2	; 0x02
     60e:	80 81       	ld	r24, Z
     610:	91 81       	ldd	r25, Z+1	; 0x01
     612:	8c 93       	st	X, r24
			SET_BIT(TCC0_REG,3)    ; /* CTC mode */
     614:	a3 e5       	ldi	r26, 0x53	; 83
     616:	b0 e0       	ldi	r27, 0x00	; 0
     618:	e3 e5       	ldi	r30, 0x53	; 83
     61a:	f0 e0       	ldi	r31, 0x00	; 0
     61c:	80 81       	ld	r24, Z
     61e:	88 60       	ori	r24, 0x08	; 8
     620:	8c 93       	st	X, r24
			SET_BIT(TIMSK_REG,1)    ; /* Enable CTC mode interrupt */
     622:	a9 e5       	ldi	r26, 0x59	; 89
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e9 e5       	ldi	r30, 0x59	; 89
     628:	f0 e0       	ldi	r31, 0x00	; 0
     62a:	80 81       	ld	r24, Z
     62c:	82 60       	ori	r24, 0x02	; 2
     62e:	8c 93       	st	X, r24
		}
		/*select the clk to start counting */
		TCC0_REG=(TCC0_REG &0b11111000)|(timer_config_ptr->T0_T1_used_freq & 0b00000111 );
     630:	a3 e5       	ldi	r26, 0x53	; 83
     632:	b0 e0       	ldi	r27, 0x00	; 0
     634:	e3 e5       	ldi	r30, 0x53	; 83
     636:	f0 e0       	ldi	r31, 0x00	; 0
     638:	80 81       	ld	r24, Z
     63a:	98 2f       	mov	r25, r24
     63c:	98 7f       	andi	r25, 0xF8	; 248
     63e:	e9 81       	ldd	r30, Y+1	; 0x01
     640:	fa 81       	ldd	r31, Y+2	; 0x02
     642:	86 81       	ldd	r24, Z+6	; 0x06
     644:	87 70       	andi	r24, 0x07	; 7
     646:	89 2b       	or	r24, r25
     648:	8c 93       	st	X, r24
     64a:	ab c0       	rjmp	.+342    	; 0x7a2 <Timer_init+0x226>
		break;
	case TIMER_1:
		TCNT1_REG = timer_config_ptr->initial_value;/*set timer1 initial value */
     64c:	ac e4       	ldi	r26, 0x4C	; 76
     64e:	b0 e0       	ldi	r27, 0x00	; 0
     650:	e9 81       	ldd	r30, Y+1	; 0x01
     652:	fa 81       	ldd	r31, Y+2	; 0x02
     654:	84 81       	ldd	r24, Z+4	; 0x04
     656:	95 81       	ldd	r25, Z+5	; 0x05
     658:	11 96       	adiw	r26, 0x01	; 1
     65a:	9c 93       	st	X, r25
     65c:	8e 93       	st	-X, r24
		SET_BIT(TCC1A_REG,3)   ;/*non-pwm mode */
     65e:	af e4       	ldi	r26, 0x4F	; 79
     660:	b0 e0       	ldi	r27, 0x00	; 0
     662:	ef e4       	ldi	r30, 0x4F	; 79
     664:	f0 e0       	ldi	r31, 0x00	; 0
     666:	80 81       	ld	r24, Z
     668:	88 60       	ori	r24, 0x08	; 8
     66a:	8c 93       	st	X, r24
		if (timer_config_ptr->operated_mode==NORMAL_MODE)
     66c:	e9 81       	ldd	r30, Y+1	; 0x01
     66e:	fa 81       	ldd	r31, Y+2	; 0x02
     670:	80 85       	ldd	r24, Z+8	; 0x08
     672:	88 23       	and	r24, r24
     674:	41 f4       	brne	.+16     	; 0x686 <Timer_init+0x10a>
			CLEAR_BIT(TCCR1A,WGM11)  ;
			CLEAR_BIT(TCCR1B,WGM12)  ;
			CLEAR_BIT(TCCR1B,WGM13)  ;
			 */
			/**************************************************************************/
			SET_BIT(TIMSK_REG,2)    ;/*Enable Timer1 over flow Interrupt*/
     676:	a9 e5       	ldi	r26, 0x59	; 89
     678:	b0 e0       	ldi	r27, 0x00	; 0
     67a:	e9 e5       	ldi	r30, 0x59	; 89
     67c:	f0 e0       	ldi	r31, 0x00	; 0
     67e:	80 81       	ld	r24, Z
     680:	84 60       	ori	r24, 0x04	; 4
     682:	8c 93       	st	X, r24
     684:	3e c0       	rjmp	.+124    	; 0x702 <Timer_init+0x186>
		}
		else if (timer_config_ptr->operated_mode==CTC_MODE)
     686:	e9 81       	ldd	r30, Y+1	; 0x01
     688:	fa 81       	ldd	r31, Y+2	; 0x02
     68a:	80 85       	ldd	r24, Z+8	; 0x08
     68c:	81 30       	cpi	r24, 0x01	; 1
     68e:	c9 f5       	brne	.+114    	; 0x702 <Timer_init+0x186>
		{
			if(timer_config_ptr->channels_number == CHANNEL_1A)
     690:	e9 81       	ldd	r30, Y+1	; 0x01
     692:	fa 81       	ldd	r31, Y+2	; 0x02
     694:	82 85       	ldd	r24, Z+10	; 0x0a
     696:	88 23       	and	r24, r24
     698:	c1 f4       	brne	.+48     	; 0x6ca <Timer_init+0x14e>
			{
				OCR1A_REG = timer_config_ptr->compared_value; /*Set timer1 Compare Value*/
     69a:	aa e4       	ldi	r26, 0x4A	; 74
     69c:	b0 e0       	ldi	r27, 0x00	; 0
     69e:	e9 81       	ldd	r30, Y+1	; 0x01
     6a0:	fa 81       	ldd	r31, Y+2	; 0x02
     6a2:	80 81       	ld	r24, Z
     6a4:	91 81       	ldd	r25, Z+1	; 0x01
     6a6:	11 96       	adiw	r26, 0x01	; 1
     6a8:	9c 93       	st	X, r25
     6aa:	8e 93       	st	-X, r24
				SET_BIT(TCC1B_REG,3)    ;/* enable CTC  mode*/
     6ac:	ae e4       	ldi	r26, 0x4E	; 78
     6ae:	b0 e0       	ldi	r27, 0x00	; 0
     6b0:	ee e4       	ldi	r30, 0x4E	; 78
     6b2:	f0 e0       	ldi	r31, 0x00	; 0
     6b4:	80 81       	ld	r24, Z
     6b6:	88 60       	ori	r24, 0x08	; 8
     6b8:	8c 93       	st	X, r24
				SET_BIT(TIMSK_REG,4)    ; /* enable CTC channel A Interrupt*/
     6ba:	a9 e5       	ldi	r26, 0x59	; 89
     6bc:	b0 e0       	ldi	r27, 0x00	; 0
     6be:	e9 e5       	ldi	r30, 0x59	; 89
     6c0:	f0 e0       	ldi	r31, 0x00	; 0
     6c2:	80 81       	ld	r24, Z
     6c4:	80 61       	ori	r24, 0x10	; 16
     6c6:	8c 93       	st	X, r24
     6c8:	1c c0       	rjmp	.+56     	; 0x702 <Timer_init+0x186>
			CLEAR_BIT(TCCR1A,WGM11)  ;
			CLEAR_BIT(TCCR1B,WGM13)  ;
				 */
				/**************************************************************************/
			}
			else if (timer_config_ptr->channels_number==CHANNEL_1B)
     6ca:	e9 81       	ldd	r30, Y+1	; 0x01
     6cc:	fa 81       	ldd	r31, Y+2	; 0x02
     6ce:	82 85       	ldd	r24, Z+10	; 0x0a
     6d0:	81 30       	cpi	r24, 0x01	; 1
     6d2:	b9 f4       	brne	.+46     	; 0x702 <Timer_init+0x186>
			{
				SET_BIT(TCC1A_REG,2)   ;/*non-pwm mode channel B*/
     6d4:	af e4       	ldi	r26, 0x4F	; 79
     6d6:	b0 e0       	ldi	r27, 0x00	; 0
     6d8:	ef e4       	ldi	r30, 0x4F	; 79
     6da:	f0 e0       	ldi	r31, 0x00	; 0
     6dc:	80 81       	ld	r24, Z
     6de:	84 60       	ori	r24, 0x04	; 4
     6e0:	8c 93       	st	X, r24
				OCR1B_REG = timer_config_ptr->compared_value_B_channel; /*Set timer1 Compare Value*/
     6e2:	a8 e4       	ldi	r26, 0x48	; 72
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e9 81       	ldd	r30, Y+1	; 0x01
     6e8:	fa 81       	ldd	r31, Y+2	; 0x02
     6ea:	82 81       	ldd	r24, Z+2	; 0x02
     6ec:	93 81       	ldd	r25, Z+3	; 0x03
     6ee:	11 96       	adiw	r26, 0x01	; 1
     6f0:	9c 93       	st	X, r25
     6f2:	8e 93       	st	-X, r24
				SET_BIT(TIMSK_REG,3);/* enable CTC channel B Interrupt*/
     6f4:	a9 e5       	ldi	r26, 0x59	; 89
     6f6:	b0 e0       	ldi	r27, 0x00	; 0
     6f8:	e9 e5       	ldi	r30, 0x59	; 89
     6fa:	f0 e0       	ldi	r31, 0x00	; 0
     6fc:	80 81       	ld	r24, Z
     6fe:	88 60       	ori	r24, 0x08	; 8
     700:	8c 93       	st	X, r24
			}
		}

		TCC1B_REG=(TCC1B_REG &0b11111000)|(timer_config_ptr->T0_T1_used_freq & 0b00000111);/*select the prescaler */
     702:	ae e4       	ldi	r26, 0x4E	; 78
     704:	b0 e0       	ldi	r27, 0x00	; 0
     706:	ee e4       	ldi	r30, 0x4E	; 78
     708:	f0 e0       	ldi	r31, 0x00	; 0
     70a:	80 81       	ld	r24, Z
     70c:	98 2f       	mov	r25, r24
     70e:	98 7f       	andi	r25, 0xF8	; 248
     710:	e9 81       	ldd	r30, Y+1	; 0x01
     712:	fa 81       	ldd	r31, Y+2	; 0x02
     714:	86 81       	ldd	r24, Z+6	; 0x06
     716:	87 70       	andi	r24, 0x07	; 7
     718:	89 2b       	or	r24, r25
     71a:	8c 93       	st	X, r24
     71c:	42 c0       	rjmp	.+132    	; 0x7a2 <Timer_init+0x226>
		 * if mode is Normal mode we enable  Timer0 normal mode Interrupt
		 * and disable Timer0 compare Interrupt
		 * else if mode is CTC mode we enable Timer0  compare mode Interrupt
		 * and disable Timer0 normal Interrupt ad select the state of OSR0 pin
		 * */
		TCNT2_REG = timer_config_ptr->initial_value; /*Set Timer2 initial value */
     71e:	a4 e4       	ldi	r26, 0x44	; 68
     720:	b0 e0       	ldi	r27, 0x00	; 0
     722:	e9 81       	ldd	r30, Y+1	; 0x01
     724:	fa 81       	ldd	r31, Y+2	; 0x02
     726:	84 81       	ldd	r24, Z+4	; 0x04
     728:	95 81       	ldd	r25, Z+5	; 0x05
     72a:	8c 93       	st	X, r24
		SET_BIT(TCC2_REG,7); /* non-pwm mode*/
     72c:	a5 e4       	ldi	r26, 0x45	; 69
     72e:	b0 e0       	ldi	r27, 0x00	; 0
     730:	e5 e4       	ldi	r30, 0x45	; 69
     732:	f0 e0       	ldi	r31, 0x00	; 0
     734:	80 81       	ld	r24, Z
     736:	80 68       	ori	r24, 0x80	; 128
     738:	8c 93       	st	X, r24
		if (timer_config_ptr->operated_mode==NORMAL_MODE)
     73a:	e9 81       	ldd	r30, Y+1	; 0x01
     73c:	fa 81       	ldd	r31, Y+2	; 0x02
     73e:	80 85       	ldd	r24, Z+8	; 0x08
     740:	88 23       	and	r24, r24
     742:	41 f4       	brne	.+16     	; 0x754 <Timer_init+0x1d8>
			/*Normal mode*/
			/*
			CLEAR_BIT(TCCR2,WGM21)  ;
			CLEAR_BIT(TCCR2,WGM20)  ;
			 */
			SET_BIT(TIMSK_REG,6)    ;/* Enable Timer0 over flow Interrupt*/
     744:	a9 e5       	ldi	r26, 0x59	; 89
     746:	b0 e0       	ldi	r27, 0x00	; 0
     748:	e9 e5       	ldi	r30, 0x59	; 89
     74a:	f0 e0       	ldi	r31, 0x00	; 0
     74c:	80 81       	ld	r24, Z
     74e:	80 64       	ori	r24, 0x40	; 64
     750:	8c 93       	st	X, r24
     752:	1a c0       	rjmp	.+52     	; 0x788 <Timer_init+0x20c>
		}
		else if (timer_config_ptr->operated_mode==CTC_MODE)
     754:	e9 81       	ldd	r30, Y+1	; 0x01
     756:	fa 81       	ldd	r31, Y+2	; 0x02
     758:	80 85       	ldd	r24, Z+8	; 0x08
     75a:	81 30       	cpi	r24, 0x01	; 1
     75c:	a9 f4       	brne	.+42     	; 0x788 <Timer_init+0x20c>
		{
			OCR2_REG = timer_config_ptr->compared_value; /*Set Compare Value*/
     75e:	a3 e4       	ldi	r26, 0x43	; 67
     760:	b0 e0       	ldi	r27, 0x00	; 0
     762:	e9 81       	ldd	r30, Y+1	; 0x01
     764:	fa 81       	ldd	r31, Y+2	; 0x02
     766:	80 81       	ld	r24, Z
     768:	91 81       	ldd	r25, Z+1	; 0x01
     76a:	8c 93       	st	X, r24
			SET_BIT(TCC2_REG,3)    ; /* CTC mode */
     76c:	a5 e4       	ldi	r26, 0x45	; 69
     76e:	b0 e0       	ldi	r27, 0x00	; 0
     770:	e5 e4       	ldi	r30, 0x45	; 69
     772:	f0 e0       	ldi	r31, 0x00	; 0
     774:	80 81       	ld	r24, Z
     776:	88 60       	ori	r24, 0x08	; 8
     778:	8c 93       	st	X, r24
			SET_BIT(TIMSK_REG,7)    ; /* enable CTC Interrupt*/
     77a:	a9 e5       	ldi	r26, 0x59	; 89
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e9 e5       	ldi	r30, 0x59	; 89
     780:	f0 e0       	ldi	r31, 0x00	; 0
     782:	80 81       	ld	r24, Z
     784:	80 68       	ori	r24, 0x80	; 128
     786:	8c 93       	st	X, r24
		}
		/*select the clk to start counting */
		TCC2_REG=(TCC2_REG &0b11111000)|(timer_config_ptr->T2_used_freq & 0b00000111 );
     788:	a5 e4       	ldi	r26, 0x45	; 69
     78a:	b0 e0       	ldi	r27, 0x00	; 0
     78c:	e5 e4       	ldi	r30, 0x45	; 69
     78e:	f0 e0       	ldi	r31, 0x00	; 0
     790:	80 81       	ld	r24, Z
     792:	98 2f       	mov	r25, r24
     794:	98 7f       	andi	r25, 0xF8	; 248
     796:	e9 81       	ldd	r30, Y+1	; 0x01
     798:	fa 81       	ldd	r31, Y+2	; 0x02
     79a:	87 81       	ldd	r24, Z+7	; 0x07
     79c:	87 70       	andi	r24, 0x07	; 7
     79e:	89 2b       	or	r24, r25
     7a0:	8c 93       	st	X, r24
		break;
	case ALL:
		break;
	}
}
     7a2:	0f 90       	pop	r0
     7a4:	0f 90       	pop	r0
     7a6:	0f 90       	pop	r0
     7a8:	0f 90       	pop	r0
     7aa:	cf 91       	pop	r28
     7ac:	df 91       	pop	r29
     7ae:	08 95       	ret

000007b0 <change_compared_and_duty_value>:
 * it assign the compared value or duty cycle value for
 * every desired timer
 * */

void change_compared_and_duty_value(timer_config_type * config_ptr)
{
     7b0:	df 93       	push	r29
     7b2:	cf 93       	push	r28
     7b4:	00 d0       	rcall	.+0      	; 0x7b6 <change_compared_and_duty_value+0x6>
     7b6:	00 d0       	rcall	.+0      	; 0x7b8 <change_compared_and_duty_value+0x8>
     7b8:	cd b7       	in	r28, 0x3d	; 61
     7ba:	de b7       	in	r29, 0x3e	; 62
     7bc:	9a 83       	std	Y+2, r25	; 0x02
     7be:	89 83       	std	Y+1, r24	; 0x01
	switch(config_ptr->timer)
     7c0:	e9 81       	ldd	r30, Y+1	; 0x01
     7c2:	fa 81       	ldd	r31, Y+2	; 0x02
     7c4:	81 85       	ldd	r24, Z+9	; 0x09
     7c6:	28 2f       	mov	r18, r24
     7c8:	30 e0       	ldi	r19, 0x00	; 0
     7ca:	3c 83       	std	Y+4, r19	; 0x04
     7cc:	2b 83       	std	Y+3, r18	; 0x03
     7ce:	8b 81       	ldd	r24, Y+3	; 0x03
     7d0:	9c 81       	ldd	r25, Y+4	; 0x04
     7d2:	81 30       	cpi	r24, 0x01	; 1
     7d4:	91 05       	cpc	r25, r1
     7d6:	89 f0       	breq	.+34     	; 0x7fa <change_compared_and_duty_value+0x4a>
     7d8:	2b 81       	ldd	r18, Y+3	; 0x03
     7da:	3c 81       	ldd	r19, Y+4	; 0x04
     7dc:	22 30       	cpi	r18, 0x02	; 2
     7de:	31 05       	cpc	r19, r1
     7e0:	29 f1       	breq	.+74     	; 0x82c <change_compared_and_duty_value+0x7c>
     7e2:	8b 81       	ldd	r24, Y+3	; 0x03
     7e4:	9c 81       	ldd	r25, Y+4	; 0x04
     7e6:	00 97       	sbiw	r24, 0x00	; 0
     7e8:	41 f5       	brne	.+80     	; 0x83a <change_compared_and_duty_value+0x8a>
	{
	case TIMER_0:
		OCR0_REG = (u8)(config_ptr->compared_value); /*Set Compare Value*/
     7ea:	ac e5       	ldi	r26, 0x5C	; 92
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	e9 81       	ldd	r30, Y+1	; 0x01
     7f0:	fa 81       	ldd	r31, Y+2	; 0x02
     7f2:	80 81       	ld	r24, Z
     7f4:	91 81       	ldd	r25, Z+1	; 0x01
     7f6:	8c 93       	st	X, r24
     7f8:	20 c0       	rjmp	.+64     	; 0x83a <change_compared_and_duty_value+0x8a>
		break ;
	case TIMER_1:
		OCR1A_REG = config_ptr->compared_value; /*Set timer1 Compare Value*/
     7fa:	aa e4       	ldi	r26, 0x4A	; 74
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e9 81       	ldd	r30, Y+1	; 0x01
     800:	fa 81       	ldd	r31, Y+2	; 0x02
     802:	80 81       	ld	r24, Z
     804:	91 81       	ldd	r25, Z+1	; 0x01
     806:	11 96       	adiw	r26, 0x01	; 1
     808:	9c 93       	st	X, r25
     80a:	8e 93       	st	-X, r24
		if (config_ptr->channels_number==CHANNEL_1B)
     80c:	e9 81       	ldd	r30, Y+1	; 0x01
     80e:	fa 81       	ldd	r31, Y+2	; 0x02
     810:	82 85       	ldd	r24, Z+10	; 0x0a
     812:	81 30       	cpi	r24, 0x01	; 1
     814:	91 f4       	brne	.+36     	; 0x83a <change_compared_and_duty_value+0x8a>
		{
			OCR1B_REG = config_ptr->compared_value_B_channel; /*Set timer1 B Compare Value*/
     816:	e8 e4       	ldi	r30, 0x48	; 72
     818:	f0 e0       	ldi	r31, 0x00	; 0
     81a:	a9 81       	ldd	r26, Y+1	; 0x01
     81c:	ba 81       	ldd	r27, Y+2	; 0x02
     81e:	12 96       	adiw	r26, 0x02	; 2
     820:	8d 91       	ld	r24, X+
     822:	9c 91       	ld	r25, X
     824:	13 97       	sbiw	r26, 0x03	; 3
     826:	91 83       	std	Z+1, r25	; 0x01
     828:	80 83       	st	Z, r24
     82a:	07 c0       	rjmp	.+14     	; 0x83a <change_compared_and_duty_value+0x8a>
		}
		break ;
	case TIMER_2:
		OCR2_REG = (u8)(config_ptr->compared_value); /*Set Compare Value*/
     82c:	a3 e4       	ldi	r26, 0x43	; 67
     82e:	b0 e0       	ldi	r27, 0x00	; 0
     830:	e9 81       	ldd	r30, Y+1	; 0x01
     832:	fa 81       	ldd	r31, Y+2	; 0x02
     834:	80 81       	ld	r24, Z
     836:	91 81       	ldd	r25, Z+1	; 0x01
     838:	8c 93       	st	X, r24
		break ;
	}
}
     83a:	0f 90       	pop	r0
     83c:	0f 90       	pop	r0
     83e:	0f 90       	pop	r0
     840:	0f 90       	pop	r0
     842:	cf 91       	pop	r28
     844:	df 91       	pop	r29
     846:	08 95       	ret

00000848 <Timer_DeInit>:

/*Description
 * this function is responsible for reset all timer registers
 * */
void Timer_DeInit(TIMER_e timer)
{
     848:	df 93       	push	r29
     84a:	cf 93       	push	r28
     84c:	00 d0       	rcall	.+0      	; 0x84e <Timer_DeInit+0x6>
     84e:	0f 92       	push	r0
     850:	cd b7       	in	r28, 0x3d	; 61
     852:	de b7       	in	r29, 0x3e	; 62
     854:	89 83       	std	Y+1, r24	; 0x01
	switch(timer)
     856:	89 81       	ldd	r24, Y+1	; 0x01
     858:	28 2f       	mov	r18, r24
     85a:	30 e0       	ldi	r19, 0x00	; 0
     85c:	3b 83       	std	Y+3, r19	; 0x03
     85e:	2a 83       	std	Y+2, r18	; 0x02
     860:	8a 81       	ldd	r24, Y+2	; 0x02
     862:	9b 81       	ldd	r25, Y+3	; 0x03
     864:	81 30       	cpi	r24, 0x01	; 1
     866:	91 05       	cpc	r25, r1
     868:	19 f1       	breq	.+70     	; 0x8b0 <__stack+0x51>
     86a:	2a 81       	ldd	r18, Y+2	; 0x02
     86c:	3b 81       	ldd	r19, Y+3	; 0x03
     86e:	22 30       	cpi	r18, 0x02	; 2
     870:	31 05       	cpc	r19, r1
     872:	2c f4       	brge	.+10     	; 0x87e <__stack+0x1f>
     874:	8a 81       	ldd	r24, Y+2	; 0x02
     876:	9b 81       	ldd	r25, Y+3	; 0x03
     878:	00 97       	sbiw	r24, 0x00	; 0
     87a:	61 f0       	breq	.+24     	; 0x894 <__stack+0x35>
     87c:	56 c0       	rjmp	.+172    	; 0x92a <__stack+0xcb>
     87e:	2a 81       	ldd	r18, Y+2	; 0x02
     880:	3b 81       	ldd	r19, Y+3	; 0x03
     882:	22 30       	cpi	r18, 0x02	; 2
     884:	31 05       	cpc	r19, r1
     886:	31 f1       	breq	.+76     	; 0x8d4 <__stack+0x75>
     888:	8a 81       	ldd	r24, Y+2	; 0x02
     88a:	9b 81       	ldd	r25, Y+3	; 0x03
     88c:	83 30       	cpi	r24, 0x03	; 3
     88e:	91 05       	cpc	r25, r1
     890:	79 f1       	breq	.+94     	; 0x8f0 <__stack+0x91>
     892:	4b c0       	rjmp	.+150    	; 0x92a <__stack+0xcb>
	{
	case TIMER_0:
		TCC0_REG= 0; /* clear control register*/
     894:	e3 e5       	ldi	r30, 0x53	; 83
     896:	f0 e0       	ldi	r31, 0x00	; 0
     898:	10 82       	st	Z, r1
		TCNT0_REG= 0; /* clear the timer 0*/
     89a:	e2 e5       	ldi	r30, 0x52	; 82
     89c:	f0 e0       	ldi	r31, 0x00	; 0
     89e:	10 82       	st	Z, r1
		TIMSK_REG=(TIMSK_REG & 0b11111100);/*Disable module interrupt interrupt*/
     8a0:	a9 e5       	ldi	r26, 0x59	; 89
     8a2:	b0 e0       	ldi	r27, 0x00	; 0
     8a4:	e9 e5       	ldi	r30, 0x59	; 89
     8a6:	f0 e0       	ldi	r31, 0x00	; 0
     8a8:	80 81       	ld	r24, Z
     8aa:	8c 7f       	andi	r24, 0xFC	; 252
     8ac:	8c 93       	st	X, r24
     8ae:	3d c0       	rjmp	.+122    	; 0x92a <__stack+0xcb>
		break;
	case TIMER_1:
		TCC1A_REG=0; /* clear control register*/
     8b0:	ef e4       	ldi	r30, 0x4F	; 79
     8b2:	f0 e0       	ldi	r31, 0x00	; 0
     8b4:	10 82       	st	Z, r1
		TCC1B_REG=0 ;
     8b6:	ee e4       	ldi	r30, 0x4E	; 78
     8b8:	f0 e0       	ldi	r31, 0x00	; 0
     8ba:	10 82       	st	Z, r1
		TCNT1_REG= 0; /* clear the timer 0*/
     8bc:	ec e4       	ldi	r30, 0x4C	; 76
     8be:	f0 e0       	ldi	r31, 0x00	; 0
     8c0:	11 82       	std	Z+1, r1	; 0x01
     8c2:	10 82       	st	Z, r1
		TIMSK_REG=(TIMSK_REG & 0b11100011);/*Disable module interrupt interrupt*/
     8c4:	a9 e5       	ldi	r26, 0x59	; 89
     8c6:	b0 e0       	ldi	r27, 0x00	; 0
     8c8:	e9 e5       	ldi	r30, 0x59	; 89
     8ca:	f0 e0       	ldi	r31, 0x00	; 0
     8cc:	80 81       	ld	r24, Z
     8ce:	83 7e       	andi	r24, 0xE3	; 227
     8d0:	8c 93       	st	X, r24
     8d2:	2b c0       	rjmp	.+86     	; 0x92a <__stack+0xcb>
		break;
	case TIMER_2:
		TCC2_REG= 0; /* clear control register*/
     8d4:	e5 e4       	ldi	r30, 0x45	; 69
     8d6:	f0 e0       	ldi	r31, 0x00	; 0
     8d8:	10 82       	st	Z, r1
		TCNT2_REG= 0; /* clear the timer 0*/
     8da:	e4 e4       	ldi	r30, 0x44	; 68
     8dc:	f0 e0       	ldi	r31, 0x00	; 0
     8de:	10 82       	st	Z, r1
		TIMSK_REG=(TIMSK_REG & 0b00111111);/*Disable module interrupt interrupt*/
     8e0:	a9 e5       	ldi	r26, 0x59	; 89
     8e2:	b0 e0       	ldi	r27, 0x00	; 0
     8e4:	e9 e5       	ldi	r30, 0x59	; 89
     8e6:	f0 e0       	ldi	r31, 0x00	; 0
     8e8:	80 81       	ld	r24, Z
     8ea:	8f 73       	andi	r24, 0x3F	; 63
     8ec:	8c 93       	st	X, r24
     8ee:	1d c0       	rjmp	.+58     	; 0x92a <__stack+0xcb>
		break;
	case ALL:
		TIMSK_REG=(TIMSK_REG &0b00100000);/*Disable all timers modules interrupt interrupt*/
     8f0:	a9 e5       	ldi	r26, 0x59	; 89
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	e9 e5       	ldi	r30, 0x59	; 89
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	80 81       	ld	r24, Z
     8fa:	80 72       	andi	r24, 0x20	; 32
     8fc:	8c 93       	st	X, r24
		/*===============Deinitialize Timer0=============================*/
		TCC0_REG= 0; /* clear control register*/
     8fe:	e3 e5       	ldi	r30, 0x53	; 83
     900:	f0 e0       	ldi	r31, 0x00	; 0
     902:	10 82       	st	Z, r1
		TCNT0_REG= 0; /* clear the timer */
     904:	e2 e5       	ldi	r30, 0x52	; 82
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	10 82       	st	Z, r1
		/*===============Deinitialize Timer1=============================*/
		TCC1A_REG= 0; /* clear A control register*/
     90a:	ef e4       	ldi	r30, 0x4F	; 79
     90c:	f0 e0       	ldi	r31, 0x00	; 0
     90e:	10 82       	st	Z, r1
		TCC1B_REG= 0;/* clear B control register*/
     910:	ee e4       	ldi	r30, 0x4E	; 78
     912:	f0 e0       	ldi	r31, 0x00	; 0
     914:	10 82       	st	Z, r1
		TCNT1_REG= 0; /* clear the timer */
     916:	ec e4       	ldi	r30, 0x4C	; 76
     918:	f0 e0       	ldi	r31, 0x00	; 0
     91a:	11 82       	std	Z+1, r1	; 0x01
     91c:	10 82       	st	Z, r1
		/*===============Deinitialize Timer2=============================*/
		TCC2_REG= 0; /* clear control register*/
     91e:	e5 e4       	ldi	r30, 0x45	; 69
     920:	f0 e0       	ldi	r31, 0x00	; 0
     922:	10 82       	st	Z, r1
		TCNT2_REG= 0; /* clear the timer */
     924:	e4 e4       	ldi	r30, 0x44	; 68
     926:	f0 e0       	ldi	r31, 0x00	; 0
     928:	10 82       	st	Z, r1
		break;
	}
}
     92a:	0f 90       	pop	r0
     92c:	0f 90       	pop	r0
     92e:	0f 90       	pop	r0
     930:	cf 91       	pop	r28
     932:	df 91       	pop	r29
     934:	08 95       	ret

00000936 <clear_timer>:
 * this func used to reset the timer to start count again from the beginning
 * we chose the timer to be cleared
 * */

void clear_timer(TIMER_e timer)
{
     936:	df 93       	push	r29
     938:	cf 93       	push	r28
     93a:	00 d0       	rcall	.+0      	; 0x93c <clear_timer+0x6>
     93c:	0f 92       	push	r0
     93e:	cd b7       	in	r28, 0x3d	; 61
     940:	de b7       	in	r29, 0x3e	; 62
     942:	89 83       	std	Y+1, r24	; 0x01
	switch(timer)
     944:	89 81       	ldd	r24, Y+1	; 0x01
     946:	28 2f       	mov	r18, r24
     948:	30 e0       	ldi	r19, 0x00	; 0
     94a:	3b 83       	std	Y+3, r19	; 0x03
     94c:	2a 83       	std	Y+2, r18	; 0x02
     94e:	8a 81       	ldd	r24, Y+2	; 0x02
     950:	9b 81       	ldd	r25, Y+3	; 0x03
     952:	81 30       	cpi	r24, 0x01	; 1
     954:	91 05       	cpc	r25, r1
     956:	c9 f0       	breq	.+50     	; 0x98a <clear_timer+0x54>
     958:	2a 81       	ldd	r18, Y+2	; 0x02
     95a:	3b 81       	ldd	r19, Y+3	; 0x03
     95c:	22 30       	cpi	r18, 0x02	; 2
     95e:	31 05       	cpc	r19, r1
     960:	2c f4       	brge	.+10     	; 0x96c <clear_timer+0x36>
     962:	8a 81       	ldd	r24, Y+2	; 0x02
     964:	9b 81       	ldd	r25, Y+3	; 0x03
     966:	00 97       	sbiw	r24, 0x00	; 0
     968:	61 f0       	breq	.+24     	; 0x982 <clear_timer+0x4c>
     96a:	22 c0       	rjmp	.+68     	; 0x9b0 <clear_timer+0x7a>
     96c:	2a 81       	ldd	r18, Y+2	; 0x02
     96e:	3b 81       	ldd	r19, Y+3	; 0x03
     970:	22 30       	cpi	r18, 0x02	; 2
     972:	31 05       	cpc	r19, r1
     974:	79 f0       	breq	.+30     	; 0x994 <clear_timer+0x5e>
     976:	8a 81       	ldd	r24, Y+2	; 0x02
     978:	9b 81       	ldd	r25, Y+3	; 0x03
     97a:	83 30       	cpi	r24, 0x03	; 3
     97c:	91 05       	cpc	r25, r1
     97e:	71 f0       	breq	.+28     	; 0x99c <clear_timer+0x66>
     980:	17 c0       	rjmp	.+46     	; 0x9b0 <clear_timer+0x7a>
	{
	case TIMER_0:
		TCNT0_REG = 0; /* Set Timer0 initial value to 0*/
     982:	e2 e5       	ldi	r30, 0x52	; 82
     984:	f0 e0       	ldi	r31, 0x00	; 0
     986:	10 82       	st	Z, r1
     988:	13 c0       	rjmp	.+38     	; 0x9b0 <clear_timer+0x7a>
		break;
	case TIMER_1:
		TCNT1_REG = 0; /* Set Timer1 initial value to 0*/
     98a:	ec e4       	ldi	r30, 0x4C	; 76
     98c:	f0 e0       	ldi	r31, 0x00	; 0
     98e:	11 82       	std	Z+1, r1	; 0x01
     990:	10 82       	st	Z, r1
     992:	0e c0       	rjmp	.+28     	; 0x9b0 <clear_timer+0x7a>
		break;
	case TIMER_2:
		TCNT2_REG = 0; /* Set Timer2 initial value to 0*/
     994:	e4 e4       	ldi	r30, 0x44	; 68
     996:	f0 e0       	ldi	r31, 0x00	; 0
     998:	10 82       	st	Z, r1
     99a:	0a c0       	rjmp	.+20     	; 0x9b0 <clear_timer+0x7a>
		break;
	case ALL:
		TCNT0_REG = 0;  /* Set Timer0 initial value to 0*/
     99c:	e2 e5       	ldi	r30, 0x52	; 82
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	10 82       	st	Z, r1
		TCNT1_REG = 0;  /* Set Timer1 initial value to 0*/
     9a2:	ec e4       	ldi	r30, 0x4C	; 76
     9a4:	f0 e0       	ldi	r31, 0x00	; 0
     9a6:	11 82       	std	Z+1, r1	; 0x01
     9a8:	10 82       	st	Z, r1
		TCNT2_REG = 0;  /* Set Timer2 initial value to 0*/
     9aa:	e4 e4       	ldi	r30, 0x44	; 68
     9ac:	f0 e0       	ldi	r31, 0x00	; 0
     9ae:	10 82       	st	Z, r1
		break;
	default:
		break  ;
	}
}
     9b0:	0f 90       	pop	r0
     9b2:	0f 90       	pop	r0
     9b4:	0f 90       	pop	r0
     9b6:	cf 91       	pop	r28
     9b8:	df 91       	pop	r29
     9ba:	08 95       	ret

000009bc <PWM_timers_init>:
 * this function is responsible for pwm init for the desired timer
 * it take a ptr to struct
 *
 * */
void PWM_timers_init(PWM_timers_config *timer_config)
{
     9bc:	0f 93       	push	r16
     9be:	1f 93       	push	r17
     9c0:	df 93       	push	r29
     9c2:	cf 93       	push	r28
     9c4:	00 d0       	rcall	.+0      	; 0x9c6 <PWM_timers_init+0xa>
     9c6:	00 d0       	rcall	.+0      	; 0x9c8 <PWM_timers_init+0xc>
     9c8:	cd b7       	in	r28, 0x3d	; 61
     9ca:	de b7       	in	r29, 0x3e	; 62
     9cc:	9a 83       	std	Y+2, r25	; 0x02
     9ce:	89 83       	std	Y+1, r24	; 0x01

	switch (timer_config->timer)
     9d0:	e9 81       	ldd	r30, Y+1	; 0x01
     9d2:	fa 81       	ldd	r31, Y+2	; 0x02
     9d4:	81 85       	ldd	r24, Z+9	; 0x09
     9d6:	28 2f       	mov	r18, r24
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	3c 83       	std	Y+4, r19	; 0x04
     9dc:	2b 83       	std	Y+3, r18	; 0x03
     9de:	8b 81       	ldd	r24, Y+3	; 0x03
     9e0:	9c 81       	ldd	r25, Y+4	; 0x04
     9e2:	81 30       	cpi	r24, 0x01	; 1
     9e4:	91 05       	cpc	r25, r1
     9e6:	09 f4       	brne	.+2      	; 0x9ea <PWM_timers_init+0x2e>
     9e8:	43 c0       	rjmp	.+134    	; 0xa70 <PWM_timers_init+0xb4>
     9ea:	eb 81       	ldd	r30, Y+3	; 0x03
     9ec:	fc 81       	ldd	r31, Y+4	; 0x04
     9ee:	e2 30       	cpi	r30, 0x02	; 2
     9f0:	f1 05       	cpc	r31, r1
     9f2:	09 f4       	brne	.+2      	; 0x9f6 <PWM_timers_init+0x3a>
     9f4:	0f c1       	rjmp	.+542    	; 0xc14 <PWM_timers_init+0x258>
     9f6:	2b 81       	ldd	r18, Y+3	; 0x03
     9f8:	3c 81       	ldd	r19, Y+4	; 0x04
     9fa:	21 15       	cp	r18, r1
     9fc:	31 05       	cpc	r19, r1
     9fe:	09 f0       	breq	.+2      	; 0xa02 <PWM_timers_init+0x46>
     a00:	46 c1       	rjmp	.+652    	; 0xc8e <PWM_timers_init+0x2d2>
	{

	case TIMER_0:
		clear_timer(TIMER_0); /* Set Timer Initial Value to 0*/
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	0e 94 9b 04 	call	0x936	; 0x936 <clear_timer>
		OCR0_REG  = timer_config->set_duty_cycle ; /* Set Compare Value*/
     a08:	ac e5       	ldi	r26, 0x5C	; 92
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	e9 81       	ldd	r30, Y+1	; 0x01
     a0e:	fa 81       	ldd	r31, Y+2	; 0x02
     a10:	82 81       	ldd	r24, Z+2	; 0x02
     a12:	93 81       	ldd	r25, Z+3	; 0x03
     a14:	8c 93       	st	X, r24
		/*Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC*/
		DIO_u8setPinDirection(PORT_B, PIN_3, OUTPUT);
     a16:	81 e0       	ldi	r24, 0x01	; 1
     a18:	63 e0       	ldi	r22, 0x03	; 3
     a1a:	41 e0       	ldi	r20, 0x01	; 1
     a1c:	0e 94 46 09 	call	0x128c	; 0x128c <DIO_u8setPinDirection>
		 * 2. Fast PWM Mode WGM01=1 & WGM00=1
		 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
		 * 4. clock = F_CPU/N
		 *
		 */
		CLR_BIT(TCC0_REG,7);
     a20:	a3 e5       	ldi	r26, 0x53	; 83
     a22:	b0 e0       	ldi	r27, 0x00	; 0
     a24:	e3 e5       	ldi	r30, 0x53	; 83
     a26:	f0 e0       	ldi	r31, 0x00	; 0
     a28:	80 81       	ld	r24, Z
     a2a:	8f 77       	andi	r24, 0x7F	; 127
     a2c:	8c 93       	st	X, r24
		if(timer_config->PWM_Mode == FAST_PWM)
     a2e:	e9 81       	ldd	r30, Y+1	; 0x01
     a30:	fa 81       	ldd	r31, Y+2	; 0x02
     a32:	80 85       	ldd	r24, Z+8	; 0x08
     a34:	82 30       	cpi	r24, 0x02	; 2
     a36:	29 f4       	brne	.+10     	; 0xa42 <PWM_timers_init+0x86>
		{
			TCC0_REG = (1<<3) | (1<<5) | (1<<6);
     a38:	e3 e5       	ldi	r30, 0x53	; 83
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	88 e6       	ldi	r24, 0x68	; 104
     a3e:	80 83       	st	Z, r24
     a40:	09 c0       	rjmp	.+18     	; 0xa54 <PWM_timers_init+0x98>
		}
		else if(timer_config->PWM_Mode == PHASE_CORRECT_PWM)
     a42:	e9 81       	ldd	r30, Y+1	; 0x01
     a44:	fa 81       	ldd	r31, Y+2	; 0x02
     a46:	80 85       	ldd	r24, Z+8	; 0x08
     a48:	83 30       	cpi	r24, 0x03	; 3
     a4a:	21 f4       	brne	.+8      	; 0xa54 <PWM_timers_init+0x98>
		{
			TCC0_REG = (0<<3) | (1<<5) | (1<<6);
     a4c:	e3 e5       	ldi	r30, 0x53	; 83
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	80 e6       	ldi	r24, 0x60	; 96
     a52:	80 83       	st	Z, r24
		}
		/*select the clk (prescaler)to start counting */
		TCC0_REG=(TCC0_REG & 0b11111000)|(timer_config->T0_T1_used_freq & 0b00000111 );
     a54:	a3 e5       	ldi	r26, 0x53	; 83
     a56:	b0 e0       	ldi	r27, 0x00	; 0
     a58:	e3 e5       	ldi	r30, 0x53	; 83
     a5a:	f0 e0       	ldi	r31, 0x00	; 0
     a5c:	80 81       	ld	r24, Z
     a5e:	98 2f       	mov	r25, r24
     a60:	98 7f       	andi	r25, 0xF8	; 248
     a62:	e9 81       	ldd	r30, Y+1	; 0x01
     a64:	fa 81       	ldd	r31, Y+2	; 0x02
     a66:	86 81       	ldd	r24, Z+6	; 0x06
     a68:	87 70       	andi	r24, 0x07	; 7
     a6a:	89 2b       	or	r24, r25
     a6c:	8c 93       	st	X, r24
     a6e:	0f c1       	rjmp	.+542    	; 0xc8e <PWM_timers_init+0x2d2>
		break;
	case TIMER_1:
		clear_timer(TIMER_1); /* Set Timer Initial Value to 0*/
     a70:	81 e0       	ldi	r24, 0x01	; 1
     a72:	0e 94 9b 04 	call	0x936	; 0x936 <clear_timer>
		ICR1_REG   = timer_config->timer1_TOP_value; /* Set TOP Value*/
     a76:	a6 e4       	ldi	r26, 0x46	; 70
     a78:	b0 e0       	ldi	r27, 0x00	; 0
     a7a:	e9 81       	ldd	r30, Y+1	; 0x01
     a7c:	fa 81       	ldd	r31, Y+2	; 0x02
     a7e:	80 81       	ld	r24, Z
     a80:	91 81       	ldd	r25, Z+1	; 0x01
     a82:	11 96       	adiw	r26, 0x01	; 1
     a84:	9c 93       	st	X, r25
     a86:	8e 93       	st	-X, r24
		OCR1A_REG  = timer_config->set_duty_cycle; /* Set Compare Value*/
     a88:	aa e4       	ldi	r26, 0x4A	; 74
     a8a:	b0 e0       	ldi	r27, 0x00	; 0
     a8c:	e9 81       	ldd	r30, Y+1	; 0x01
     a8e:	fa 81       	ldd	r31, Y+2	; 0x02
     a90:	82 81       	ldd	r24, Z+2	; 0x02
     a92:	93 81       	ldd	r25, Z+3	; 0x03
     a94:	11 96       	adiw	r26, 0x01	; 1
     a96:	9c 93       	st	X, r25
     a98:	8e 93       	st	-X, r24
		/*Configure PD5/OC1A and PD4/OC1B as output pin --> pin where the PWM signal is generated from MC*/
		DIO_u8setPinDirection(PORT_D, PIN_5, OUTPUT);/*OC1A->output*/
     a9a:	83 e0       	ldi	r24, 0x03	; 3
     a9c:	65 e0       	ldi	r22, 0x05	; 5
     a9e:	41 e0       	ldi	r20, 0x01	; 1
     aa0:	0e 94 46 09 	call	0x128c	; 0x128c <DIO_u8setPinDirection>
		 * 2. Fast PWM Mode mode 14
		 * 3. Clear OC1A when match occurs (non inverted mode) COM20=0 & COM21=1
		 * 4. clock = F_CPU/N
		 */

		CLR_BIT(TCC1A_REG,3);
     aa4:	af e4       	ldi	r26, 0x4F	; 79
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	ef e4       	ldi	r30, 0x4F	; 79
     aaa:	f0 e0       	ldi	r31, 0x00	; 0
     aac:	80 81       	ld	r24, Z
     aae:	87 7f       	andi	r24, 0xF7	; 247
     ab0:	8c 93       	st	X, r24
		if(timer_config->PWM_Mode == FAST_PWM)
     ab2:	e9 81       	ldd	r30, Y+1	; 0x01
     ab4:	fa 81       	ldd	r31, Y+2	; 0x02
     ab6:	80 85       	ldd	r24, Z+8	; 0x08
     ab8:	82 30       	cpi	r24, 0x02	; 2
     aba:	09 f0       	breq	.+2      	; 0xabe <PWM_timers_init+0x102>
     abc:	5b c0       	rjmp	.+182    	; 0xb74 <PWM_timers_init+0x1b8>
		{

			SET_BIT(TCC1B_REG,4);SET_BIT(TCC1B_REG,3);SET_BIT(TCC1A_REG,1);CLR_BIT(TCC1A_REG,0);
     abe:	ae e4       	ldi	r26, 0x4E	; 78
     ac0:	b0 e0       	ldi	r27, 0x00	; 0
     ac2:	ee e4       	ldi	r30, 0x4E	; 78
     ac4:	f0 e0       	ldi	r31, 0x00	; 0
     ac6:	80 81       	ld	r24, Z
     ac8:	80 61       	ori	r24, 0x10	; 16
     aca:	8c 93       	st	X, r24
     acc:	ae e4       	ldi	r26, 0x4E	; 78
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	ee e4       	ldi	r30, 0x4E	; 78
     ad2:	f0 e0       	ldi	r31, 0x00	; 0
     ad4:	80 81       	ld	r24, Z
     ad6:	88 60       	ori	r24, 0x08	; 8
     ad8:	8c 93       	st	X, r24
     ada:	af e4       	ldi	r26, 0x4F	; 79
     adc:	b0 e0       	ldi	r27, 0x00	; 0
     ade:	ef e4       	ldi	r30, 0x4F	; 79
     ae0:	f0 e0       	ldi	r31, 0x00	; 0
     ae2:	80 81       	ld	r24, Z
     ae4:	82 60       	ori	r24, 0x02	; 2
     ae6:	8c 93       	st	X, r24
     ae8:	af e4       	ldi	r26, 0x4F	; 79
     aea:	b0 e0       	ldi	r27, 0x00	; 0
     aec:	ef e4       	ldi	r30, 0x4F	; 79
     aee:	f0 e0       	ldi	r31, 0x00	; 0
     af0:	80 81       	ld	r24, Z
     af2:	8e 7f       	andi	r24, 0xFE	; 254
     af4:	8c 93       	st	X, r24
			SET_BIT(TCC1A_REG,7);SET_BIT(TCC1A_REG,5);CLR_BIT(TCC1A_REG,6);CLR_BIT(TCC1A_REG,4);
     af6:	af e4       	ldi	r26, 0x4F	; 79
     af8:	b0 e0       	ldi	r27, 0x00	; 0
     afa:	ef e4       	ldi	r30, 0x4F	; 79
     afc:	f0 e0       	ldi	r31, 0x00	; 0
     afe:	80 81       	ld	r24, Z
     b00:	80 68       	ori	r24, 0x80	; 128
     b02:	8c 93       	st	X, r24
     b04:	af e4       	ldi	r26, 0x4F	; 79
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	ef e4       	ldi	r30, 0x4F	; 79
     b0a:	f0 e0       	ldi	r31, 0x00	; 0
     b0c:	80 81       	ld	r24, Z
     b0e:	80 62       	ori	r24, 0x20	; 32
     b10:	8c 93       	st	X, r24
     b12:	af e4       	ldi	r26, 0x4F	; 79
     b14:	b0 e0       	ldi	r27, 0x00	; 0
     b16:	ef e4       	ldi	r30, 0x4F	; 79
     b18:	f0 e0       	ldi	r31, 0x00	; 0
     b1a:	80 81       	ld	r24, Z
     b1c:	8f 7b       	andi	r24, 0xBF	; 191
     b1e:	8c 93       	st	X, r24
     b20:	af e4       	ldi	r26, 0x4F	; 79
     b22:	b0 e0       	ldi	r27, 0x00	; 0
     b24:	ef e4       	ldi	r30, 0x4F	; 79
     b26:	f0 e0       	ldi	r31, 0x00	; 0
     b28:	80 81       	ld	r24, Z
     b2a:	8f 7e       	andi	r24, 0xEF	; 239
     b2c:	8c 93       	st	X, r24
			if(timer_config->channels_number==BOTH_CHANNELS)
     b2e:	e9 81       	ldd	r30, Y+1	; 0x01
     b30:	fa 81       	ldd	r31, Y+2	; 0x02
     b32:	83 85       	ldd	r24, Z+11	; 0x0b
     b34:	82 30       	cpi	r24, 0x02	; 2
     b36:	09 f0       	breq	.+2      	; 0xb3a <PWM_timers_init+0x17e>
     b38:	5f c0       	rjmp	.+190    	; 0xbf8 <PWM_timers_init+0x23c>
			{
				CLR_BIT(TCC1A_REG,2);
     b3a:	af e4       	ldi	r26, 0x4F	; 79
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	ef e4       	ldi	r30, 0x4F	; 79
     b40:	f0 e0       	ldi	r31, 0x00	; 0
     b42:	80 81       	ld	r24, Z
     b44:	8b 7f       	andi	r24, 0xFB	; 251
     b46:	8c 93       	st	X, r24
				DIO_u8setPinDirection(PORT_D, PIN_4, OUTPUT) ;/*OC1B->output*/
     b48:	83 e0       	ldi	r24, 0x03	; 3
     b4a:	64 e0       	ldi	r22, 0x04	; 4
     b4c:	41 e0       	ldi	r20, 0x01	; 1
     b4e:	0e 94 46 09 	call	0x128c	; 0x128c <DIO_u8setPinDirection>
				SET_BIT(TCC1A_REG,5);/*channel B enable*/
     b52:	af e4       	ldi	r26, 0x4F	; 79
     b54:	b0 e0       	ldi	r27, 0x00	; 0
     b56:	ef e4       	ldi	r30, 0x4F	; 79
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	80 81       	ld	r24, Z
     b5c:	80 62       	ori	r24, 0x20	; 32
     b5e:	8c 93       	st	X, r24
				OCR1B_REG = timer_config->set_duty_cycle_timer1_ch_B ; /* Set Compare Value*/
     b60:	a8 e4       	ldi	r26, 0x48	; 72
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	e9 81       	ldd	r30, Y+1	; 0x01
     b66:	fa 81       	ldd	r31, Y+2	; 0x02
     b68:	84 81       	ldd	r24, Z+4	; 0x04
     b6a:	95 81       	ldd	r25, Z+5	; 0x05
     b6c:	11 96       	adiw	r26, 0x01	; 1
     b6e:	9c 93       	st	X, r25
     b70:	8e 93       	st	-X, r24
     b72:	42 c0       	rjmp	.+132    	; 0xbf8 <PWM_timers_init+0x23c>
			}
		}
		else if(timer_config->PWM_Mode == PHASE_CORRECT_PWM)
     b74:	e9 81       	ldd	r30, Y+1	; 0x01
     b76:	fa 81       	ldd	r31, Y+2	; 0x02
     b78:	80 85       	ldd	r24, Z+8	; 0x08
     b7a:	83 30       	cpi	r24, 0x03	; 3
     b7c:	e9 f5       	brne	.+122    	; 0xbf8 <PWM_timers_init+0x23c>
		{

			SET_BIT(TCC1B_REG,4);CLR_BIT(TCC1B_REG,3);SET_BIT(TCC1A_REG,1);CLR_BIT(TCC1A_REG,0);
     b7e:	ae e4       	ldi	r26, 0x4E	; 78
     b80:	b0 e0       	ldi	r27, 0x00	; 0
     b82:	ee e4       	ldi	r30, 0x4E	; 78
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	80 81       	ld	r24, Z
     b88:	80 61       	ori	r24, 0x10	; 16
     b8a:	8c 93       	st	X, r24
     b8c:	ae e4       	ldi	r26, 0x4E	; 78
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	ee e4       	ldi	r30, 0x4E	; 78
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	80 81       	ld	r24, Z
     b96:	87 7f       	andi	r24, 0xF7	; 247
     b98:	8c 93       	st	X, r24
     b9a:	af e4       	ldi	r26, 0x4F	; 79
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	ef e4       	ldi	r30, 0x4F	; 79
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	80 81       	ld	r24, Z
     ba4:	82 60       	ori	r24, 0x02	; 2
     ba6:	8c 93       	st	X, r24
     ba8:	af e4       	ldi	r26, 0x4F	; 79
     baa:	b0 e0       	ldi	r27, 0x00	; 0
     bac:	ef e4       	ldi	r30, 0x4F	; 79
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	80 81       	ld	r24, Z
     bb2:	8e 7f       	andi	r24, 0xFE	; 254
     bb4:	8c 93       	st	X, r24

			if(timer_config->channels_number==BOTH_CHANNELS)
     bb6:	e9 81       	ldd	r30, Y+1	; 0x01
     bb8:	fa 81       	ldd	r31, Y+2	; 0x02
     bba:	83 85       	ldd	r24, Z+11	; 0x0b
     bbc:	82 30       	cpi	r24, 0x02	; 2
     bbe:	e1 f4       	brne	.+56     	; 0xbf8 <PWM_timers_init+0x23c>
			{
				CLR_BIT(TCC1A_REG,2);
     bc0:	af e4       	ldi	r26, 0x4F	; 79
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	ef e4       	ldi	r30, 0x4F	; 79
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	80 81       	ld	r24, Z
     bca:	8b 7f       	andi	r24, 0xFB	; 251
     bcc:	8c 93       	st	X, r24
				DIO_u8setPinDirection(PORT_D, PIN_4, OUTPUT) ;/*OC1B->output*/
     bce:	83 e0       	ldi	r24, 0x03	; 3
     bd0:	64 e0       	ldi	r22, 0x04	; 4
     bd2:	41 e0       	ldi	r20, 0x01	; 1
     bd4:	0e 94 46 09 	call	0x128c	; 0x128c <DIO_u8setPinDirection>
				SET_BIT(TCC1A_REG,5);/*channel B enable*/
     bd8:	af e4       	ldi	r26, 0x4F	; 79
     bda:	b0 e0       	ldi	r27, 0x00	; 0
     bdc:	ef e4       	ldi	r30, 0x4F	; 79
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	80 62       	ori	r24, 0x20	; 32
     be4:	8c 93       	st	X, r24
				OCR1B_REG = timer_config->set_duty_cycle_timer1_ch_B ; /* Set Compare Value*/
     be6:	a8 e4       	ldi	r26, 0x48	; 72
     be8:	b0 e0       	ldi	r27, 0x00	; 0
     bea:	e9 81       	ldd	r30, Y+1	; 0x01
     bec:	fa 81       	ldd	r31, Y+2	; 0x02
     bee:	84 81       	ldd	r24, Z+4	; 0x04
     bf0:	95 81       	ldd	r25, Z+5	; 0x05
     bf2:	11 96       	adiw	r26, 0x01	; 1
     bf4:	9c 93       	st	X, r25
     bf6:	8e 93       	st	-X, r24
			}
		}
			/*select the clk (prescaler)to start counting */
			TCC1B_REG=(TCC1B_REG & 0b11111000)|(timer_config->T0_T1_used_freq&0b00000111 );
     bf8:	ae e4       	ldi	r26, 0x4E	; 78
     bfa:	b0 e0       	ldi	r27, 0x00	; 0
     bfc:	ee e4       	ldi	r30, 0x4E	; 78
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	80 81       	ld	r24, Z
     c02:	98 2f       	mov	r25, r24
     c04:	98 7f       	andi	r25, 0xF8	; 248
     c06:	e9 81       	ldd	r30, Y+1	; 0x01
     c08:	fa 81       	ldd	r31, Y+2	; 0x02
     c0a:	86 81       	ldd	r24, Z+6	; 0x06
     c0c:	87 70       	andi	r24, 0x07	; 7
     c0e:	89 2b       	or	r24, r25
     c10:	8c 93       	st	X, r24
     c12:	3d c0       	rjmp	.+122    	; 0xc8e <PWM_timers_init+0x2d2>
			break;
	case TIMER_2:
		clear_timer(TIMER_2); /* Set Timer Initial Value to 0*/
     c14:	82 e0       	ldi	r24, 0x02	; 2
     c16:	0e 94 9b 04 	call	0x936	; 0x936 <clear_timer>
		OCR2_REG  = timer_config->set_duty_cycle/100; /* Set Compare Value*/
     c1a:	03 e4       	ldi	r16, 0x43	; 67
     c1c:	10 e0       	ldi	r17, 0x00	; 0
     c1e:	e9 81       	ldd	r30, Y+1	; 0x01
     c20:	fa 81       	ldd	r31, Y+2	; 0x02
     c22:	82 81       	ldd	r24, Z+2	; 0x02
     c24:	93 81       	ldd	r25, Z+3	; 0x03
     c26:	24 e6       	ldi	r18, 0x64	; 100
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	b9 01       	movw	r22, r18
     c2c:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <__udivmodhi4>
     c30:	cb 01       	movw	r24, r22
     c32:	f8 01       	movw	r30, r16
     c34:	80 83       	st	Z, r24
		/*Configure PD7/OC2 as output pin --> pin where the PWM signal is generated from MC*/
		DIO_u8setPinDirection(PORT_D, PIN_7, OUTPUT);
     c36:	83 e0       	ldi	r24, 0x03	; 3
     c38:	67 e0       	ldi	r22, 0x07	; 7
     c3a:	41 e0       	ldi	r20, 0x01	; 1
     c3c:	0e 94 46 09 	call	0x128c	; 0x128c <DIO_u8setPinDirection>
		 * 2. Fast PWM Mode WGM21=1 & WGM20=1
		 * 3. Clear OC2 when match occurs (non inverted mode) COM20=0 & COM21=1
		 * 4. clock = F_CPU/N
		 *
		 */
		CLR_BIT(TCC2_REG,7);
     c40:	a5 e4       	ldi	r26, 0x45	; 69
     c42:	b0 e0       	ldi	r27, 0x00	; 0
     c44:	e5 e4       	ldi	r30, 0x45	; 69
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	80 81       	ld	r24, Z
     c4a:	8f 77       	andi	r24, 0x7F	; 127
     c4c:	8c 93       	st	X, r24
		if(timer_config->PWM_Mode == FAST_PWM)
     c4e:	e9 81       	ldd	r30, Y+1	; 0x01
     c50:	fa 81       	ldd	r31, Y+2	; 0x02
     c52:	80 85       	ldd	r24, Z+8	; 0x08
     c54:	82 30       	cpi	r24, 0x02	; 2
     c56:	29 f4       	brne	.+10     	; 0xc62 <PWM_timers_init+0x2a6>
		{
			TCC2_REG = (1<<3) | (1<<5) | (1<<6);
     c58:	e5 e4       	ldi	r30, 0x45	; 69
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	88 e6       	ldi	r24, 0x68	; 104
     c5e:	80 83       	st	Z, r24
     c60:	09 c0       	rjmp	.+18     	; 0xc74 <PWM_timers_init+0x2b8>
		}
		else if(timer_config->PWM_Mode == PHASE_CORRECT_PWM)
     c62:	e9 81       	ldd	r30, Y+1	; 0x01
     c64:	fa 81       	ldd	r31, Y+2	; 0x02
     c66:	80 85       	ldd	r24, Z+8	; 0x08
     c68:	83 30       	cpi	r24, 0x03	; 3
     c6a:	21 f4       	brne	.+8      	; 0xc74 <PWM_timers_init+0x2b8>
		{
			TCC2_REG = (0<<3) | (1<<5) | (1<<6);
     c6c:	e5 e4       	ldi	r30, 0x45	; 69
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 e6       	ldi	r24, 0x60	; 96
     c72:	80 83       	st	Z, r24
		}
		/*select the clk (prescaler)to start counting */
		TCC2_REG=(TCC2_REG & 0b11111000)|(timer_config->T2_used_freq&0b00000111 );
     c74:	a5 e4       	ldi	r26, 0x45	; 69
     c76:	b0 e0       	ldi	r27, 0x00	; 0
     c78:	e5 e4       	ldi	r30, 0x45	; 69
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	98 2f       	mov	r25, r24
     c80:	98 7f       	andi	r25, 0xF8	; 248
     c82:	e9 81       	ldd	r30, Y+1	; 0x01
     c84:	fa 81       	ldd	r31, Y+2	; 0x02
     c86:	87 81       	ldd	r24, Z+7	; 0x07
     c88:	87 70       	andi	r24, 0x07	; 7
     c8a:	89 2b       	or	r24, r25
     c8c:	8c 93       	st	X, r24
		break;
		}

	}
     c8e:	0f 90       	pop	r0
     c90:	0f 90       	pop	r0
     c92:	0f 90       	pop	r0
     c94:	0f 90       	pop	r0
     c96:	cf 91       	pop	r28
     c98:	df 91       	pop	r29
     c9a:	1f 91       	pop	r17
     c9c:	0f 91       	pop	r16
     c9e:	08 95       	ret

00000ca0 <Global_VidINTEnable>:

    void Global_VidINTEnable(void)
	{
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
		SET_BIT(S_REG,7);
     ca8:	af e5       	ldi	r26, 0x5F	; 95
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	ef e5       	ldi	r30, 0x5F	; 95
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 81       	ld	r24, Z
     cb2:	80 68       	ori	r24, 0x80	; 128
     cb4:	8c 93       	st	X, r24
	}
     cb6:	cf 91       	pop	r28
     cb8:	df 91       	pop	r29
     cba:	08 95       	ret

00000cbc <Global_VidINTDisable>:

	void Global_VidINTDisable(void)
	{
     cbc:	df 93       	push	r29
     cbe:	cf 93       	push	r28
     cc0:	cd b7       	in	r28, 0x3d	; 61
     cc2:	de b7       	in	r29, 0x3e	; 62
		CLR_BIT(S_REG,7);
     cc4:	af e5       	ldi	r26, 0x5F	; 95
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	ef e5       	ldi	r30, 0x5F	; 95
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	8f 77       	andi	r24, 0x7F	; 127
     cd0:	8c 93       	st	X, r24
	}
     cd2:	cf 91       	pop	r28
     cd4:	df 91       	pop	r29
     cd6:	08 95       	ret

00000cd8 <Set_CallBack_EXTINT_0>:

EXTINT_N_PTR * EXTINT_ISR;


void Set_CallBack_EXTINT_0(void (*ptr)(void))
{
     cd8:	df 93       	push	r29
     cda:	cf 93       	push	r28
     cdc:	00 d0       	rcall	.+0      	; 0xcde <Set_CallBack_EXTINT_0+0x6>
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
     ce2:	9a 83       	std	Y+2, r25	; 0x02
     ce4:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
     ce6:	89 81       	ldd	r24, Y+1	; 0x01
     ce8:	9a 81       	ldd	r25, Y+2	; 0x02
     cea:	00 97       	sbiw	r24, 0x00	; 0
     cec:	41 f0       	breq	.+16     	; 0xcfe <Set_CallBack_EXTINT_0+0x26>
	{
		EXTINT_ISR->EXTINT_0 = ptr;
     cee:	e0 91 68 00 	lds	r30, 0x0068
     cf2:	f0 91 69 00 	lds	r31, 0x0069
     cf6:	89 81       	ldd	r24, Y+1	; 0x01
     cf8:	9a 81       	ldd	r25, Y+2	; 0x02
     cfa:	91 83       	std	Z+1, r25	; 0x01
     cfc:	80 83       	st	Z, r24
	}
}
     cfe:	0f 90       	pop	r0
     d00:	0f 90       	pop	r0
     d02:	cf 91       	pop	r28
     d04:	df 91       	pop	r29
     d06:	08 95       	ret

00000d08 <__vector_1>:
void __vector_1 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_1 (void)
{
     d08:	1f 92       	push	r1
     d0a:	0f 92       	push	r0
     d0c:	0f b6       	in	r0, 0x3f	; 63
     d0e:	0f 92       	push	r0
     d10:	11 24       	eor	r1, r1
     d12:	2f 93       	push	r18
     d14:	3f 93       	push	r19
     d16:	4f 93       	push	r20
     d18:	5f 93       	push	r21
     d1a:	6f 93       	push	r22
     d1c:	7f 93       	push	r23
     d1e:	8f 93       	push	r24
     d20:	9f 93       	push	r25
     d22:	af 93       	push	r26
     d24:	bf 93       	push	r27
     d26:	ef 93       	push	r30
     d28:	ff 93       	push	r31
     d2a:	df 93       	push	r29
     d2c:	cf 93       	push	r28
     d2e:	cd b7       	in	r28, 0x3d	; 61
     d30:	de b7       	in	r29, 0x3e	; 62
	if(EXTINT_ISR->EXTINT_0 != NULL)
     d32:	e0 91 68 00 	lds	r30, 0x0068
     d36:	f0 91 69 00 	lds	r31, 0x0069
     d3a:	80 81       	ld	r24, Z
     d3c:	91 81       	ldd	r25, Z+1	; 0x01
     d3e:	00 97       	sbiw	r24, 0x00	; 0
     d40:	41 f0       	breq	.+16     	; 0xd52 <__vector_1+0x4a>
	{
		EXTINT_ISR->EXTINT_0();
     d42:	e0 91 68 00 	lds	r30, 0x0068
     d46:	f0 91 69 00 	lds	r31, 0x0069
     d4a:	01 90       	ld	r0, Z+
     d4c:	f0 81       	ld	r31, Z
     d4e:	e0 2d       	mov	r30, r0
     d50:	09 95       	icall
	}
}
     d52:	cf 91       	pop	r28
     d54:	df 91       	pop	r29
     d56:	ff 91       	pop	r31
     d58:	ef 91       	pop	r30
     d5a:	bf 91       	pop	r27
     d5c:	af 91       	pop	r26
     d5e:	9f 91       	pop	r25
     d60:	8f 91       	pop	r24
     d62:	7f 91       	pop	r23
     d64:	6f 91       	pop	r22
     d66:	5f 91       	pop	r21
     d68:	4f 91       	pop	r20
     d6a:	3f 91       	pop	r19
     d6c:	2f 91       	pop	r18
     d6e:	0f 90       	pop	r0
     d70:	0f be       	out	0x3f, r0	; 63
     d72:	0f 90       	pop	r0
     d74:	1f 90       	pop	r1
     d76:	18 95       	reti

00000d78 <Set_CallBack_EXTINT_1>:

void Set_CallBack_EXTINT_1(void (*ptr)(void))
{
     d78:	df 93       	push	r29
     d7a:	cf 93       	push	r28
     d7c:	00 d0       	rcall	.+0      	; 0xd7e <Set_CallBack_EXTINT_1+0x6>
     d7e:	cd b7       	in	r28, 0x3d	; 61
     d80:	de b7       	in	r29, 0x3e	; 62
     d82:	9a 83       	std	Y+2, r25	; 0x02
     d84:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
     d86:	89 81       	ldd	r24, Y+1	; 0x01
     d88:	9a 81       	ldd	r25, Y+2	; 0x02
     d8a:	00 97       	sbiw	r24, 0x00	; 0
     d8c:	41 f0       	breq	.+16     	; 0xd9e <Set_CallBack_EXTINT_1+0x26>
	{
		EXTINT_ISR->EXTINT_1 = ptr;
     d8e:	e0 91 68 00 	lds	r30, 0x0068
     d92:	f0 91 69 00 	lds	r31, 0x0069
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	9a 81       	ldd	r25, Y+2	; 0x02
     d9a:	93 83       	std	Z+3, r25	; 0x03
     d9c:	82 83       	std	Z+2, r24	; 0x02
	}
}
     d9e:	0f 90       	pop	r0
     da0:	0f 90       	pop	r0
     da2:	cf 91       	pop	r28
     da4:	df 91       	pop	r29
     da6:	08 95       	ret

00000da8 <__vector_2>:
void __vector_2 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_2 (void)
{
     da8:	1f 92       	push	r1
     daa:	0f 92       	push	r0
     dac:	0f b6       	in	r0, 0x3f	; 63
     dae:	0f 92       	push	r0
     db0:	11 24       	eor	r1, r1
     db2:	2f 93       	push	r18
     db4:	3f 93       	push	r19
     db6:	4f 93       	push	r20
     db8:	5f 93       	push	r21
     dba:	6f 93       	push	r22
     dbc:	7f 93       	push	r23
     dbe:	8f 93       	push	r24
     dc0:	9f 93       	push	r25
     dc2:	af 93       	push	r26
     dc4:	bf 93       	push	r27
     dc6:	ef 93       	push	r30
     dc8:	ff 93       	push	r31
     dca:	df 93       	push	r29
     dcc:	cf 93       	push	r28
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
	if(EXTINT_ISR->EXTINT_1 != NULL)
     dd2:	e0 91 68 00 	lds	r30, 0x0068
     dd6:	f0 91 69 00 	lds	r31, 0x0069
     dda:	82 81       	ldd	r24, Z+2	; 0x02
     ddc:	93 81       	ldd	r25, Z+3	; 0x03
     dde:	00 97       	sbiw	r24, 0x00	; 0
     de0:	41 f0       	breq	.+16     	; 0xdf2 <__vector_2+0x4a>
	{
		EXTINT_ISR->EXTINT_1();
     de2:	e0 91 68 00 	lds	r30, 0x0068
     de6:	f0 91 69 00 	lds	r31, 0x0069
     dea:	02 80       	ldd	r0, Z+2	; 0x02
     dec:	f3 81       	ldd	r31, Z+3	; 0x03
     dee:	e0 2d       	mov	r30, r0
     df0:	09 95       	icall
	}
}
     df2:	cf 91       	pop	r28
     df4:	df 91       	pop	r29
     df6:	ff 91       	pop	r31
     df8:	ef 91       	pop	r30
     dfa:	bf 91       	pop	r27
     dfc:	af 91       	pop	r26
     dfe:	9f 91       	pop	r25
     e00:	8f 91       	pop	r24
     e02:	7f 91       	pop	r23
     e04:	6f 91       	pop	r22
     e06:	5f 91       	pop	r21
     e08:	4f 91       	pop	r20
     e0a:	3f 91       	pop	r19
     e0c:	2f 91       	pop	r18
     e0e:	0f 90       	pop	r0
     e10:	0f be       	out	0x3f, r0	; 63
     e12:	0f 90       	pop	r0
     e14:	1f 90       	pop	r1
     e16:	18 95       	reti

00000e18 <Set_CallBack_EXTINT_2>:

void Set_CallBack_EXTINT_2(void (*ptr)(void))
{
     e18:	df 93       	push	r29
     e1a:	cf 93       	push	r28
     e1c:	00 d0       	rcall	.+0      	; 0xe1e <Set_CallBack_EXTINT_2+0x6>
     e1e:	cd b7       	in	r28, 0x3d	; 61
     e20:	de b7       	in	r29, 0x3e	; 62
     e22:	9a 83       	std	Y+2, r25	; 0x02
     e24:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
     e26:	89 81       	ldd	r24, Y+1	; 0x01
     e28:	9a 81       	ldd	r25, Y+2	; 0x02
     e2a:	00 97       	sbiw	r24, 0x00	; 0
     e2c:	41 f0       	breq	.+16     	; 0xe3e <Set_CallBack_EXTINT_2+0x26>
	{
		EXTINT_ISR->EXTINT_2 = ptr;
     e2e:	e0 91 68 00 	lds	r30, 0x0068
     e32:	f0 91 69 00 	lds	r31, 0x0069
     e36:	89 81       	ldd	r24, Y+1	; 0x01
     e38:	9a 81       	ldd	r25, Y+2	; 0x02
     e3a:	95 83       	std	Z+5, r25	; 0x05
     e3c:	84 83       	std	Z+4, r24	; 0x04
	}
}
     e3e:	0f 90       	pop	r0
     e40:	0f 90       	pop	r0
     e42:	cf 91       	pop	r28
     e44:	df 91       	pop	r29
     e46:	08 95       	ret

00000e48 <__vector_3>:
void __vector_3 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_3 (void)
{
     e48:	1f 92       	push	r1
     e4a:	0f 92       	push	r0
     e4c:	0f b6       	in	r0, 0x3f	; 63
     e4e:	0f 92       	push	r0
     e50:	11 24       	eor	r1, r1
     e52:	2f 93       	push	r18
     e54:	3f 93       	push	r19
     e56:	4f 93       	push	r20
     e58:	5f 93       	push	r21
     e5a:	6f 93       	push	r22
     e5c:	7f 93       	push	r23
     e5e:	8f 93       	push	r24
     e60:	9f 93       	push	r25
     e62:	af 93       	push	r26
     e64:	bf 93       	push	r27
     e66:	ef 93       	push	r30
     e68:	ff 93       	push	r31
     e6a:	df 93       	push	r29
     e6c:	cf 93       	push	r28
     e6e:	cd b7       	in	r28, 0x3d	; 61
     e70:	de b7       	in	r29, 0x3e	; 62
	if(EXTINT_ISR->EXTINT_2 != NULL)
     e72:	e0 91 68 00 	lds	r30, 0x0068
     e76:	f0 91 69 00 	lds	r31, 0x0069
     e7a:	84 81       	ldd	r24, Z+4	; 0x04
     e7c:	95 81       	ldd	r25, Z+5	; 0x05
     e7e:	00 97       	sbiw	r24, 0x00	; 0
     e80:	41 f0       	breq	.+16     	; 0xe92 <__vector_3+0x4a>
	{
		EXTINT_ISR->EXTINT_2();
     e82:	e0 91 68 00 	lds	r30, 0x0068
     e86:	f0 91 69 00 	lds	r31, 0x0069
     e8a:	04 80       	ldd	r0, Z+4	; 0x04
     e8c:	f5 81       	ldd	r31, Z+5	; 0x05
     e8e:	e0 2d       	mov	r30, r0
     e90:	09 95       	icall
	}
}
     e92:	cf 91       	pop	r28
     e94:	df 91       	pop	r29
     e96:	ff 91       	pop	r31
     e98:	ef 91       	pop	r30
     e9a:	bf 91       	pop	r27
     e9c:	af 91       	pop	r26
     e9e:	9f 91       	pop	r25
     ea0:	8f 91       	pop	r24
     ea2:	7f 91       	pop	r23
     ea4:	6f 91       	pop	r22
     ea6:	5f 91       	pop	r21
     ea8:	4f 91       	pop	r20
     eaa:	3f 91       	pop	r19
     eac:	2f 91       	pop	r18
     eae:	0f 90       	pop	r0
     eb0:	0f be       	out	0x3f, r0	; 63
     eb2:	0f 90       	pop	r0
     eb4:	1f 90       	pop	r1
     eb6:	18 95       	reti

00000eb8 <EXTINT_u8Enable>:

u8 EXTINT_u8Enable(u8 Copy_u8ExtInt)
{
     eb8:	df 93       	push	r29
     eba:	cf 93       	push	r28
     ebc:	00 d0       	rcall	.+0      	; 0xebe <EXTINT_u8Enable+0x6>
     ebe:	00 d0       	rcall	.+0      	; 0xec0 <EXTINT_u8Enable+0x8>
     ec0:	cd b7       	in	r28, 0x3d	; 61
     ec2:	de b7       	in	r29, 0x3e	; 62
     ec4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8errStatus = RT_OK;
     ec6:	19 82       	std	Y+1, r1	; 0x01
	S_REG |= GLOBAL_INTERRUPT_ENABLE;
     ec8:	af e5       	ldi	r26, 0x5F	; 95
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	ef e5       	ldi	r30, 0x5F	; 95
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	80 68       	ori	r24, 0x80	; 128
     ed4:	8c 93       	st	X, r24
	switch(Copy_u8ExtInt)
     ed6:	8a 81       	ldd	r24, Y+2	; 0x02
     ed8:	28 2f       	mov	r18, r24
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	3c 83       	std	Y+4, r19	; 0x04
     ede:	2b 83       	std	Y+3, r18	; 0x03
     ee0:	8b 81       	ldd	r24, Y+3	; 0x03
     ee2:	9c 81       	ldd	r25, Y+4	; 0x04
     ee4:	81 30       	cpi	r24, 0x01	; 1
     ee6:	91 05       	cpc	r25, r1
     ee8:	89 f0       	breq	.+34     	; 0xf0c <EXTINT_u8Enable+0x54>
     eea:	2b 81       	ldd	r18, Y+3	; 0x03
     eec:	3c 81       	ldd	r19, Y+4	; 0x04
     eee:	22 30       	cpi	r18, 0x02	; 2
     ef0:	31 05       	cpc	r19, r1
     ef2:	a1 f0       	breq	.+40     	; 0xf1c <EXTINT_u8Enable+0x64>
     ef4:	8b 81       	ldd	r24, Y+3	; 0x03
     ef6:	9c 81       	ldd	r25, Y+4	; 0x04
     ef8:	00 97       	sbiw	r24, 0x00	; 0
     efa:	c1 f4       	brne	.+48     	; 0xf2c <EXTINT_u8Enable+0x74>
	{
	case INT_0 : GIC_REG |= INT0_EN ; break;
     efc:	ab e5       	ldi	r26, 0x5B	; 91
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	eb e5       	ldi	r30, 0x5B	; 91
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	80 64       	ori	r24, 0x40	; 64
     f08:	8c 93       	st	X, r24
     f0a:	12 c0       	rjmp	.+36     	; 0xf30 <EXTINT_u8Enable+0x78>
	case INT_1 : GIC_REG |= INT1_EN ; break;
     f0c:	ab e5       	ldi	r26, 0x5B	; 91
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	eb e5       	ldi	r30, 0x5B	; 91
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	80 68       	ori	r24, 0x80	; 128
     f18:	8c 93       	st	X, r24
     f1a:	0a c0       	rjmp	.+20     	; 0xf30 <EXTINT_u8Enable+0x78>
	case INT_2 : GIC_REG |= INT2_EN ; break;
     f1c:	ab e5       	ldi	r26, 0x5B	; 91
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	eb e5       	ldi	r30, 0x5B	; 91
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	80 62       	ori	r24, 0x20	; 32
     f28:	8c 93       	st	X, r24
     f2a:	02 c0       	rjmp	.+4      	; 0xf30 <EXTINT_u8Enable+0x78>
	default : Local_u8errStatus = RT_NOK ;
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8errStatus;
     f30:	89 81       	ldd	r24, Y+1	; 0x01
}
     f32:	0f 90       	pop	r0
     f34:	0f 90       	pop	r0
     f36:	0f 90       	pop	r0
     f38:	0f 90       	pop	r0
     f3a:	cf 91       	pop	r28
     f3c:	df 91       	pop	r29
     f3e:	08 95       	ret

00000f40 <EXTINT_u8Disable>:

u8 EXTINT_u8Disable(u8 Copy_u8ExtInt)
{
     f40:	df 93       	push	r29
     f42:	cf 93       	push	r28
     f44:	00 d0       	rcall	.+0      	; 0xf46 <EXTINT_u8Disable+0x6>
     f46:	00 d0       	rcall	.+0      	; 0xf48 <EXTINT_u8Disable+0x8>
     f48:	cd b7       	in	r28, 0x3d	; 61
     f4a:	de b7       	in	r29, 0x3e	; 62
     f4c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8errStatus = RT_OK;
     f4e:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8ExtInt)
     f50:	8a 81       	ldd	r24, Y+2	; 0x02
     f52:	28 2f       	mov	r18, r24
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	3c 83       	std	Y+4, r19	; 0x04
     f58:	2b 83       	std	Y+3, r18	; 0x03
     f5a:	8b 81       	ldd	r24, Y+3	; 0x03
     f5c:	9c 81       	ldd	r25, Y+4	; 0x04
     f5e:	81 30       	cpi	r24, 0x01	; 1
     f60:	91 05       	cpc	r25, r1
     f62:	e9 f0       	breq	.+58     	; 0xf9e <EXTINT_u8Disable+0x5e>
     f64:	2b 81       	ldd	r18, Y+3	; 0x03
     f66:	3c 81       	ldd	r19, Y+4	; 0x04
     f68:	22 30       	cpi	r18, 0x02	; 2
     f6a:	31 05       	cpc	r19, r1
     f6c:	2c f4       	brge	.+10     	; 0xf78 <EXTINT_u8Disable+0x38>
     f6e:	8b 81       	ldd	r24, Y+3	; 0x03
     f70:	9c 81       	ldd	r25, Y+4	; 0x04
     f72:	00 97       	sbiw	r24, 0x00	; 0
     f74:	61 f0       	breq	.+24     	; 0xf8e <EXTINT_u8Disable+0x4e>
     f76:	2b c0       	rjmp	.+86     	; 0xfce <EXTINT_u8Disable+0x8e>
     f78:	2b 81       	ldd	r18, Y+3	; 0x03
     f7a:	3c 81       	ldd	r19, Y+4	; 0x04
     f7c:	22 30       	cpi	r18, 0x02	; 2
     f7e:	31 05       	cpc	r19, r1
     f80:	b1 f0       	breq	.+44     	; 0xfae <EXTINT_u8Disable+0x6e>
     f82:	8b 81       	ldd	r24, Y+3	; 0x03
     f84:	9c 81       	ldd	r25, Y+4	; 0x04
     f86:	83 30       	cpi	r24, 0x03	; 3
     f88:	91 05       	cpc	r25, r1
     f8a:	c9 f0       	breq	.+50     	; 0xfbe <EXTINT_u8Disable+0x7e>
     f8c:	20 c0       	rjmp	.+64     	; 0xfce <EXTINT_u8Disable+0x8e>
	{
	case INT_0 : CLR_BIT(GIC_REG,6) ; break;
     f8e:	ab e5       	ldi	r26, 0x5B	; 91
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	eb e5       	ldi	r30, 0x5B	; 91
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	8f 7b       	andi	r24, 0xBF	; 191
     f9a:	8c 93       	st	X, r24
     f9c:	1a c0       	rjmp	.+52     	; 0xfd2 <EXTINT_u8Disable+0x92>
	case INT_1 : CLR_BIT(GIC_REG,7) ; break;
     f9e:	ab e5       	ldi	r26, 0x5B	; 91
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	eb e5       	ldi	r30, 0x5B	; 91
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	8f 77       	andi	r24, 0x7F	; 127
     faa:	8c 93       	st	X, r24
     fac:	12 c0       	rjmp	.+36     	; 0xfd2 <EXTINT_u8Disable+0x92>
	case INT_2 : CLR_BIT(GIC_REG,5) ; break;
     fae:	ab e5       	ldi	r26, 0x5B	; 91
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	eb e5       	ldi	r30, 0x5B	; 91
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	8f 7d       	andi	r24, 0xDF	; 223
     fba:	8c 93       	st	X, r24
     fbc:	0a c0       	rjmp	.+20     	; 0xfd2 <EXTINT_u8Disable+0x92>
	case G_DIS : CLR_BIT(S_REG,7) ; break;
     fbe:	af e5       	ldi	r26, 0x5F	; 95
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	ef e5       	ldi	r30, 0x5F	; 95
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	8f 77       	andi	r24, 0x7F	; 127
     fca:	8c 93       	st	X, r24
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <EXTINT_u8Disable+0x92>
	default : Local_u8errStatus = RT_NOK;
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8errStatus;
     fd2:	89 81       	ldd	r24, Y+1	; 0x01
}
     fd4:	0f 90       	pop	r0
     fd6:	0f 90       	pop	r0
     fd8:	0f 90       	pop	r0
     fda:	0f 90       	pop	r0
     fdc:	cf 91       	pop	r28
     fde:	df 91       	pop	r29
     fe0:	08 95       	ret

00000fe2 <EXTINT_u8SenseCtrl>:

u8 EXTINT_u8SenseCtrl(u8 Copy_u8ExtInt,u8 Copy_u8ISCStatus)
{
     fe2:	df 93       	push	r29
     fe4:	cf 93       	push	r28
     fe6:	00 d0       	rcall	.+0      	; 0xfe8 <EXTINT_u8SenseCtrl+0x6>
     fe8:	00 d0       	rcall	.+0      	; 0xfea <EXTINT_u8SenseCtrl+0x8>
     fea:	0f 92       	push	r0
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62
     ff0:	8a 83       	std	Y+2, r24	; 0x02
     ff2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8errStatus = RT_OK;
     ff4:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8ExtInt)
     ff6:	8a 81       	ldd	r24, Y+2	; 0x02
     ff8:	28 2f       	mov	r18, r24
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	3d 83       	std	Y+5, r19	; 0x05
     ffe:	2c 83       	std	Y+4, r18	; 0x04
    1000:	8c 81       	ldd	r24, Y+4	; 0x04
    1002:	9d 81       	ldd	r25, Y+5	; 0x05
    1004:	81 30       	cpi	r24, 0x01	; 1
    1006:	91 05       	cpc	r25, r1
    1008:	01 f1       	breq	.+64     	; 0x104a <EXTINT_u8SenseCtrl+0x68>
    100a:	2c 81       	ldd	r18, Y+4	; 0x04
    100c:	3d 81       	ldd	r19, Y+5	; 0x05
    100e:	22 30       	cpi	r18, 0x02	; 2
    1010:	31 05       	cpc	r19, r1
    1012:	89 f1       	breq	.+98     	; 0x1076 <EXTINT_u8SenseCtrl+0x94>
    1014:	8c 81       	ldd	r24, Y+4	; 0x04
    1016:	9d 81       	ldd	r25, Y+5	; 0x05
    1018:	00 97       	sbiw	r24, 0x00	; 0
    101a:	09 f0       	breq	.+2      	; 0x101e <EXTINT_u8SenseCtrl+0x3c>
    101c:	42 c0       	rjmp	.+132    	; 0x10a2 <EXTINT_u8SenseCtrl+0xc0>
	{
	case INT_0 :
		Temp_Reg = MCUC_REG;
    101e:	e5 e5       	ldi	r30, 0x55	; 85
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	80 93 67 00 	sts	0x0067, r24
		Temp_Reg &= INT0_SC_CLR_MASK;
    1028:	80 91 67 00 	lds	r24, 0x0067
    102c:	8c 7f       	andi	r24, 0xFC	; 252
    102e:	80 93 67 00 	sts	0x0067, r24
		Temp_Reg |= Copy_u8ISCStatus;
    1032:	90 91 67 00 	lds	r25, 0x0067
    1036:	8b 81       	ldd	r24, Y+3	; 0x03
    1038:	89 2b       	or	r24, r25
    103a:	80 93 67 00 	sts	0x0067, r24
		MCUC_REG = Temp_Reg;
    103e:	e5 e5       	ldi	r30, 0x55	; 85
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 91 67 00 	lds	r24, 0x0067
    1046:	80 83       	st	Z, r24
    1048:	2e c0       	rjmp	.+92     	; 0x10a6 <EXTINT_u8SenseCtrl+0xc4>
		break;
	case INT_1 :
		Temp_Reg = MCUC_REG;
    104a:	e5 e5       	ldi	r30, 0x55	; 85
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	80 93 67 00 	sts	0x0067, r24
		Temp_Reg &= INT1_SC_CLR_MASK;
    1054:	80 91 67 00 	lds	r24, 0x0067
    1058:	83 7f       	andi	r24, 0xF3	; 243
    105a:	80 93 67 00 	sts	0x0067, r24
		Temp_Reg |= Copy_u8ISCStatus;
    105e:	90 91 67 00 	lds	r25, 0x0067
    1062:	8b 81       	ldd	r24, Y+3	; 0x03
    1064:	89 2b       	or	r24, r25
    1066:	80 93 67 00 	sts	0x0067, r24
		MCUC_REG = Temp_Reg;
    106a:	e5 e5       	ldi	r30, 0x55	; 85
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 91 67 00 	lds	r24, 0x0067
    1072:	80 83       	st	Z, r24
    1074:	18 c0       	rjmp	.+48     	; 0x10a6 <EXTINT_u8SenseCtrl+0xc4>
		break;
	case INT_2 :
		Temp_Reg = MCUCS_REG;
    1076:	e4 e5       	ldi	r30, 0x54	; 84
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	80 93 67 00 	sts	0x0067, r24
		Temp_Reg &= INT2_SC_CLR_MASK;
    1080:	80 91 67 00 	lds	r24, 0x0067
    1084:	8f 7b       	andi	r24, 0xBF	; 191
    1086:	80 93 67 00 	sts	0x0067, r24
		Temp_Reg |= Copy_u8ISCStatus;
    108a:	90 91 67 00 	lds	r25, 0x0067
    108e:	8b 81       	ldd	r24, Y+3	; 0x03
    1090:	89 2b       	or	r24, r25
    1092:	80 93 67 00 	sts	0x0067, r24
		MCUCS_REG = Temp_Reg;
    1096:	e4 e5       	ldi	r30, 0x54	; 84
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 91 67 00 	lds	r24, 0x0067
    109e:	80 83       	st	Z, r24
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <EXTINT_u8SenseCtrl+0xc4>
		break;
	default : Local_u8errStatus = RT_NOK;
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8errStatus;
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    10a8:	0f 90       	pop	r0
    10aa:	0f 90       	pop	r0
    10ac:	0f 90       	pop	r0
    10ae:	0f 90       	pop	r0
    10b0:	0f 90       	pop	r0
    10b2:	cf 91       	pop	r28
    10b4:	df 91       	pop	r29
    10b6:	08 95       	ret

000010b8 <DIO_u8setPortDirection>:
#define RT_NOK   (u8)   1
#define NULL     (void *)0


u8 DIO_u8setPortDirection(u8 Copy_u8port,u8 Copy_u8direction)
{   u8 Local_u8errStatus = RT_OK;
    10b8:	df 93       	push	r29
    10ba:	cf 93       	push	r28
    10bc:	00 d0       	rcall	.+0      	; 0x10be <DIO_u8setPortDirection+0x6>
    10be:	00 d0       	rcall	.+0      	; 0x10c0 <DIO_u8setPortDirection+0x8>
    10c0:	0f 92       	push	r0
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62
    10c6:	8a 83       	std	Y+2, r24	; 0x02
    10c8:	6b 83       	std	Y+3, r22	; 0x03
    10ca:	19 82       	std	Y+1, r1	; 0x01
switch(Copy_u8port)
    10cc:	8a 81       	ldd	r24, Y+2	; 0x02
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	3d 83       	std	Y+5, r19	; 0x05
    10d4:	2c 83       	std	Y+4, r18	; 0x04
    10d6:	8c 81       	ldd	r24, Y+4	; 0x04
    10d8:	9d 81       	ldd	r25, Y+5	; 0x05
    10da:	81 30       	cpi	r24, 0x01	; 1
    10dc:	91 05       	cpc	r25, r1
    10de:	d1 f0       	breq	.+52     	; 0x1114 <DIO_u8setPortDirection+0x5c>
    10e0:	2c 81       	ldd	r18, Y+4	; 0x04
    10e2:	3d 81       	ldd	r19, Y+5	; 0x05
    10e4:	22 30       	cpi	r18, 0x02	; 2
    10e6:	31 05       	cpc	r19, r1
    10e8:	2c f4       	brge	.+10     	; 0x10f4 <DIO_u8setPortDirection+0x3c>
    10ea:	8c 81       	ldd	r24, Y+4	; 0x04
    10ec:	9d 81       	ldd	r25, Y+5	; 0x05
    10ee:	00 97       	sbiw	r24, 0x00	; 0
    10f0:	61 f0       	breq	.+24     	; 0x110a <DIO_u8setPortDirection+0x52>
    10f2:	1f c0       	rjmp	.+62     	; 0x1132 <DIO_u8setPortDirection+0x7a>
    10f4:	2c 81       	ldd	r18, Y+4	; 0x04
    10f6:	3d 81       	ldd	r19, Y+5	; 0x05
    10f8:	22 30       	cpi	r18, 0x02	; 2
    10fa:	31 05       	cpc	r19, r1
    10fc:	81 f0       	breq	.+32     	; 0x111e <DIO_u8setPortDirection+0x66>
    10fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1100:	9d 81       	ldd	r25, Y+5	; 0x05
    1102:	83 30       	cpi	r24, 0x03	; 3
    1104:	91 05       	cpc	r25, r1
    1106:	81 f0       	breq	.+32     	; 0x1128 <DIO_u8setPortDirection+0x70>
    1108:	14 c0       	rjmp	.+40     	; 0x1132 <DIO_u8setPortDirection+0x7a>
{
case PORT_A :DIOA->DDR = Copy_u8direction ;break ;
    110a:	e9 e3       	ldi	r30, 0x39	; 57
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	8b 81       	ldd	r24, Y+3	; 0x03
    1110:	81 83       	std	Z+1, r24	; 0x01
    1112:	11 c0       	rjmp	.+34     	; 0x1136 <DIO_u8setPortDirection+0x7e>
case PORT_B :DIOB->DDR = Copy_u8direction ;break ;
    1114:	e6 e3       	ldi	r30, 0x36	; 54
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	8b 81       	ldd	r24, Y+3	; 0x03
    111a:	81 83       	std	Z+1, r24	; 0x01
    111c:	0c c0       	rjmp	.+24     	; 0x1136 <DIO_u8setPortDirection+0x7e>
case PORT_C :DIOC->DDR = Copy_u8direction ;break ;
    111e:	e3 e3       	ldi	r30, 0x33	; 51
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	8b 81       	ldd	r24, Y+3	; 0x03
    1124:	81 83       	std	Z+1, r24	; 0x01
    1126:	07 c0       	rjmp	.+14     	; 0x1136 <DIO_u8setPortDirection+0x7e>
case PORT_D :DIOD->DDR = Copy_u8direction ;break ;
    1128:	e0 e3       	ldi	r30, 0x30	; 48
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	8b 81       	ldd	r24, Y+3	; 0x03
    112e:	81 83       	std	Z+1, r24	; 0x01
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <DIO_u8setPortDirection+0x7e>
default : Local_u8errStatus = RT_NOK ;
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	89 83       	std	Y+1, r24	; 0x01
}
return Local_u8errStatus;
    1136:	89 81       	ldd	r24, Y+1	; 0x01
}
    1138:	0f 90       	pop	r0
    113a:	0f 90       	pop	r0
    113c:	0f 90       	pop	r0
    113e:	0f 90       	pop	r0
    1140:	0f 90       	pop	r0
    1142:	cf 91       	pop	r28
    1144:	df 91       	pop	r29
    1146:	08 95       	ret

00001148 <DIO_u8setPortValue>:


u8 DIO_u8setPortValue(u8 Copy_u8port, u8 Copy_u8Value)
{ u8 Local_u8errStatus = RT_OK;
    1148:	df 93       	push	r29
    114a:	cf 93       	push	r28
    114c:	00 d0       	rcall	.+0      	; 0x114e <DIO_u8setPortValue+0x6>
    114e:	00 d0       	rcall	.+0      	; 0x1150 <DIO_u8setPortValue+0x8>
    1150:	0f 92       	push	r0
    1152:	cd b7       	in	r28, 0x3d	; 61
    1154:	de b7       	in	r29, 0x3e	; 62
    1156:	8a 83       	std	Y+2, r24	; 0x02
    1158:	6b 83       	std	Y+3, r22	; 0x03
    115a:	19 82       	std	Y+1, r1	; 0x01
switch(Copy_u8port)
    115c:	8a 81       	ldd	r24, Y+2	; 0x02
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	3d 83       	std	Y+5, r19	; 0x05
    1164:	2c 83       	std	Y+4, r18	; 0x04
    1166:	8c 81       	ldd	r24, Y+4	; 0x04
    1168:	9d 81       	ldd	r25, Y+5	; 0x05
    116a:	81 30       	cpi	r24, 0x01	; 1
    116c:	91 05       	cpc	r25, r1
    116e:	d1 f0       	breq	.+52     	; 0x11a4 <DIO_u8setPortValue+0x5c>
    1170:	2c 81       	ldd	r18, Y+4	; 0x04
    1172:	3d 81       	ldd	r19, Y+5	; 0x05
    1174:	22 30       	cpi	r18, 0x02	; 2
    1176:	31 05       	cpc	r19, r1
    1178:	2c f4       	brge	.+10     	; 0x1184 <DIO_u8setPortValue+0x3c>
    117a:	8c 81       	ldd	r24, Y+4	; 0x04
    117c:	9d 81       	ldd	r25, Y+5	; 0x05
    117e:	00 97       	sbiw	r24, 0x00	; 0
    1180:	61 f0       	breq	.+24     	; 0x119a <DIO_u8setPortValue+0x52>
    1182:	1f c0       	rjmp	.+62     	; 0x11c2 <DIO_u8setPortValue+0x7a>
    1184:	2c 81       	ldd	r18, Y+4	; 0x04
    1186:	3d 81       	ldd	r19, Y+5	; 0x05
    1188:	22 30       	cpi	r18, 0x02	; 2
    118a:	31 05       	cpc	r19, r1
    118c:	81 f0       	breq	.+32     	; 0x11ae <DIO_u8setPortValue+0x66>
    118e:	8c 81       	ldd	r24, Y+4	; 0x04
    1190:	9d 81       	ldd	r25, Y+5	; 0x05
    1192:	83 30       	cpi	r24, 0x03	; 3
    1194:	91 05       	cpc	r25, r1
    1196:	81 f0       	breq	.+32     	; 0x11b8 <DIO_u8setPortValue+0x70>
    1198:	14 c0       	rjmp	.+40     	; 0x11c2 <DIO_u8setPortValue+0x7a>
{
case PORT_A :DIOA->PORT = Copy_u8Value ;break ;
    119a:	e9 e3       	ldi	r30, 0x39	; 57
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	8b 81       	ldd	r24, Y+3	; 0x03
    11a0:	82 83       	std	Z+2, r24	; 0x02
    11a2:	11 c0       	rjmp	.+34     	; 0x11c6 <DIO_u8setPortValue+0x7e>
case PORT_B :DIOB->PORT = Copy_u8Value ;break ;
    11a4:	e6 e3       	ldi	r30, 0x36	; 54
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	8b 81       	ldd	r24, Y+3	; 0x03
    11aa:	82 83       	std	Z+2, r24	; 0x02
    11ac:	0c c0       	rjmp	.+24     	; 0x11c6 <DIO_u8setPortValue+0x7e>
case PORT_C :DIOC->PORT = Copy_u8Value ;break ;
    11ae:	e3 e3       	ldi	r30, 0x33	; 51
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	8b 81       	ldd	r24, Y+3	; 0x03
    11b4:	82 83       	std	Z+2, r24	; 0x02
    11b6:	07 c0       	rjmp	.+14     	; 0x11c6 <DIO_u8setPortValue+0x7e>
case PORT_D :DIOD->PORT = Copy_u8Value ;break ;
    11b8:	e0 e3       	ldi	r30, 0x30	; 48
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	8b 81       	ldd	r24, Y+3	; 0x03
    11be:	82 83       	std	Z+2, r24	; 0x02
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <DIO_u8setPortValue+0x7e>
default : Local_u8errStatus = RT_NOK ;
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	89 83       	std	Y+1, r24	; 0x01
}
return Local_u8errStatus;
    11c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    11c8:	0f 90       	pop	r0
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	cf 91       	pop	r28
    11d4:	df 91       	pop	r29
    11d6:	08 95       	ret

000011d8 <DIO_u8getPortValue>:


u8 DIO_u8getPortValue(u8 Copy_u8port, u8 * Copy_u8pValue)
{u8 Local_u8errStatus = RT_OK;
    11d8:	df 93       	push	r29
    11da:	cf 93       	push	r28
    11dc:	00 d0       	rcall	.+0      	; 0x11de <DIO_u8getPortValue+0x6>
    11de:	00 d0       	rcall	.+0      	; 0x11e0 <DIO_u8getPortValue+0x8>
    11e0:	00 d0       	rcall	.+0      	; 0x11e2 <DIO_u8getPortValue+0xa>
    11e2:	cd b7       	in	r28, 0x3d	; 61
    11e4:	de b7       	in	r29, 0x3e	; 62
    11e6:	8a 83       	std	Y+2, r24	; 0x02
    11e8:	7c 83       	std	Y+4, r23	; 0x04
    11ea:	6b 83       	std	Y+3, r22	; 0x03
    11ec:	19 82       	std	Y+1, r1	; 0x01
if(Copy_u8pValue != NULL)
    11ee:	8b 81       	ldd	r24, Y+3	; 0x03
    11f0:	9c 81       	ldd	r25, Y+4	; 0x04
    11f2:	00 97       	sbiw	r24, 0x00	; 0
    11f4:	09 f4       	brne	.+2      	; 0x11f8 <DIO_u8getPortValue+0x20>
    11f6:	3e c0       	rjmp	.+124    	; 0x1274 <DIO_u8getPortValue+0x9c>
{
	switch(Copy_u8port)
    11f8:	8a 81       	ldd	r24, Y+2	; 0x02
    11fa:	28 2f       	mov	r18, r24
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	3e 83       	std	Y+6, r19	; 0x06
    1200:	2d 83       	std	Y+5, r18	; 0x05
    1202:	8d 81       	ldd	r24, Y+5	; 0x05
    1204:	9e 81       	ldd	r25, Y+6	; 0x06
    1206:	81 30       	cpi	r24, 0x01	; 1
    1208:	91 05       	cpc	r25, r1
    120a:	e1 f0       	breq	.+56     	; 0x1244 <DIO_u8getPortValue+0x6c>
    120c:	2d 81       	ldd	r18, Y+5	; 0x05
    120e:	3e 81       	ldd	r19, Y+6	; 0x06
    1210:	22 30       	cpi	r18, 0x02	; 2
    1212:	31 05       	cpc	r19, r1
    1214:	2c f4       	brge	.+10     	; 0x1220 <DIO_u8getPortValue+0x48>
    1216:	8d 81       	ldd	r24, Y+5	; 0x05
    1218:	9e 81       	ldd	r25, Y+6	; 0x06
    121a:	00 97       	sbiw	r24, 0x00	; 0
    121c:	61 f0       	breq	.+24     	; 0x1236 <DIO_u8getPortValue+0x5e>
    121e:	27 c0       	rjmp	.+78     	; 0x126e <DIO_u8getPortValue+0x96>
    1220:	2d 81       	ldd	r18, Y+5	; 0x05
    1222:	3e 81       	ldd	r19, Y+6	; 0x06
    1224:	22 30       	cpi	r18, 0x02	; 2
    1226:	31 05       	cpc	r19, r1
    1228:	a1 f0       	breq	.+40     	; 0x1252 <DIO_u8getPortValue+0x7a>
    122a:	8d 81       	ldd	r24, Y+5	; 0x05
    122c:	9e 81       	ldd	r25, Y+6	; 0x06
    122e:	83 30       	cpi	r24, 0x03	; 3
    1230:	91 05       	cpc	r25, r1
    1232:	b1 f0       	breq	.+44     	; 0x1260 <DIO_u8getPortValue+0x88>
    1234:	1c c0       	rjmp	.+56     	; 0x126e <DIO_u8getPortValue+0x96>
	{
	case PORT_A : *Copy_u8pValue = DIOA->PIN ;break ;
    1236:	e9 e3       	ldi	r30, 0x39	; 57
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	eb 81       	ldd	r30, Y+3	; 0x03
    123e:	fc 81       	ldd	r31, Y+4	; 0x04
    1240:	80 83       	st	Z, r24
    1242:	1a c0       	rjmp	.+52     	; 0x1278 <DIO_u8getPortValue+0xa0>
	case PORT_B : *Copy_u8pValue = DIOB->PIN ;break ;
    1244:	e6 e3       	ldi	r30, 0x36	; 54
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	eb 81       	ldd	r30, Y+3	; 0x03
    124c:	fc 81       	ldd	r31, Y+4	; 0x04
    124e:	80 83       	st	Z, r24
    1250:	13 c0       	rjmp	.+38     	; 0x1278 <DIO_u8getPortValue+0xa0>
	case PORT_C : *Copy_u8pValue = DIOC->PIN ;break ;
    1252:	e3 e3       	ldi	r30, 0x33	; 51
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	eb 81       	ldd	r30, Y+3	; 0x03
    125a:	fc 81       	ldd	r31, Y+4	; 0x04
    125c:	80 83       	st	Z, r24
    125e:	0c c0       	rjmp	.+24     	; 0x1278 <DIO_u8getPortValue+0xa0>
	case PORT_D : *Copy_u8pValue = DIOD->PIN ;break ;
    1260:	e0 e3       	ldi	r30, 0x30	; 48
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	eb 81       	ldd	r30, Y+3	; 0x03
    1268:	fc 81       	ldd	r31, Y+4	; 0x04
    126a:	80 83       	st	Z, r24
    126c:	05 c0       	rjmp	.+10     	; 0x1278 <DIO_u8getPortValue+0xa0>
	default : Local_u8errStatus = RT_NOK ;
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	89 83       	std	Y+1, r24	; 0x01
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <DIO_u8getPortValue+0xa0>
	}
}
else
{
	Local_u8errStatus = RT_NOK;
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	89 83       	std	Y+1, r24	; 0x01
}
return Local_u8errStatus;
    1278:	89 81       	ldd	r24, Y+1	; 0x01
}
    127a:	26 96       	adiw	r28, 0x06	; 6
    127c:	0f b6       	in	r0, 0x3f	; 63
    127e:	f8 94       	cli
    1280:	de bf       	out	0x3e, r29	; 62
    1282:	0f be       	out	0x3f, r0	; 63
    1284:	cd bf       	out	0x3d, r28	; 61
    1286:	cf 91       	pop	r28
    1288:	df 91       	pop	r29
    128a:	08 95       	ret

0000128c <DIO_u8setPinDirection>:

u8 DIO_u8setPinDirection(u8 Copy_u8port, u8 Copy_u8pin ,u8 Copy_u8direction)
{u8 Local_u8errStatus = RT_OK;
    128c:	df 93       	push	r29
    128e:	cf 93       	push	r28
    1290:	cd b7       	in	r28, 0x3d	; 61
    1292:	de b7       	in	r29, 0x3e	; 62
    1294:	2a 97       	sbiw	r28, 0x0a	; 10
    1296:	0f b6       	in	r0, 0x3f	; 63
    1298:	f8 94       	cli
    129a:	de bf       	out	0x3e, r29	; 62
    129c:	0f be       	out	0x3f, r0	; 63
    129e:	cd bf       	out	0x3d, r28	; 61
    12a0:	8a 83       	std	Y+2, r24	; 0x02
    12a2:	6b 83       	std	Y+3, r22	; 0x03
    12a4:	4c 83       	std	Y+4, r20	; 0x04
    12a6:	19 82       	std	Y+1, r1	; 0x01
if(Copy_u8pin <=PIN_7)
    12a8:	8b 81       	ldd	r24, Y+3	; 0x03
    12aa:	88 30       	cpi	r24, 0x08	; 8
    12ac:	08 f0       	brcs	.+2      	; 0x12b0 <DIO_u8setPinDirection+0x24>
    12ae:	0d c1       	rjmp	.+538    	; 0x14ca <DIO_u8setPinDirection+0x23e>
{
	switch(Copy_u8direction)
    12b0:	8c 81       	ldd	r24, Y+4	; 0x04
    12b2:	28 2f       	mov	r18, r24
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	3a 87       	std	Y+10, r19	; 0x0a
    12b8:	29 87       	std	Y+9, r18	; 0x09
    12ba:	89 85       	ldd	r24, Y+9	; 0x09
    12bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    12be:	00 97       	sbiw	r24, 0x00	; 0
    12c0:	39 f0       	breq	.+14     	; 0x12d0 <DIO_u8setPinDirection+0x44>
    12c2:	29 85       	ldd	r18, Y+9	; 0x09
    12c4:	3a 85       	ldd	r19, Y+10	; 0x0a
    12c6:	21 30       	cpi	r18, 0x01	; 1
    12c8:	31 05       	cpc	r19, r1
    12ca:	09 f4       	brne	.+2      	; 0x12ce <DIO_u8setPinDirection+0x42>
    12cc:	80 c0       	rjmp	.+256    	; 0x13ce <DIO_u8setPinDirection+0x142>
    12ce:	fa c0       	rjmp	.+500    	; 0x14c4 <DIO_u8setPinDirection+0x238>
	{
	case INPUT :
		switch(Copy_u8port)
    12d0:	8a 81       	ldd	r24, Y+2	; 0x02
    12d2:	28 2f       	mov	r18, r24
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	38 87       	std	Y+8, r19	; 0x08
    12d8:	2f 83       	std	Y+7, r18	; 0x07
    12da:	8f 81       	ldd	r24, Y+7	; 0x07
    12dc:	98 85       	ldd	r25, Y+8	; 0x08
    12de:	81 30       	cpi	r24, 0x01	; 1
    12e0:	91 05       	cpc	r25, r1
    12e2:	69 f1       	breq	.+90     	; 0x133e <DIO_u8setPinDirection+0xb2>
    12e4:	2f 81       	ldd	r18, Y+7	; 0x07
    12e6:	38 85       	ldd	r19, Y+8	; 0x08
    12e8:	22 30       	cpi	r18, 0x02	; 2
    12ea:	31 05       	cpc	r19, r1
    12ec:	2c f4       	brge	.+10     	; 0x12f8 <DIO_u8setPinDirection+0x6c>
    12ee:	8f 81       	ldd	r24, Y+7	; 0x07
    12f0:	98 85       	ldd	r25, Y+8	; 0x08
    12f2:	00 97       	sbiw	r24, 0x00	; 0
    12f4:	69 f0       	breq	.+26     	; 0x1310 <DIO_u8setPinDirection+0x84>
    12f6:	68 c0       	rjmp	.+208    	; 0x13c8 <DIO_u8setPinDirection+0x13c>
    12f8:	2f 81       	ldd	r18, Y+7	; 0x07
    12fa:	38 85       	ldd	r19, Y+8	; 0x08
    12fc:	22 30       	cpi	r18, 0x02	; 2
    12fe:	31 05       	cpc	r19, r1
    1300:	a9 f1       	breq	.+106    	; 0x136c <DIO_u8setPinDirection+0xe0>
    1302:	8f 81       	ldd	r24, Y+7	; 0x07
    1304:	98 85       	ldd	r25, Y+8	; 0x08
    1306:	83 30       	cpi	r24, 0x03	; 3
    1308:	91 05       	cpc	r25, r1
    130a:	09 f4       	brne	.+2      	; 0x130e <DIO_u8setPinDirection+0x82>
    130c:	46 c0       	rjmp	.+140    	; 0x139a <DIO_u8setPinDirection+0x10e>
    130e:	5c c0       	rjmp	.+184    	; 0x13c8 <DIO_u8setPinDirection+0x13c>
		{
		case PORT_A : CLR_BIT(DIOA->DDR,Copy_u8pin);break;
    1310:	a9 e3       	ldi	r26, 0x39	; 57
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	e9 e3       	ldi	r30, 0x39	; 57
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	81 81       	ldd	r24, Z+1	; 0x01
    131a:	48 2f       	mov	r20, r24
    131c:	8b 81       	ldd	r24, Y+3	; 0x03
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	02 2e       	mov	r0, r18
    1328:	02 c0       	rjmp	.+4      	; 0x132e <DIO_u8setPinDirection+0xa2>
    132a:	88 0f       	add	r24, r24
    132c:	99 1f       	adc	r25, r25
    132e:	0a 94       	dec	r0
    1330:	e2 f7       	brpl	.-8      	; 0x132a <DIO_u8setPinDirection+0x9e>
    1332:	80 95       	com	r24
    1334:	84 23       	and	r24, r20
    1336:	11 96       	adiw	r26, 0x01	; 1
    1338:	8c 93       	st	X, r24
    133a:	11 97       	sbiw	r26, 0x01	; 1
    133c:	c8 c0       	rjmp	.+400    	; 0x14ce <DIO_u8setPinDirection+0x242>
		case PORT_B : CLR_BIT(DIOB->DDR,Copy_u8pin);break;
    133e:	a6 e3       	ldi	r26, 0x36	; 54
    1340:	b0 e0       	ldi	r27, 0x00	; 0
    1342:	e6 e3       	ldi	r30, 0x36	; 54
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	81 81       	ldd	r24, Z+1	; 0x01
    1348:	48 2f       	mov	r20, r24
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	28 2f       	mov	r18, r24
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	02 2e       	mov	r0, r18
    1356:	02 c0       	rjmp	.+4      	; 0x135c <DIO_u8setPinDirection+0xd0>
    1358:	88 0f       	add	r24, r24
    135a:	99 1f       	adc	r25, r25
    135c:	0a 94       	dec	r0
    135e:	e2 f7       	brpl	.-8      	; 0x1358 <DIO_u8setPinDirection+0xcc>
    1360:	80 95       	com	r24
    1362:	84 23       	and	r24, r20
    1364:	11 96       	adiw	r26, 0x01	; 1
    1366:	8c 93       	st	X, r24
    1368:	11 97       	sbiw	r26, 0x01	; 1
    136a:	b1 c0       	rjmp	.+354    	; 0x14ce <DIO_u8setPinDirection+0x242>
		case PORT_C : CLR_BIT(DIOC->DDR,Copy_u8pin);break;
    136c:	a3 e3       	ldi	r26, 0x33	; 51
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	e3 e3       	ldi	r30, 0x33	; 51
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	81 81       	ldd	r24, Z+1	; 0x01
    1376:	48 2f       	mov	r20, r24
    1378:	8b 81       	ldd	r24, Y+3	; 0x03
    137a:	28 2f       	mov	r18, r24
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	02 2e       	mov	r0, r18
    1384:	02 c0       	rjmp	.+4      	; 0x138a <DIO_u8setPinDirection+0xfe>
    1386:	88 0f       	add	r24, r24
    1388:	99 1f       	adc	r25, r25
    138a:	0a 94       	dec	r0
    138c:	e2 f7       	brpl	.-8      	; 0x1386 <DIO_u8setPinDirection+0xfa>
    138e:	80 95       	com	r24
    1390:	84 23       	and	r24, r20
    1392:	11 96       	adiw	r26, 0x01	; 1
    1394:	8c 93       	st	X, r24
    1396:	11 97       	sbiw	r26, 0x01	; 1
    1398:	9a c0       	rjmp	.+308    	; 0x14ce <DIO_u8setPinDirection+0x242>
		case PORT_D : CLR_BIT(DIOD->DDR,Copy_u8pin);break;
    139a:	a0 e3       	ldi	r26, 0x30	; 48
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	e0 e3       	ldi	r30, 0x30	; 48
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	81 81       	ldd	r24, Z+1	; 0x01
    13a4:	48 2f       	mov	r20, r24
    13a6:	8b 81       	ldd	r24, Y+3	; 0x03
    13a8:	28 2f       	mov	r18, r24
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	02 2e       	mov	r0, r18
    13b2:	02 c0       	rjmp	.+4      	; 0x13b8 <DIO_u8setPinDirection+0x12c>
    13b4:	88 0f       	add	r24, r24
    13b6:	99 1f       	adc	r25, r25
    13b8:	0a 94       	dec	r0
    13ba:	e2 f7       	brpl	.-8      	; 0x13b4 <DIO_u8setPinDirection+0x128>
    13bc:	80 95       	com	r24
    13be:	84 23       	and	r24, r20
    13c0:	11 96       	adiw	r26, 0x01	; 1
    13c2:	8c 93       	st	X, r24
    13c4:	11 97       	sbiw	r26, 0x01	; 1
    13c6:	83 c0       	rjmp	.+262    	; 0x14ce <DIO_u8setPinDirection+0x242>
		default : Local_u8errStatus = RT_NOK;
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	89 83       	std	Y+1, r24	; 0x01
    13cc:	80 c0       	rjmp	.+256    	; 0x14ce <DIO_u8setPinDirection+0x242>
		}
		break;
		case OUTPUT :
			switch(Copy_u8port)
    13ce:	8a 81       	ldd	r24, Y+2	; 0x02
    13d0:	28 2f       	mov	r18, r24
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	3e 83       	std	Y+6, r19	; 0x06
    13d6:	2d 83       	std	Y+5, r18	; 0x05
    13d8:	8d 81       	ldd	r24, Y+5	; 0x05
    13da:	9e 81       	ldd	r25, Y+6	; 0x06
    13dc:	81 30       	cpi	r24, 0x01	; 1
    13de:	91 05       	cpc	r25, r1
    13e0:	61 f1       	breq	.+88     	; 0x143a <DIO_u8setPinDirection+0x1ae>
    13e2:	2d 81       	ldd	r18, Y+5	; 0x05
    13e4:	3e 81       	ldd	r19, Y+6	; 0x06
    13e6:	22 30       	cpi	r18, 0x02	; 2
    13e8:	31 05       	cpc	r19, r1
    13ea:	2c f4       	brge	.+10     	; 0x13f6 <DIO_u8setPinDirection+0x16a>
    13ec:	8d 81       	ldd	r24, Y+5	; 0x05
    13ee:	9e 81       	ldd	r25, Y+6	; 0x06
    13f0:	00 97       	sbiw	r24, 0x00	; 0
    13f2:	69 f0       	breq	.+26     	; 0x140e <DIO_u8setPinDirection+0x182>
    13f4:	64 c0       	rjmp	.+200    	; 0x14be <DIO_u8setPinDirection+0x232>
    13f6:	2d 81       	ldd	r18, Y+5	; 0x05
    13f8:	3e 81       	ldd	r19, Y+6	; 0x06
    13fa:	22 30       	cpi	r18, 0x02	; 2
    13fc:	31 05       	cpc	r19, r1
    13fe:	99 f1       	breq	.+102    	; 0x1466 <DIO_u8setPinDirection+0x1da>
    1400:	8d 81       	ldd	r24, Y+5	; 0x05
    1402:	9e 81       	ldd	r25, Y+6	; 0x06
    1404:	83 30       	cpi	r24, 0x03	; 3
    1406:	91 05       	cpc	r25, r1
    1408:	09 f4       	brne	.+2      	; 0x140c <DIO_u8setPinDirection+0x180>
    140a:	43 c0       	rjmp	.+134    	; 0x1492 <DIO_u8setPinDirection+0x206>
    140c:	58 c0       	rjmp	.+176    	; 0x14be <DIO_u8setPinDirection+0x232>
			{
			case PORT_A : SET_BIT(DIOA->DDR,Copy_u8pin);break;
    140e:	a9 e3       	ldi	r26, 0x39	; 57
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	e9 e3       	ldi	r30, 0x39	; 57
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	81 81       	ldd	r24, Z+1	; 0x01
    1418:	48 2f       	mov	r20, r24
    141a:	8b 81       	ldd	r24, Y+3	; 0x03
    141c:	28 2f       	mov	r18, r24
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	02 2e       	mov	r0, r18
    1426:	02 c0       	rjmp	.+4      	; 0x142c <DIO_u8setPinDirection+0x1a0>
    1428:	88 0f       	add	r24, r24
    142a:	99 1f       	adc	r25, r25
    142c:	0a 94       	dec	r0
    142e:	e2 f7       	brpl	.-8      	; 0x1428 <DIO_u8setPinDirection+0x19c>
    1430:	84 2b       	or	r24, r20
    1432:	11 96       	adiw	r26, 0x01	; 1
    1434:	8c 93       	st	X, r24
    1436:	11 97       	sbiw	r26, 0x01	; 1
    1438:	4a c0       	rjmp	.+148    	; 0x14ce <DIO_u8setPinDirection+0x242>
			case PORT_B : SET_BIT(DIOB->DDR,Copy_u8pin);break;
    143a:	a6 e3       	ldi	r26, 0x36	; 54
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	e6 e3       	ldi	r30, 0x36	; 54
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	81 81       	ldd	r24, Z+1	; 0x01
    1444:	48 2f       	mov	r20, r24
    1446:	8b 81       	ldd	r24, Y+3	; 0x03
    1448:	28 2f       	mov	r18, r24
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	02 2e       	mov	r0, r18
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <DIO_u8setPinDirection+0x1cc>
    1454:	88 0f       	add	r24, r24
    1456:	99 1f       	adc	r25, r25
    1458:	0a 94       	dec	r0
    145a:	e2 f7       	brpl	.-8      	; 0x1454 <DIO_u8setPinDirection+0x1c8>
    145c:	84 2b       	or	r24, r20
    145e:	11 96       	adiw	r26, 0x01	; 1
    1460:	8c 93       	st	X, r24
    1462:	11 97       	sbiw	r26, 0x01	; 1
    1464:	34 c0       	rjmp	.+104    	; 0x14ce <DIO_u8setPinDirection+0x242>
			case PORT_C : SET_BIT(DIOC->DDR,Copy_u8pin);break;
    1466:	a3 e3       	ldi	r26, 0x33	; 51
    1468:	b0 e0       	ldi	r27, 0x00	; 0
    146a:	e3 e3       	ldi	r30, 0x33	; 51
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	81 81       	ldd	r24, Z+1	; 0x01
    1470:	48 2f       	mov	r20, r24
    1472:	8b 81       	ldd	r24, Y+3	; 0x03
    1474:	28 2f       	mov	r18, r24
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	02 2e       	mov	r0, r18
    147e:	02 c0       	rjmp	.+4      	; 0x1484 <DIO_u8setPinDirection+0x1f8>
    1480:	88 0f       	add	r24, r24
    1482:	99 1f       	adc	r25, r25
    1484:	0a 94       	dec	r0
    1486:	e2 f7       	brpl	.-8      	; 0x1480 <DIO_u8setPinDirection+0x1f4>
    1488:	84 2b       	or	r24, r20
    148a:	11 96       	adiw	r26, 0x01	; 1
    148c:	8c 93       	st	X, r24
    148e:	11 97       	sbiw	r26, 0x01	; 1
    1490:	1e c0       	rjmp	.+60     	; 0x14ce <DIO_u8setPinDirection+0x242>
			case PORT_D : SET_BIT(DIOD->DDR,Copy_u8pin);break;
    1492:	a0 e3       	ldi	r26, 0x30	; 48
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	e0 e3       	ldi	r30, 0x30	; 48
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	81 81       	ldd	r24, Z+1	; 0x01
    149c:	48 2f       	mov	r20, r24
    149e:	8b 81       	ldd	r24, Y+3	; 0x03
    14a0:	28 2f       	mov	r18, r24
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	02 2e       	mov	r0, r18
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <DIO_u8setPinDirection+0x224>
    14ac:	88 0f       	add	r24, r24
    14ae:	99 1f       	adc	r25, r25
    14b0:	0a 94       	dec	r0
    14b2:	e2 f7       	brpl	.-8      	; 0x14ac <DIO_u8setPinDirection+0x220>
    14b4:	84 2b       	or	r24, r20
    14b6:	11 96       	adiw	r26, 0x01	; 1
    14b8:	8c 93       	st	X, r24
    14ba:	11 97       	sbiw	r26, 0x01	; 1
    14bc:	08 c0       	rjmp	.+16     	; 0x14ce <DIO_u8setPinDirection+0x242>
			default : Local_u8errStatus = RT_NOK;
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	89 83       	std	Y+1, r24	; 0x01
    14c2:	05 c0       	rjmp	.+10     	; 0x14ce <DIO_u8setPinDirection+0x242>
			}
			break;
			default : Local_u8errStatus = RT_NOK;
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	89 83       	std	Y+1, r24	; 0x01
    14c8:	02 c0       	rjmp	.+4      	; 0x14ce <DIO_u8setPinDirection+0x242>

	}
}
else
{
	Local_u8errStatus = RT_NOK;
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	89 83       	std	Y+1, r24	; 0x01
}
return Local_u8errStatus;
    14ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    14d0:	2a 96       	adiw	r28, 0x0a	; 10
    14d2:	0f b6       	in	r0, 0x3f	; 63
    14d4:	f8 94       	cli
    14d6:	de bf       	out	0x3e, r29	; 62
    14d8:	0f be       	out	0x3f, r0	; 63
    14da:	cd bf       	out	0x3d, r28	; 61
    14dc:	cf 91       	pop	r28
    14de:	df 91       	pop	r29
    14e0:	08 95       	ret

000014e2 <DIO_u8setPinValue>:

u8 DIO_u8setPinValue(u8 Copy_u8port, u8 Copy_u8pin ,u8 Copy_u8value)
{
    14e2:	df 93       	push	r29
    14e4:	cf 93       	push	r28
    14e6:	cd b7       	in	r28, 0x3d	; 61
    14e8:	de b7       	in	r29, 0x3e	; 62
    14ea:	2a 97       	sbiw	r28, 0x0a	; 10
    14ec:	0f b6       	in	r0, 0x3f	; 63
    14ee:	f8 94       	cli
    14f0:	de bf       	out	0x3e, r29	; 62
    14f2:	0f be       	out	0x3f, r0	; 63
    14f4:	cd bf       	out	0x3d, r28	; 61
    14f6:	8a 83       	std	Y+2, r24	; 0x02
    14f8:	6b 83       	std	Y+3, r22	; 0x03
    14fa:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8errStatus = RT_OK;
    14fc:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8pin <=PIN_7)
    14fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1500:	88 30       	cpi	r24, 0x08	; 8
    1502:	08 f0       	brcs	.+2      	; 0x1506 <DIO_u8setPinValue+0x24>
    1504:	0d c1       	rjmp	.+538    	; 0x1720 <DIO_u8setPinValue+0x23e>
	{
		switch(Copy_u8value)
    1506:	8c 81       	ldd	r24, Y+4	; 0x04
    1508:	28 2f       	mov	r18, r24
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	3a 87       	std	Y+10, r19	; 0x0a
    150e:	29 87       	std	Y+9, r18	; 0x09
    1510:	89 85       	ldd	r24, Y+9	; 0x09
    1512:	9a 85       	ldd	r25, Y+10	; 0x0a
    1514:	00 97       	sbiw	r24, 0x00	; 0
    1516:	39 f0       	breq	.+14     	; 0x1526 <DIO_u8setPinValue+0x44>
    1518:	29 85       	ldd	r18, Y+9	; 0x09
    151a:	3a 85       	ldd	r19, Y+10	; 0x0a
    151c:	21 30       	cpi	r18, 0x01	; 1
    151e:	31 05       	cpc	r19, r1
    1520:	09 f4       	brne	.+2      	; 0x1524 <DIO_u8setPinValue+0x42>
    1522:	80 c0       	rjmp	.+256    	; 0x1624 <DIO_u8setPinValue+0x142>
    1524:	fa c0       	rjmp	.+500    	; 0x171a <DIO_u8setPinValue+0x238>
		{
		case LOW :
			switch(Copy_u8port)
    1526:	8a 81       	ldd	r24, Y+2	; 0x02
    1528:	28 2f       	mov	r18, r24
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	38 87       	std	Y+8, r19	; 0x08
    152e:	2f 83       	std	Y+7, r18	; 0x07
    1530:	8f 81       	ldd	r24, Y+7	; 0x07
    1532:	98 85       	ldd	r25, Y+8	; 0x08
    1534:	81 30       	cpi	r24, 0x01	; 1
    1536:	91 05       	cpc	r25, r1
    1538:	69 f1       	breq	.+90     	; 0x1594 <DIO_u8setPinValue+0xb2>
    153a:	2f 81       	ldd	r18, Y+7	; 0x07
    153c:	38 85       	ldd	r19, Y+8	; 0x08
    153e:	22 30       	cpi	r18, 0x02	; 2
    1540:	31 05       	cpc	r19, r1
    1542:	2c f4       	brge	.+10     	; 0x154e <DIO_u8setPinValue+0x6c>
    1544:	8f 81       	ldd	r24, Y+7	; 0x07
    1546:	98 85       	ldd	r25, Y+8	; 0x08
    1548:	00 97       	sbiw	r24, 0x00	; 0
    154a:	69 f0       	breq	.+26     	; 0x1566 <DIO_u8setPinValue+0x84>
    154c:	68 c0       	rjmp	.+208    	; 0x161e <DIO_u8setPinValue+0x13c>
    154e:	2f 81       	ldd	r18, Y+7	; 0x07
    1550:	38 85       	ldd	r19, Y+8	; 0x08
    1552:	22 30       	cpi	r18, 0x02	; 2
    1554:	31 05       	cpc	r19, r1
    1556:	a9 f1       	breq	.+106    	; 0x15c2 <DIO_u8setPinValue+0xe0>
    1558:	8f 81       	ldd	r24, Y+7	; 0x07
    155a:	98 85       	ldd	r25, Y+8	; 0x08
    155c:	83 30       	cpi	r24, 0x03	; 3
    155e:	91 05       	cpc	r25, r1
    1560:	09 f4       	brne	.+2      	; 0x1564 <DIO_u8setPinValue+0x82>
    1562:	46 c0       	rjmp	.+140    	; 0x15f0 <DIO_u8setPinValue+0x10e>
    1564:	5c c0       	rjmp	.+184    	; 0x161e <DIO_u8setPinValue+0x13c>
			{
			case PORT_A : CLR_BIT(DIOA->PORT,Copy_u8pin);break;
    1566:	a9 e3       	ldi	r26, 0x39	; 57
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	e9 e3       	ldi	r30, 0x39	; 57
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	82 81       	ldd	r24, Z+2	; 0x02
    1570:	48 2f       	mov	r20, r24
    1572:	8b 81       	ldd	r24, Y+3	; 0x03
    1574:	28 2f       	mov	r18, r24
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	02 2e       	mov	r0, r18
    157e:	02 c0       	rjmp	.+4      	; 0x1584 <DIO_u8setPinValue+0xa2>
    1580:	88 0f       	add	r24, r24
    1582:	99 1f       	adc	r25, r25
    1584:	0a 94       	dec	r0
    1586:	e2 f7       	brpl	.-8      	; 0x1580 <DIO_u8setPinValue+0x9e>
    1588:	80 95       	com	r24
    158a:	84 23       	and	r24, r20
    158c:	12 96       	adiw	r26, 0x02	; 2
    158e:	8c 93       	st	X, r24
    1590:	12 97       	sbiw	r26, 0x02	; 2
    1592:	c8 c0       	rjmp	.+400    	; 0x1724 <DIO_u8setPinValue+0x242>
			case PORT_B : CLR_BIT(DIOB->PORT,Copy_u8pin);break;
    1594:	a6 e3       	ldi	r26, 0x36	; 54
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	e6 e3       	ldi	r30, 0x36	; 54
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	82 81       	ldd	r24, Z+2	; 0x02
    159e:	48 2f       	mov	r20, r24
    15a0:	8b 81       	ldd	r24, Y+3	; 0x03
    15a2:	28 2f       	mov	r18, r24
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	02 2e       	mov	r0, r18
    15ac:	02 c0       	rjmp	.+4      	; 0x15b2 <DIO_u8setPinValue+0xd0>
    15ae:	88 0f       	add	r24, r24
    15b0:	99 1f       	adc	r25, r25
    15b2:	0a 94       	dec	r0
    15b4:	e2 f7       	brpl	.-8      	; 0x15ae <DIO_u8setPinValue+0xcc>
    15b6:	80 95       	com	r24
    15b8:	84 23       	and	r24, r20
    15ba:	12 96       	adiw	r26, 0x02	; 2
    15bc:	8c 93       	st	X, r24
    15be:	12 97       	sbiw	r26, 0x02	; 2
    15c0:	b1 c0       	rjmp	.+354    	; 0x1724 <DIO_u8setPinValue+0x242>
			case PORT_C : CLR_BIT(DIOC->PORT,Copy_u8pin);break;
    15c2:	a3 e3       	ldi	r26, 0x33	; 51
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	e3 e3       	ldi	r30, 0x33	; 51
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	82 81       	ldd	r24, Z+2	; 0x02
    15cc:	48 2f       	mov	r20, r24
    15ce:	8b 81       	ldd	r24, Y+3	; 0x03
    15d0:	28 2f       	mov	r18, r24
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	02 2e       	mov	r0, r18
    15da:	02 c0       	rjmp	.+4      	; 0x15e0 <DIO_u8setPinValue+0xfe>
    15dc:	88 0f       	add	r24, r24
    15de:	99 1f       	adc	r25, r25
    15e0:	0a 94       	dec	r0
    15e2:	e2 f7       	brpl	.-8      	; 0x15dc <DIO_u8setPinValue+0xfa>
    15e4:	80 95       	com	r24
    15e6:	84 23       	and	r24, r20
    15e8:	12 96       	adiw	r26, 0x02	; 2
    15ea:	8c 93       	st	X, r24
    15ec:	12 97       	sbiw	r26, 0x02	; 2
    15ee:	9a c0       	rjmp	.+308    	; 0x1724 <DIO_u8setPinValue+0x242>
			case PORT_D : CLR_BIT(DIOD->PORT,Copy_u8pin);break;
    15f0:	a0 e3       	ldi	r26, 0x30	; 48
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	e0 e3       	ldi	r30, 0x30	; 48
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	82 81       	ldd	r24, Z+2	; 0x02
    15fa:	48 2f       	mov	r20, r24
    15fc:	8b 81       	ldd	r24, Y+3	; 0x03
    15fe:	28 2f       	mov	r18, r24
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	02 2e       	mov	r0, r18
    1608:	02 c0       	rjmp	.+4      	; 0x160e <DIO_u8setPinValue+0x12c>
    160a:	88 0f       	add	r24, r24
    160c:	99 1f       	adc	r25, r25
    160e:	0a 94       	dec	r0
    1610:	e2 f7       	brpl	.-8      	; 0x160a <DIO_u8setPinValue+0x128>
    1612:	80 95       	com	r24
    1614:	84 23       	and	r24, r20
    1616:	12 96       	adiw	r26, 0x02	; 2
    1618:	8c 93       	st	X, r24
    161a:	12 97       	sbiw	r26, 0x02	; 2
    161c:	83 c0       	rjmp	.+262    	; 0x1724 <DIO_u8setPinValue+0x242>
			default : Local_u8errStatus = RT_NOK;
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	89 83       	std	Y+1, r24	; 0x01
    1622:	80 c0       	rjmp	.+256    	; 0x1724 <DIO_u8setPinValue+0x242>
			}
			break;
			case HIGH :
				switch(Copy_u8port)
    1624:	8a 81       	ldd	r24, Y+2	; 0x02
    1626:	28 2f       	mov	r18, r24
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	3e 83       	std	Y+6, r19	; 0x06
    162c:	2d 83       	std	Y+5, r18	; 0x05
    162e:	8d 81       	ldd	r24, Y+5	; 0x05
    1630:	9e 81       	ldd	r25, Y+6	; 0x06
    1632:	81 30       	cpi	r24, 0x01	; 1
    1634:	91 05       	cpc	r25, r1
    1636:	61 f1       	breq	.+88     	; 0x1690 <DIO_u8setPinValue+0x1ae>
    1638:	2d 81       	ldd	r18, Y+5	; 0x05
    163a:	3e 81       	ldd	r19, Y+6	; 0x06
    163c:	22 30       	cpi	r18, 0x02	; 2
    163e:	31 05       	cpc	r19, r1
    1640:	2c f4       	brge	.+10     	; 0x164c <DIO_u8setPinValue+0x16a>
    1642:	8d 81       	ldd	r24, Y+5	; 0x05
    1644:	9e 81       	ldd	r25, Y+6	; 0x06
    1646:	00 97       	sbiw	r24, 0x00	; 0
    1648:	69 f0       	breq	.+26     	; 0x1664 <DIO_u8setPinValue+0x182>
    164a:	64 c0       	rjmp	.+200    	; 0x1714 <DIO_u8setPinValue+0x232>
    164c:	2d 81       	ldd	r18, Y+5	; 0x05
    164e:	3e 81       	ldd	r19, Y+6	; 0x06
    1650:	22 30       	cpi	r18, 0x02	; 2
    1652:	31 05       	cpc	r19, r1
    1654:	99 f1       	breq	.+102    	; 0x16bc <DIO_u8setPinValue+0x1da>
    1656:	8d 81       	ldd	r24, Y+5	; 0x05
    1658:	9e 81       	ldd	r25, Y+6	; 0x06
    165a:	83 30       	cpi	r24, 0x03	; 3
    165c:	91 05       	cpc	r25, r1
    165e:	09 f4       	brne	.+2      	; 0x1662 <DIO_u8setPinValue+0x180>
    1660:	43 c0       	rjmp	.+134    	; 0x16e8 <DIO_u8setPinValue+0x206>
    1662:	58 c0       	rjmp	.+176    	; 0x1714 <DIO_u8setPinValue+0x232>
				{
				case PORT_A : SET_BIT(DIOA->PORT,Copy_u8pin);break;
    1664:	a9 e3       	ldi	r26, 0x39	; 57
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	e9 e3       	ldi	r30, 0x39	; 57
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	82 81       	ldd	r24, Z+2	; 0x02
    166e:	48 2f       	mov	r20, r24
    1670:	8b 81       	ldd	r24, Y+3	; 0x03
    1672:	28 2f       	mov	r18, r24
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	02 2e       	mov	r0, r18
    167c:	02 c0       	rjmp	.+4      	; 0x1682 <DIO_u8setPinValue+0x1a0>
    167e:	88 0f       	add	r24, r24
    1680:	99 1f       	adc	r25, r25
    1682:	0a 94       	dec	r0
    1684:	e2 f7       	brpl	.-8      	; 0x167e <DIO_u8setPinValue+0x19c>
    1686:	84 2b       	or	r24, r20
    1688:	12 96       	adiw	r26, 0x02	; 2
    168a:	8c 93       	st	X, r24
    168c:	12 97       	sbiw	r26, 0x02	; 2
    168e:	4a c0       	rjmp	.+148    	; 0x1724 <DIO_u8setPinValue+0x242>
				case PORT_B : SET_BIT(DIOB->PORT,Copy_u8pin);break;
    1690:	a6 e3       	ldi	r26, 0x36	; 54
    1692:	b0 e0       	ldi	r27, 0x00	; 0
    1694:	e6 e3       	ldi	r30, 0x36	; 54
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	82 81       	ldd	r24, Z+2	; 0x02
    169a:	48 2f       	mov	r20, r24
    169c:	8b 81       	ldd	r24, Y+3	; 0x03
    169e:	28 2f       	mov	r18, r24
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	02 2e       	mov	r0, r18
    16a8:	02 c0       	rjmp	.+4      	; 0x16ae <DIO_u8setPinValue+0x1cc>
    16aa:	88 0f       	add	r24, r24
    16ac:	99 1f       	adc	r25, r25
    16ae:	0a 94       	dec	r0
    16b0:	e2 f7       	brpl	.-8      	; 0x16aa <DIO_u8setPinValue+0x1c8>
    16b2:	84 2b       	or	r24, r20
    16b4:	12 96       	adiw	r26, 0x02	; 2
    16b6:	8c 93       	st	X, r24
    16b8:	12 97       	sbiw	r26, 0x02	; 2
    16ba:	34 c0       	rjmp	.+104    	; 0x1724 <DIO_u8setPinValue+0x242>
				case PORT_C : SET_BIT(DIOC->PORT,Copy_u8pin);break;
    16bc:	a3 e3       	ldi	r26, 0x33	; 51
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	e3 e3       	ldi	r30, 0x33	; 51
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	82 81       	ldd	r24, Z+2	; 0x02
    16c6:	48 2f       	mov	r20, r24
    16c8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ca:	28 2f       	mov	r18, r24
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	02 2e       	mov	r0, r18
    16d4:	02 c0       	rjmp	.+4      	; 0x16da <DIO_u8setPinValue+0x1f8>
    16d6:	88 0f       	add	r24, r24
    16d8:	99 1f       	adc	r25, r25
    16da:	0a 94       	dec	r0
    16dc:	e2 f7       	brpl	.-8      	; 0x16d6 <DIO_u8setPinValue+0x1f4>
    16de:	84 2b       	or	r24, r20
    16e0:	12 96       	adiw	r26, 0x02	; 2
    16e2:	8c 93       	st	X, r24
    16e4:	12 97       	sbiw	r26, 0x02	; 2
    16e6:	1e c0       	rjmp	.+60     	; 0x1724 <DIO_u8setPinValue+0x242>
				case PORT_D : SET_BIT(DIOD->PORT,Copy_u8pin);break;
    16e8:	a0 e3       	ldi	r26, 0x30	; 48
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	e0 e3       	ldi	r30, 0x30	; 48
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	82 81       	ldd	r24, Z+2	; 0x02
    16f2:	48 2f       	mov	r20, r24
    16f4:	8b 81       	ldd	r24, Y+3	; 0x03
    16f6:	28 2f       	mov	r18, r24
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	02 2e       	mov	r0, r18
    1700:	02 c0       	rjmp	.+4      	; 0x1706 <DIO_u8setPinValue+0x224>
    1702:	88 0f       	add	r24, r24
    1704:	99 1f       	adc	r25, r25
    1706:	0a 94       	dec	r0
    1708:	e2 f7       	brpl	.-8      	; 0x1702 <DIO_u8setPinValue+0x220>
    170a:	84 2b       	or	r24, r20
    170c:	12 96       	adiw	r26, 0x02	; 2
    170e:	8c 93       	st	X, r24
    1710:	12 97       	sbiw	r26, 0x02	; 2
    1712:	08 c0       	rjmp	.+16     	; 0x1724 <DIO_u8setPinValue+0x242>
				default : Local_u8errStatus = RT_NOK;
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	89 83       	std	Y+1, r24	; 0x01
    1718:	05 c0       	rjmp	.+10     	; 0x1724 <DIO_u8setPinValue+0x242>
				}
				break;
				default : Local_u8errStatus = RT_NOK;
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	89 83       	std	Y+1, r24	; 0x01
    171e:	02 c0       	rjmp	.+4      	; 0x1724 <DIO_u8setPinValue+0x242>
		}

	}
	else
	{
		Local_u8errStatus = RT_NOK;
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8errStatus;
    1724:	89 81       	ldd	r24, Y+1	; 0x01
}
    1726:	2a 96       	adiw	r28, 0x0a	; 10
    1728:	0f b6       	in	r0, 0x3f	; 63
    172a:	f8 94       	cli
    172c:	de bf       	out	0x3e, r29	; 62
    172e:	0f be       	out	0x3f, r0	; 63
    1730:	cd bf       	out	0x3d, r28	; 61
    1732:	cf 91       	pop	r28
    1734:	df 91       	pop	r29
    1736:	08 95       	ret

00001738 <DIO_u8togglePinValue>:
u8 DIO_u8togglePinValue(u8 Copy_u8port, u8 Copy_u8pin)
{
    1738:	df 93       	push	r29
    173a:	cf 93       	push	r28
    173c:	00 d0       	rcall	.+0      	; 0x173e <DIO_u8togglePinValue+0x6>
    173e:	00 d0       	rcall	.+0      	; 0x1740 <DIO_u8togglePinValue+0x8>
    1740:	0f 92       	push	r0
    1742:	cd b7       	in	r28, 0x3d	; 61
    1744:	de b7       	in	r29, 0x3e	; 62
    1746:	8a 83       	std	Y+2, r24	; 0x02
    1748:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8errStatus = RT_OK;
    174a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8pin <=PIN_7)
    174c:	8b 81       	ldd	r24, Y+3	; 0x03
    174e:	88 30       	cpi	r24, 0x08	; 8
    1750:	08 f0       	brcs	.+2      	; 0x1754 <DIO_u8togglePinValue+0x1c>
    1752:	7b c0       	rjmp	.+246    	; 0x184a <DIO_u8togglePinValue+0x112>
	{

		switch(Copy_u8port)
    1754:	8a 81       	ldd	r24, Y+2	; 0x02
    1756:	28 2f       	mov	r18, r24
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	3d 83       	std	Y+5, r19	; 0x05
    175c:	2c 83       	std	Y+4, r18	; 0x04
    175e:	8c 81       	ldd	r24, Y+4	; 0x04
    1760:	9d 81       	ldd	r25, Y+5	; 0x05
    1762:	81 30       	cpi	r24, 0x01	; 1
    1764:	91 05       	cpc	r25, r1
    1766:	61 f1       	breq	.+88     	; 0x17c0 <DIO_u8togglePinValue+0x88>
    1768:	2c 81       	ldd	r18, Y+4	; 0x04
    176a:	3d 81       	ldd	r19, Y+5	; 0x05
    176c:	22 30       	cpi	r18, 0x02	; 2
    176e:	31 05       	cpc	r19, r1
    1770:	2c f4       	brge	.+10     	; 0x177c <DIO_u8togglePinValue+0x44>
    1772:	8c 81       	ldd	r24, Y+4	; 0x04
    1774:	9d 81       	ldd	r25, Y+5	; 0x05
    1776:	00 97       	sbiw	r24, 0x00	; 0
    1778:	69 f0       	breq	.+26     	; 0x1794 <DIO_u8togglePinValue+0x5c>
    177a:	64 c0       	rjmp	.+200    	; 0x1844 <DIO_u8togglePinValue+0x10c>
    177c:	2c 81       	ldd	r18, Y+4	; 0x04
    177e:	3d 81       	ldd	r19, Y+5	; 0x05
    1780:	22 30       	cpi	r18, 0x02	; 2
    1782:	31 05       	cpc	r19, r1
    1784:	99 f1       	breq	.+102    	; 0x17ec <DIO_u8togglePinValue+0xb4>
    1786:	8c 81       	ldd	r24, Y+4	; 0x04
    1788:	9d 81       	ldd	r25, Y+5	; 0x05
    178a:	83 30       	cpi	r24, 0x03	; 3
    178c:	91 05       	cpc	r25, r1
    178e:	09 f4       	brne	.+2      	; 0x1792 <DIO_u8togglePinValue+0x5a>
    1790:	43 c0       	rjmp	.+134    	; 0x1818 <DIO_u8togglePinValue+0xe0>
    1792:	58 c0       	rjmp	.+176    	; 0x1844 <DIO_u8togglePinValue+0x10c>
		{
		case PORT_A : TOG_BIT(DIOA->PORT,Copy_u8pin);break;
    1794:	a9 e3       	ldi	r26, 0x39	; 57
    1796:	b0 e0       	ldi	r27, 0x00	; 0
    1798:	e9 e3       	ldi	r30, 0x39	; 57
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	82 81       	ldd	r24, Z+2	; 0x02
    179e:	48 2f       	mov	r20, r24
    17a0:	8b 81       	ldd	r24, Y+3	; 0x03
    17a2:	28 2f       	mov	r18, r24
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	02 2e       	mov	r0, r18
    17ac:	02 c0       	rjmp	.+4      	; 0x17b2 <DIO_u8togglePinValue+0x7a>
    17ae:	88 0f       	add	r24, r24
    17b0:	99 1f       	adc	r25, r25
    17b2:	0a 94       	dec	r0
    17b4:	e2 f7       	brpl	.-8      	; 0x17ae <DIO_u8togglePinValue+0x76>
    17b6:	84 27       	eor	r24, r20
    17b8:	12 96       	adiw	r26, 0x02	; 2
    17ba:	8c 93       	st	X, r24
    17bc:	12 97       	sbiw	r26, 0x02	; 2
    17be:	47 c0       	rjmp	.+142    	; 0x184e <DIO_u8togglePinValue+0x116>
		case PORT_B : TOG_BIT(DIOB->PORT,Copy_u8pin);break;
    17c0:	a6 e3       	ldi	r26, 0x36	; 54
    17c2:	b0 e0       	ldi	r27, 0x00	; 0
    17c4:	e6 e3       	ldi	r30, 0x36	; 54
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	82 81       	ldd	r24, Z+2	; 0x02
    17ca:	48 2f       	mov	r20, r24
    17cc:	8b 81       	ldd	r24, Y+3	; 0x03
    17ce:	28 2f       	mov	r18, r24
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	02 2e       	mov	r0, r18
    17d8:	02 c0       	rjmp	.+4      	; 0x17de <DIO_u8togglePinValue+0xa6>
    17da:	88 0f       	add	r24, r24
    17dc:	99 1f       	adc	r25, r25
    17de:	0a 94       	dec	r0
    17e0:	e2 f7       	brpl	.-8      	; 0x17da <DIO_u8togglePinValue+0xa2>
    17e2:	84 27       	eor	r24, r20
    17e4:	12 96       	adiw	r26, 0x02	; 2
    17e6:	8c 93       	st	X, r24
    17e8:	12 97       	sbiw	r26, 0x02	; 2
    17ea:	31 c0       	rjmp	.+98     	; 0x184e <DIO_u8togglePinValue+0x116>
		case PORT_C : TOG_BIT(DIOC->PORT,Copy_u8pin);break;
    17ec:	a3 e3       	ldi	r26, 0x33	; 51
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	e3 e3       	ldi	r30, 0x33	; 51
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	82 81       	ldd	r24, Z+2	; 0x02
    17f6:	48 2f       	mov	r20, r24
    17f8:	8b 81       	ldd	r24, Y+3	; 0x03
    17fa:	28 2f       	mov	r18, r24
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	02 2e       	mov	r0, r18
    1804:	02 c0       	rjmp	.+4      	; 0x180a <DIO_u8togglePinValue+0xd2>
    1806:	88 0f       	add	r24, r24
    1808:	99 1f       	adc	r25, r25
    180a:	0a 94       	dec	r0
    180c:	e2 f7       	brpl	.-8      	; 0x1806 <DIO_u8togglePinValue+0xce>
    180e:	84 27       	eor	r24, r20
    1810:	12 96       	adiw	r26, 0x02	; 2
    1812:	8c 93       	st	X, r24
    1814:	12 97       	sbiw	r26, 0x02	; 2
    1816:	1b c0       	rjmp	.+54     	; 0x184e <DIO_u8togglePinValue+0x116>
		case PORT_D : TOG_BIT(DIOD->PORT,Copy_u8pin);break;
    1818:	a0 e3       	ldi	r26, 0x30	; 48
    181a:	b0 e0       	ldi	r27, 0x00	; 0
    181c:	e0 e3       	ldi	r30, 0x30	; 48
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	82 81       	ldd	r24, Z+2	; 0x02
    1822:	48 2f       	mov	r20, r24
    1824:	8b 81       	ldd	r24, Y+3	; 0x03
    1826:	28 2f       	mov	r18, r24
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	02 2e       	mov	r0, r18
    1830:	02 c0       	rjmp	.+4      	; 0x1836 <DIO_u8togglePinValue+0xfe>
    1832:	88 0f       	add	r24, r24
    1834:	99 1f       	adc	r25, r25
    1836:	0a 94       	dec	r0
    1838:	e2 f7       	brpl	.-8      	; 0x1832 <DIO_u8togglePinValue+0xfa>
    183a:	84 27       	eor	r24, r20
    183c:	12 96       	adiw	r26, 0x02	; 2
    183e:	8c 93       	st	X, r24
    1840:	12 97       	sbiw	r26, 0x02	; 2
    1842:	05 c0       	rjmp	.+10     	; 0x184e <DIO_u8togglePinValue+0x116>
		default : Local_u8errStatus = RT_NOK;
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	89 83       	std	Y+1, r24	; 0x01
    1848:	02 c0       	rjmp	.+4      	; 0x184e <DIO_u8togglePinValue+0x116>
		}
	}

	else
	{
		Local_u8errStatus = RT_NOK;
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8errStatus;
    184e:	89 81       	ldd	r24, Y+1	; 0x01

}
    1850:	0f 90       	pop	r0
    1852:	0f 90       	pop	r0
    1854:	0f 90       	pop	r0
    1856:	0f 90       	pop	r0
    1858:	0f 90       	pop	r0
    185a:	cf 91       	pop	r28
    185c:	df 91       	pop	r29
    185e:	08 95       	ret

00001860 <DIO_u8getPinValue>:
u8 DIO_u8getPinValue(u8 Copy_u8port, u8 Copy_u8pin ,u8 * Copy_u8pValue)
{
    1860:	df 93       	push	r29
    1862:	cf 93       	push	r28
    1864:	cd b7       	in	r28, 0x3d	; 61
    1866:	de b7       	in	r29, 0x3e	; 62
    1868:	27 97       	sbiw	r28, 0x07	; 7
    186a:	0f b6       	in	r0, 0x3f	; 63
    186c:	f8 94       	cli
    186e:	de bf       	out	0x3e, r29	; 62
    1870:	0f be       	out	0x3f, r0	; 63
    1872:	cd bf       	out	0x3d, r28	; 61
    1874:	8a 83       	std	Y+2, r24	; 0x02
    1876:	6b 83       	std	Y+3, r22	; 0x03
    1878:	5d 83       	std	Y+5, r21	; 0x05
    187a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8errStatus = RT_OK;
    187c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8pValue != NULL)
    187e:	8c 81       	ldd	r24, Y+4	; 0x04
    1880:	9d 81       	ldd	r25, Y+5	; 0x05
    1882:	00 97       	sbiw	r24, 0x00	; 0
    1884:	09 f4       	brne	.+2      	; 0x1888 <DIO_u8getPinValue+0x28>
    1886:	7b c0       	rjmp	.+246    	; 0x197e <DIO_u8getPinValue+0x11e>
	{
		if(Copy_u8pin <=PIN_7)
    1888:	8b 81       	ldd	r24, Y+3	; 0x03
    188a:	88 30       	cpi	r24, 0x08	; 8
    188c:	08 f0       	brcs	.+2      	; 0x1890 <DIO_u8getPinValue+0x30>
    188e:	74 c0       	rjmp	.+232    	; 0x1978 <DIO_u8getPinValue+0x118>
		{
			switch(Copy_u8port)
    1890:	8a 81       	ldd	r24, Y+2	; 0x02
    1892:	28 2f       	mov	r18, r24
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	3f 83       	std	Y+7, r19	; 0x07
    1898:	2e 83       	std	Y+6, r18	; 0x06
    189a:	4e 81       	ldd	r20, Y+6	; 0x06
    189c:	5f 81       	ldd	r21, Y+7	; 0x07
    189e:	41 30       	cpi	r20, 0x01	; 1
    18a0:	51 05       	cpc	r21, r1
    18a2:	59 f1       	breq	.+86     	; 0x18fa <DIO_u8getPinValue+0x9a>
    18a4:	8e 81       	ldd	r24, Y+6	; 0x06
    18a6:	9f 81       	ldd	r25, Y+7	; 0x07
    18a8:	82 30       	cpi	r24, 0x02	; 2
    18aa:	91 05       	cpc	r25, r1
    18ac:	34 f4       	brge	.+12     	; 0x18ba <DIO_u8getPinValue+0x5a>
    18ae:	2e 81       	ldd	r18, Y+6	; 0x06
    18b0:	3f 81       	ldd	r19, Y+7	; 0x07
    18b2:	21 15       	cp	r18, r1
    18b4:	31 05       	cpc	r19, r1
    18b6:	69 f0       	breq	.+26     	; 0x18d2 <DIO_u8getPinValue+0x72>
    18b8:	5c c0       	rjmp	.+184    	; 0x1972 <DIO_u8getPinValue+0x112>
    18ba:	4e 81       	ldd	r20, Y+6	; 0x06
    18bc:	5f 81       	ldd	r21, Y+7	; 0x07
    18be:	42 30       	cpi	r20, 0x02	; 2
    18c0:	51 05       	cpc	r21, r1
    18c2:	79 f1       	breq	.+94     	; 0x1922 <DIO_u8getPinValue+0xc2>
    18c4:	8e 81       	ldd	r24, Y+6	; 0x06
    18c6:	9f 81       	ldd	r25, Y+7	; 0x07
    18c8:	83 30       	cpi	r24, 0x03	; 3
    18ca:	91 05       	cpc	r25, r1
    18cc:	09 f4       	brne	.+2      	; 0x18d0 <DIO_u8getPinValue+0x70>
    18ce:	3d c0       	rjmp	.+122    	; 0x194a <DIO_u8getPinValue+0xea>
    18d0:	50 c0       	rjmp	.+160    	; 0x1972 <DIO_u8getPinValue+0x112>
			{
			case PORT_A :* Copy_u8pValue=GET_BIT(DIOA->PIN,Copy_u8pin);break ;
    18d2:	e9 e3       	ldi	r30, 0x39	; 57
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	80 81       	ld	r24, Z
    18d8:	28 2f       	mov	r18, r24
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	8b 81       	ldd	r24, Y+3	; 0x03
    18de:	88 2f       	mov	r24, r24
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	a9 01       	movw	r20, r18
    18e4:	02 c0       	rjmp	.+4      	; 0x18ea <DIO_u8getPinValue+0x8a>
    18e6:	55 95       	asr	r21
    18e8:	47 95       	ror	r20
    18ea:	8a 95       	dec	r24
    18ec:	e2 f7       	brpl	.-8      	; 0x18e6 <DIO_u8getPinValue+0x86>
    18ee:	ca 01       	movw	r24, r20
    18f0:	81 70       	andi	r24, 0x01	; 1
    18f2:	ec 81       	ldd	r30, Y+4	; 0x04
    18f4:	fd 81       	ldd	r31, Y+5	; 0x05
    18f6:	80 83       	st	Z, r24
    18f8:	44 c0       	rjmp	.+136    	; 0x1982 <DIO_u8getPinValue+0x122>
			case PORT_B :* Copy_u8pValue=GET_BIT(DIOB->PIN,Copy_u8pin);break ;
    18fa:	e6 e3       	ldi	r30, 0x36	; 54
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	80 81       	ld	r24, Z
    1900:	28 2f       	mov	r18, r24
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	8b 81       	ldd	r24, Y+3	; 0x03
    1906:	88 2f       	mov	r24, r24
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	a9 01       	movw	r20, r18
    190c:	02 c0       	rjmp	.+4      	; 0x1912 <DIO_u8getPinValue+0xb2>
    190e:	55 95       	asr	r21
    1910:	47 95       	ror	r20
    1912:	8a 95       	dec	r24
    1914:	e2 f7       	brpl	.-8      	; 0x190e <DIO_u8getPinValue+0xae>
    1916:	ca 01       	movw	r24, r20
    1918:	81 70       	andi	r24, 0x01	; 1
    191a:	ec 81       	ldd	r30, Y+4	; 0x04
    191c:	fd 81       	ldd	r31, Y+5	; 0x05
    191e:	80 83       	st	Z, r24
    1920:	30 c0       	rjmp	.+96     	; 0x1982 <DIO_u8getPinValue+0x122>
			case PORT_C :* Copy_u8pValue=GET_BIT(DIOC->PIN,Copy_u8pin);break ;
    1922:	e3 e3       	ldi	r30, 0x33	; 51
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	80 81       	ld	r24, Z
    1928:	28 2f       	mov	r18, r24
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	8b 81       	ldd	r24, Y+3	; 0x03
    192e:	88 2f       	mov	r24, r24
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	a9 01       	movw	r20, r18
    1934:	02 c0       	rjmp	.+4      	; 0x193a <DIO_u8getPinValue+0xda>
    1936:	55 95       	asr	r21
    1938:	47 95       	ror	r20
    193a:	8a 95       	dec	r24
    193c:	e2 f7       	brpl	.-8      	; 0x1936 <DIO_u8getPinValue+0xd6>
    193e:	ca 01       	movw	r24, r20
    1940:	81 70       	andi	r24, 0x01	; 1
    1942:	ec 81       	ldd	r30, Y+4	; 0x04
    1944:	fd 81       	ldd	r31, Y+5	; 0x05
    1946:	80 83       	st	Z, r24
    1948:	1c c0       	rjmp	.+56     	; 0x1982 <DIO_u8getPinValue+0x122>
			case PORT_D :* Copy_u8pValue=GET_BIT(DIOD->PIN,Copy_u8pin);break ;
    194a:	e0 e3       	ldi	r30, 0x30	; 48
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	80 81       	ld	r24, Z
    1950:	28 2f       	mov	r18, r24
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	8b 81       	ldd	r24, Y+3	; 0x03
    1956:	88 2f       	mov	r24, r24
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	a9 01       	movw	r20, r18
    195c:	02 c0       	rjmp	.+4      	; 0x1962 <DIO_u8getPinValue+0x102>
    195e:	55 95       	asr	r21
    1960:	47 95       	ror	r20
    1962:	8a 95       	dec	r24
    1964:	e2 f7       	brpl	.-8      	; 0x195e <DIO_u8getPinValue+0xfe>
    1966:	ca 01       	movw	r24, r20
    1968:	81 70       	andi	r24, 0x01	; 1
    196a:	ec 81       	ldd	r30, Y+4	; 0x04
    196c:	fd 81       	ldd	r31, Y+5	; 0x05
    196e:	80 83       	st	Z, r24
    1970:	08 c0       	rjmp	.+16     	; 0x1982 <DIO_u8getPinValue+0x122>
			default : Local_u8errStatus = RT_NOK ;
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	89 83       	std	Y+1, r24	; 0x01
    1976:	05 c0       	rjmp	.+10     	; 0x1982 <DIO_u8getPinValue+0x122>
			}
		}
		else
		{
			Local_u8errStatus = RT_NOK;
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	89 83       	std	Y+1, r24	; 0x01
    197c:	02 c0       	rjmp	.+4      	; 0x1982 <DIO_u8getPinValue+0x122>
		}
	}
	else
	{
		Local_u8errStatus = RT_NOK;
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8errStatus;
    1982:	89 81       	ldd	r24, Y+1	; 0x01
}
    1984:	27 96       	adiw	r28, 0x07	; 7
    1986:	0f b6       	in	r0, 0x3f	; 63
    1988:	f8 94       	cli
    198a:	de bf       	out	0x3e, r29	; 62
    198c:	0f be       	out	0x3f, r0	; 63
    198e:	cd bf       	out	0x3d, r28	; 61
    1990:	cf 91       	pop	r28
    1992:	df 91       	pop	r29
    1994:	08 95       	ret

00001996 <Leds_voidInit>:
#include "../../LIB/stdtypes.h"
#include "../../MCAL/dio/dio_int.h"
#include "leds_int.h"

void Leds_voidInit(void)
{
    1996:	df 93       	push	r29
    1998:	cf 93       	push	r28
    199a:	cd b7       	in	r28, 0x3d	; 61
    199c:	de b7       	in	r29, 0x3e	; 62
	DIO_u8setPinDirection(LEDS_PORT,LED1_PIN,OUTPUT);
    199e:	80 e0       	ldi	r24, 0x00	; 0
    19a0:	60 e0       	ldi	r22, 0x00	; 0
    19a2:	41 e0       	ldi	r20, 0x01	; 1
    19a4:	0e 94 46 09 	call	0x128c	; 0x128c <DIO_u8setPinDirection>
	DIO_u8setPinDirection(LEDS_PORT,LED2_PIN,OUTPUT);
    19a8:	80 e0       	ldi	r24, 0x00	; 0
    19aa:	61 e0       	ldi	r22, 0x01	; 1
    19ac:	41 e0       	ldi	r20, 0x01	; 1
    19ae:	0e 94 46 09 	call	0x128c	; 0x128c <DIO_u8setPinDirection>
	DIO_u8setPinDirection(LEDS_PORT,LED3_PIN,OUTPUT);
    19b2:	80 e0       	ldi	r24, 0x00	; 0
    19b4:	62 e0       	ldi	r22, 0x02	; 2
    19b6:	41 e0       	ldi	r20, 0x01	; 1
    19b8:	0e 94 46 09 	call	0x128c	; 0x128c <DIO_u8setPinDirection>
	DIO_u8setPinDirection(LEDS_PORT,LED4_PIN,OUTPUT);
    19bc:	80 e0       	ldi	r24, 0x00	; 0
    19be:	63 e0       	ldi	r22, 0x03	; 3
    19c0:	41 e0       	ldi	r20, 0x01	; 1
    19c2:	0e 94 46 09 	call	0x128c	; 0x128c <DIO_u8setPinDirection>
}
    19c6:	cf 91       	pop	r28
    19c8:	df 91       	pop	r29
    19ca:	08 95       	ret

000019cc <Motor_voidInit>:
#include "../../MCAL/dio/dio_int.h"
#include "dc_motor_int.h"


void Motor_voidInit(void)
{
    19cc:	df 93       	push	r29
    19ce:	cf 93       	push	r28
    19d0:	cd b7       	in	r28, 0x3d	; 61
    19d2:	de b7       	in	r29, 0x3e	; 62
	DIO_u8setPinDirection(MOTORS_PORT,M1_PIN,OUTPUT);
    19d4:	82 e0       	ldi	r24, 0x02	; 2
    19d6:	60 e0       	ldi	r22, 0x00	; 0
    19d8:	41 e0       	ldi	r20, 0x01	; 1
    19da:	0e 94 46 09 	call	0x128c	; 0x128c <DIO_u8setPinDirection>
	DIO_u8setPinDirection(MOTORS_PORT,M2_PIN,OUTPUT);
    19de:	82 e0       	ldi	r24, 0x02	; 2
    19e0:	61 e0       	ldi	r22, 0x01	; 1
    19e2:	41 e0       	ldi	r20, 0x01	; 1
    19e4:	0e 94 46 09 	call	0x128c	; 0x128c <DIO_u8setPinDirection>
	DIO_u8setPinDirection(MOTORS_PORT,M3_PIN,OUTPUT);
    19e8:	82 e0       	ldi	r24, 0x02	; 2
    19ea:	62 e0       	ldi	r22, 0x02	; 2
    19ec:	41 e0       	ldi	r20, 0x01	; 1
    19ee:	0e 94 46 09 	call	0x128c	; 0x128c <DIO_u8setPinDirection>
	DIO_u8setPinDirection(MOTORS_PORT,M4_PIN,OUTPUT);
    19f2:	82 e0       	ldi	r24, 0x02	; 2
    19f4:	63 e0       	ldi	r22, 0x03	; 3
    19f6:	41 e0       	ldi	r20, 0x01	; 1
    19f8:	0e 94 46 09 	call	0x128c	; 0x128c <DIO_u8setPinDirection>
	DIO_u8setPinDirection(MOTORS_PORT,M_EN1_PIN,OUTPUT);
    19fc:	82 e0       	ldi	r24, 0x02	; 2
    19fe:	64 e0       	ldi	r22, 0x04	; 4
    1a00:	41 e0       	ldi	r20, 0x01	; 1
    1a02:	0e 94 46 09 	call	0x128c	; 0x128c <DIO_u8setPinDirection>
	DIO_u8setPinDirection(MOTORS_PORT,M_EN2_PIN,OUTPUT);
    1a06:	82 e0       	ldi	r24, 0x02	; 2
    1a08:	65 e0       	ldi	r22, 0x05	; 5
    1a0a:	41 e0       	ldi	r20, 0x01	; 1
    1a0c:	0e 94 46 09 	call	0x128c	; 0x128c <DIO_u8setPinDirection>
}
    1a10:	cf 91       	pop	r28
    1a12:	df 91       	pop	r29
    1a14:	08 95       	ret

00001a16 <Motor_voidFoward>:
void Motor_voidFoward(void)
{
    1a16:	df 93       	push	r29
    1a18:	cf 93       	push	r28
    1a1a:	cd b7       	in	r28, 0x3d	; 61
    1a1c:	de b7       	in	r29, 0x3e	; 62
	DIO_u8setPinValue(MOTORS_PORT,M1_PIN,HIGH);
    1a1e:	82 e0       	ldi	r24, 0x02	; 2
    1a20:	60 e0       	ldi	r22, 0x00	; 0
    1a22:	41 e0       	ldi	r20, 0x01	; 1
    1a24:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_u8setPinValue>
	DIO_u8setPinValue(MOTORS_PORT,M2_PIN,LOW);
    1a28:	82 e0       	ldi	r24, 0x02	; 2
    1a2a:	61 e0       	ldi	r22, 0x01	; 1
    1a2c:	40 e0       	ldi	r20, 0x00	; 0
    1a2e:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_u8setPinValue>
	DIO_u8setPinValue(MOTORS_PORT,M3_PIN,HIGH);
    1a32:	82 e0       	ldi	r24, 0x02	; 2
    1a34:	62 e0       	ldi	r22, 0x02	; 2
    1a36:	41 e0       	ldi	r20, 0x01	; 1
    1a38:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_u8setPinValue>
	DIO_u8setPinValue(MOTORS_PORT,M4_PIN,LOW);
    1a3c:	82 e0       	ldi	r24, 0x02	; 2
    1a3e:	63 e0       	ldi	r22, 0x03	; 3
    1a40:	40 e0       	ldi	r20, 0x00	; 0
    1a42:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_u8setPinValue>
}
    1a46:	cf 91       	pop	r28
    1a48:	df 91       	pop	r29
    1a4a:	08 95       	ret

00001a4c <Motor_voidBackward>:
void Motor_voidBackward(void)
{
    1a4c:	df 93       	push	r29
    1a4e:	cf 93       	push	r28
    1a50:	cd b7       	in	r28, 0x3d	; 61
    1a52:	de b7       	in	r29, 0x3e	; 62
	DIO_u8setPinValue(MOTORS_PORT,M1_PIN,LOW);
    1a54:	82 e0       	ldi	r24, 0x02	; 2
    1a56:	60 e0       	ldi	r22, 0x00	; 0
    1a58:	40 e0       	ldi	r20, 0x00	; 0
    1a5a:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_u8setPinValue>
	DIO_u8setPinValue(MOTORS_PORT,M2_PIN,HIGH);
    1a5e:	82 e0       	ldi	r24, 0x02	; 2
    1a60:	61 e0       	ldi	r22, 0x01	; 1
    1a62:	41 e0       	ldi	r20, 0x01	; 1
    1a64:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_u8setPinValue>
	DIO_u8setPinValue(MOTORS_PORT,M3_PIN,LOW);
    1a68:	82 e0       	ldi	r24, 0x02	; 2
    1a6a:	62 e0       	ldi	r22, 0x02	; 2
    1a6c:	40 e0       	ldi	r20, 0x00	; 0
    1a6e:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_u8setPinValue>
	DIO_u8setPinValue(MOTORS_PORT,M4_PIN,HIGH);
    1a72:	82 e0       	ldi	r24, 0x02	; 2
    1a74:	63 e0       	ldi	r22, 0x03	; 3
    1a76:	41 e0       	ldi	r20, 0x01	; 1
    1a78:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_u8setPinValue>
}
    1a7c:	cf 91       	pop	r28
    1a7e:	df 91       	pop	r29
    1a80:	08 95       	ret

00001a82 <Motor_voidLeftDir>:
void Motor_voidLeftDir(void)
{
    1a82:	df 93       	push	r29
    1a84:	cf 93       	push	r28
    1a86:	cd b7       	in	r28, 0x3d	; 61
    1a88:	de b7       	in	r29, 0x3e	; 62
	DIO_u8setPinValue(MOTORS_PORT,M1_PIN,HIGH);
    1a8a:	82 e0       	ldi	r24, 0x02	; 2
    1a8c:	60 e0       	ldi	r22, 0x00	; 0
    1a8e:	41 e0       	ldi	r20, 0x01	; 1
    1a90:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_u8setPinValue>
	DIO_u8setPinValue(MOTORS_PORT,M2_PIN,LOW);
    1a94:	82 e0       	ldi	r24, 0x02	; 2
    1a96:	61 e0       	ldi	r22, 0x01	; 1
    1a98:	40 e0       	ldi	r20, 0x00	; 0
    1a9a:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_u8setPinValue>
	DIO_u8setPinValue(MOTORS_PORT,M3_PIN,LOW);
    1a9e:	82 e0       	ldi	r24, 0x02	; 2
    1aa0:	62 e0       	ldi	r22, 0x02	; 2
    1aa2:	40 e0       	ldi	r20, 0x00	; 0
    1aa4:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_u8setPinValue>
	DIO_u8setPinValue(MOTORS_PORT,M4_PIN,HIGH);
    1aa8:	82 e0       	ldi	r24, 0x02	; 2
    1aaa:	63 e0       	ldi	r22, 0x03	; 3
    1aac:	41 e0       	ldi	r20, 0x01	; 1
    1aae:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_u8setPinValue>
}
    1ab2:	cf 91       	pop	r28
    1ab4:	df 91       	pop	r29
    1ab6:	08 95       	ret

00001ab8 <Motor_voidRigthDir>:
void Motor_voidRigthDir(void)
{
    1ab8:	df 93       	push	r29
    1aba:	cf 93       	push	r28
    1abc:	cd b7       	in	r28, 0x3d	; 61
    1abe:	de b7       	in	r29, 0x3e	; 62
	DIO_u8setPinValue(MOTORS_PORT,M1_PIN,LOW);
    1ac0:	82 e0       	ldi	r24, 0x02	; 2
    1ac2:	60 e0       	ldi	r22, 0x00	; 0
    1ac4:	40 e0       	ldi	r20, 0x00	; 0
    1ac6:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_u8setPinValue>
	DIO_u8setPinValue(MOTORS_PORT,M2_PIN,HIGH);
    1aca:	82 e0       	ldi	r24, 0x02	; 2
    1acc:	61 e0       	ldi	r22, 0x01	; 1
    1ace:	41 e0       	ldi	r20, 0x01	; 1
    1ad0:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_u8setPinValue>
	DIO_u8setPinValue(MOTORS_PORT,M3_PIN,HIGH);
    1ad4:	82 e0       	ldi	r24, 0x02	; 2
    1ad6:	62 e0       	ldi	r22, 0x02	; 2
    1ad8:	41 e0       	ldi	r20, 0x01	; 1
    1ada:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_u8setPinValue>
	DIO_u8setPinValue(MOTORS_PORT,M4_PIN,LOW);
    1ade:	82 e0       	ldi	r24, 0x02	; 2
    1ae0:	63 e0       	ldi	r22, 0x03	; 3
    1ae2:	40 e0       	ldi	r20, 0x00	; 0
    1ae4:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_u8setPinValue>
}
    1ae8:	cf 91       	pop	r28
    1aea:	df 91       	pop	r29
    1aec:	08 95       	ret

00001aee <Motor_voidStop>:
void Motor_voidStop(void)
{
    1aee:	df 93       	push	r29
    1af0:	cf 93       	push	r28
    1af2:	cd b7       	in	r28, 0x3d	; 61
    1af4:	de b7       	in	r29, 0x3e	; 62
	DIO_u8setPinValue(MOTORS_PORT,M1_PIN,LOW);
    1af6:	82 e0       	ldi	r24, 0x02	; 2
    1af8:	60 e0       	ldi	r22, 0x00	; 0
    1afa:	40 e0       	ldi	r20, 0x00	; 0
    1afc:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_u8setPinValue>
	DIO_u8setPinValue(MOTORS_PORT,M2_PIN,LOW);
    1b00:	82 e0       	ldi	r24, 0x02	; 2
    1b02:	61 e0       	ldi	r22, 0x01	; 1
    1b04:	40 e0       	ldi	r20, 0x00	; 0
    1b06:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_u8setPinValue>
	DIO_u8setPinValue(MOTORS_PORT,M3_PIN,LOW);
    1b0a:	82 e0       	ldi	r24, 0x02	; 2
    1b0c:	62 e0       	ldi	r22, 0x02	; 2
    1b0e:	40 e0       	ldi	r20, 0x00	; 0
    1b10:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_u8setPinValue>
	DIO_u8setPinValue(MOTORS_PORT,M4_PIN,LOW);
    1b14:	82 e0       	ldi	r24, 0x02	; 2
    1b16:	63 e0       	ldi	r22, 0x03	; 3
    1b18:	40 e0       	ldi	r20, 0x00	; 0
    1b1a:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_u8setPinValue>
}
    1b1e:	cf 91       	pop	r28
    1b20:	df 91       	pop	r29
    1b22:	08 95       	ret

00001b24 <Buttons_voidInit>:
#include "../../LIB/stdtypes.h"
#include "../../MCAL/dio/dio_int.h"
#include "buttons_int.h"

void Buttons_voidInit(void)
{
    1b24:	df 93       	push	r29
    1b26:	cf 93       	push	r28
    1b28:	cd b7       	in	r28, 0x3d	; 61
    1b2a:	de b7       	in	r29, 0x3e	; 62
	DIO_u8setPinDirection(BUTTONS_PORT,PB1_PIN,INPUT);
    1b2c:	83 e0       	ldi	r24, 0x03	; 3
    1b2e:	61 e0       	ldi	r22, 0x01	; 1
    1b30:	40 e0       	ldi	r20, 0x00	; 0
    1b32:	0e 94 46 09 	call	0x128c	; 0x128c <DIO_u8setPinDirection>
	DIO_u8setPinValue(BUTTONS_PORT,PB1_PIN,HIGH);
    1b36:	83 e0       	ldi	r24, 0x03	; 3
    1b38:	61 e0       	ldi	r22, 0x01	; 1
    1b3a:	41 e0       	ldi	r20, 0x01	; 1
    1b3c:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_u8setPinValue>
	DIO_u8setPinValue(BUTTONS_PORT,PB2_PIN,HIGH);
    1b40:	83 e0       	ldi	r24, 0x03	; 3
    1b42:	63 e0       	ldi	r22, 0x03	; 3
    1b44:	41 e0       	ldi	r20, 0x01	; 1
    1b46:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_u8setPinValue>
}
    1b4a:	cf 91       	pop	r28
    1b4c:	df 91       	pop	r29
    1b4e:	08 95       	ret

00001b50 <Emergency_voidStop>:

u8 global_u8PB1_StateCounter = INIT_VALUE;
u8 global_u8RectanglePathState = RECTANGLE_START;

void Emergency_voidStop(void)
{
    1b50:	df 93       	push	r29
    1b52:	cf 93       	push	r28
    1b54:	cd b7       	in	r28, 0x3d	; 61
    1b56:	de b7       	in	r29, 0x3e	; 62
	Motor_voidStop();
    1b58:	0e 94 77 0d 	call	0x1aee	; 0x1aee <Motor_voidStop>
	global_u8PB1_StateCounter = INIT_VALUE;
    1b5c:	10 92 60 00 	sts	0x0060, r1
	global_u8RectanglePathState = RECTANGLE_START;
    1b60:	10 92 61 00 	sts	0x0061, r1
	Timer_DeInit(TIMER_1);
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	0e 94 24 04 	call	0x848	; 0x848 <Timer_DeInit>
}
    1b6a:	cf 91       	pop	r28
    1b6c:	df 91       	pop	r29
    1b6e:	08 95       	ret

00001b70 <SW_PWM>:

void SW_PWM(void)
{
    1b70:	df 93       	push	r29
    1b72:	cf 93       	push	r28
    1b74:	00 d0       	rcall	.+0      	; 0x1b76 <SW_PWM+0x6>
    1b76:	cd b7       	in	r28, 0x3d	; 61
    1b78:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8OVFCounter=0;

	Local_u8OVFCounter++;
    1b7a:	80 91 62 00 	lds	r24, 0x0062
    1b7e:	8f 5f       	subi	r24, 0xFF	; 255
    1b80:	80 93 62 00 	sts	0x0062, r24
	switch(global_u8RectanglePathState)
    1b84:	80 91 61 00 	lds	r24, 0x0061
    1b88:	28 2f       	mov	r18, r24
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	3a 83       	std	Y+2, r19	; 0x02
    1b8e:	29 83       	std	Y+1, r18	; 0x01
    1b90:	89 81       	ldd	r24, Y+1	; 0x01
    1b92:	9a 81       	ldd	r25, Y+2	; 0x02
    1b94:	81 30       	cpi	r24, 0x01	; 1
    1b96:	91 05       	cpc	r25, r1
    1b98:	31 f0       	breq	.+12     	; 0x1ba6 <SW_PWM+0x36>
    1b9a:	29 81       	ldd	r18, Y+1	; 0x01
    1b9c:	3a 81       	ldd	r19, Y+2	; 0x02
    1b9e:	22 30       	cpi	r18, 0x02	; 2
    1ba0:	31 05       	cpc	r19, r1
    1ba2:	09 f1       	breq	.+66     	; 0x1be6 <SW_PWM+0x76>
    1ba4:	40 c0       	rjmp	.+128    	; 0x1c26 <SW_PWM+0xb6>
	{
	case RECTANGLE_WIDTH:
		if(Local_u8OVFCounter == PWM_DUTY_30_PER)
    1ba6:	80 91 62 00 	lds	r24, 0x0062
    1baa:	86 30       	cpi	r24, 0x06	; 6
    1bac:	59 f4       	brne	.+22     	; 0x1bc4 <SW_PWM+0x54>
		{
			DIO_u8setPinValue(MOTORS_PORT,M_EN1_PIN,LOW);
    1bae:	82 e0       	ldi	r24, 0x02	; 2
    1bb0:	64 e0       	ldi	r22, 0x04	; 4
    1bb2:	40 e0       	ldi	r20, 0x00	; 0
    1bb4:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_u8setPinValue>
			DIO_u8setPinValue(MOTORS_PORT,M_EN2_PIN,LOW);
    1bb8:	82 e0       	ldi	r24, 0x02	; 2
    1bba:	65 e0       	ldi	r22, 0x05	; 5
    1bbc:	40 e0       	ldi	r20, 0x00	; 0
    1bbe:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_u8setPinValue>
    1bc2:	3b c0       	rjmp	.+118    	; 0x1c3a <SW_PWM+0xca>
		}
		else if(Local_u8OVFCounter == PWM_PERIODIC_TIME)
    1bc4:	80 91 62 00 	lds	r24, 0x0062
    1bc8:	84 31       	cpi	r24, 0x14	; 20
    1bca:	b9 f5       	brne	.+110    	; 0x1c3a <SW_PWM+0xca>
		{
			DIO_u8setPinValue(MOTORS_PORT,M_EN1_PIN,HIGH);
    1bcc:	82 e0       	ldi	r24, 0x02	; 2
    1bce:	64 e0       	ldi	r22, 0x04	; 4
    1bd0:	41 e0       	ldi	r20, 0x01	; 1
    1bd2:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_u8setPinValue>
			DIO_u8setPinValue(MOTORS_PORT,M_EN2_PIN,HIGH);
    1bd6:	82 e0       	ldi	r24, 0x02	; 2
    1bd8:	65 e0       	ldi	r22, 0x05	; 5
    1bda:	41 e0       	ldi	r20, 0x01	; 1
    1bdc:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_u8setPinValue>
			Local_u8OVFCounter=0;
    1be0:	10 92 62 00 	sts	0x0062, r1
    1be4:	2a c0       	rjmp	.+84     	; 0x1c3a <SW_PWM+0xca>
		}
		break;

	case RECTANGLE_LENGTH:
		if(Local_u8OVFCounter == PWM_DUTY_50_PER)
    1be6:	80 91 62 00 	lds	r24, 0x0062
    1bea:	8a 30       	cpi	r24, 0x0A	; 10
    1bec:	59 f4       	brne	.+22     	; 0x1c04 <SW_PWM+0x94>
		{
			DIO_u8setPinValue(MOTORS_PORT,M_EN1_PIN,LOW);
    1bee:	82 e0       	ldi	r24, 0x02	; 2
    1bf0:	64 e0       	ldi	r22, 0x04	; 4
    1bf2:	40 e0       	ldi	r20, 0x00	; 0
    1bf4:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_u8setPinValue>
			DIO_u8setPinValue(MOTORS_PORT,M_EN2_PIN,LOW);
    1bf8:	82 e0       	ldi	r24, 0x02	; 2
    1bfa:	65 e0       	ldi	r22, 0x05	; 5
    1bfc:	40 e0       	ldi	r20, 0x00	; 0
    1bfe:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_u8setPinValue>
    1c02:	1b c0       	rjmp	.+54     	; 0x1c3a <SW_PWM+0xca>
		}
		else if(Local_u8OVFCounter == PWM_PERIODIC_TIME)
    1c04:	80 91 62 00 	lds	r24, 0x0062
    1c08:	84 31       	cpi	r24, 0x14	; 20
    1c0a:	b9 f4       	brne	.+46     	; 0x1c3a <SW_PWM+0xca>
		{
			DIO_u8setPinValue(MOTORS_PORT,M_EN1_PIN,HIGH);
    1c0c:	82 e0       	ldi	r24, 0x02	; 2
    1c0e:	64 e0       	ldi	r22, 0x04	; 4
    1c10:	41 e0       	ldi	r20, 0x01	; 1
    1c12:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_u8setPinValue>
			DIO_u8setPinValue(MOTORS_PORT,M_EN2_PIN,HIGH);
    1c16:	82 e0       	ldi	r24, 0x02	; 2
    1c18:	65 e0       	ldi	r22, 0x05	; 5
    1c1a:	41 e0       	ldi	r20, 0x01	; 1
    1c1c:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_u8setPinValue>
			Local_u8OVFCounter=0;
    1c20:	10 92 62 00 	sts	0x0062, r1
    1c24:	0a c0       	rjmp	.+20     	; 0x1c3a <SW_PWM+0xca>
		}
		break;
	default:
		DIO_u8setPinValue(MOTORS_PORT,M_EN1_PIN,HIGH);
    1c26:	82 e0       	ldi	r24, 0x02	; 2
    1c28:	64 e0       	ldi	r22, 0x04	; 4
    1c2a:	41 e0       	ldi	r20, 0x01	; 1
    1c2c:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_u8setPinValue>
		DIO_u8setPinValue(MOTORS_PORT,M_EN2_PIN,HIGH);
    1c30:	82 e0       	ldi	r24, 0x02	; 2
    1c32:	65 e0       	ldi	r22, 0x05	; 5
    1c34:	41 e0       	ldi	r20, 0x01	; 1
    1c36:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_u8setPinValue>
		break;
	}
}
    1c3a:	0f 90       	pop	r0
    1c3c:	0f 90       	pop	r0
    1c3e:	cf 91       	pop	r28
    1c40:	df 91       	pop	r29
    1c42:	08 95       	ret

00001c44 <DelaySec>:

void DelaySec(void)
{
    1c44:	df 93       	push	r29
    1c46:	cf 93       	push	r28
    1c48:	cd b7       	in	r28, 0x3d	; 61
    1c4a:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8OVFCounter=0;

	Local_u8OVFCounter++;
    1c4c:	80 91 63 00 	lds	r24, 0x0063
    1c50:	8f 5f       	subi	r24, 0xFF	; 255
    1c52:	80 93 63 00 	sts	0x0063, r24

	if(Local_u8OVFCounter == DELAY_1_SEC)
    1c56:	80 91 63 00 	lds	r24, 0x0063
    1c5a:	8f 30       	cpi	r24, 0x0F	; 15
    1c5c:	39 f4       	brne	.+14     	; 0x1c6c <DelaySec+0x28>
	{
		global_u8PB1_StateCounter = PROCESS_VALUE_FOR_LEN;
    1c5e:	82 e0       	ldi	r24, 0x02	; 2
    1c60:	80 93 60 00 	sts	0x0060, r24
		global_u8RectanglePathState = RECTANGLE_LENGTH;
    1c64:	82 e0       	ldi	r24, 0x02	; 2
    1c66:	80 93 61 00 	sts	0x0061, r24
    1c6a:	3c c0       	rjmp	.+120    	; 0x1ce4 <DelaySec+0xa0>
	}
	else if(Local_u8OVFCounter == DELAY_4_SECS)
    1c6c:	80 91 63 00 	lds	r24, 0x0063
    1c70:	8d 33       	cpi	r24, 0x3D	; 61
    1c72:	21 f4       	brne	.+8      	; 0x1c7c <DelaySec+0x38>
	{
		global_u8PB1_StateCounter = PROCESS_VALUE_STOP;
    1c74:	85 e0       	ldi	r24, 0x05	; 5
    1c76:	80 93 60 00 	sts	0x0060, r24
    1c7a:	34 c0       	rjmp	.+104    	; 0x1ce4 <DelaySec+0xa0>
	}
	else if(Local_u8OVFCounter == DELAY_4_SECS_HALF)
    1c7c:	80 91 63 00 	lds	r24, 0x0063
    1c80:	86 34       	cpi	r24, 0x46	; 70
    1c82:	21 f4       	brne	.+8      	; 0x1c8c <DelaySec+0x48>
	{
		global_u8PB1_StateCounter = PROCESS_VALUE_RIGHT;
    1c84:	83 e0       	ldi	r24, 0x03	; 3
    1c86:	80 93 60 00 	sts	0x0060, r24
    1c8a:	2c c0       	rjmp	.+88     	; 0x1ce4 <DelaySec+0xa0>
	}
	else if(Local_u8OVFCounter == DELAY_5_SECS)
    1c8c:	80 91 63 00 	lds	r24, 0x0063
    1c90:	8f 34       	cpi	r24, 0x4F	; 79
    1c92:	21 f4       	brne	.+8      	; 0x1c9c <DelaySec+0x58>
	{
		global_u8PB1_StateCounter = PROCESS_VALUE_STOP;
    1c94:	85 e0       	ldi	r24, 0x05	; 5
    1c96:	80 93 60 00 	sts	0x0060, r24
    1c9a:	24 c0       	rjmp	.+72     	; 0x1ce4 <DelaySec+0xa0>
	}
	else if(Local_u8OVFCounter == DELAY_5_SECS_HALF)
    1c9c:	80 91 63 00 	lds	r24, 0x0063
    1ca0:	88 35       	cpi	r24, 0x58	; 88
    1ca2:	39 f4       	brne	.+14     	; 0x1cb2 <DelaySec+0x6e>
	{
		global_u8PB1_StateCounter = PROCESS_VALUE_FOR_WID;
    1ca4:	84 e0       	ldi	r24, 0x04	; 4
    1ca6:	80 93 60 00 	sts	0x0060, r24
		global_u8RectanglePathState = RECTANGLE_WIDTH;
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	80 93 61 00 	sts	0x0061, r24
    1cb0:	19 c0       	rjmp	.+50     	; 0x1ce4 <DelaySec+0xa0>
	}
	else if(Local_u8OVFCounter == DELAY_8_SECS)
    1cb2:	80 91 63 00 	lds	r24, 0x0063
    1cb6:	8b 37       	cpi	r24, 0x7B	; 123
    1cb8:	21 f4       	brne	.+8      	; 0x1cc2 <DelaySec+0x7e>
	{
		global_u8PB1_StateCounter = PROCESS_VALUE_STOP;
    1cba:	85 e0       	ldi	r24, 0x05	; 5
    1cbc:	80 93 60 00 	sts	0x0060, r24
    1cc0:	11 c0       	rjmp	.+34     	; 0x1ce4 <DelaySec+0xa0>
	}
	else if(Local_u8OVFCounter == DELAY_8_SECS_HALF)
    1cc2:	80 91 63 00 	lds	r24, 0x0063
    1cc6:	84 38       	cpi	r24, 0x84	; 132
    1cc8:	21 f4       	brne	.+8      	; 0x1cd2 <DelaySec+0x8e>
	{
		global_u8PB1_StateCounter = PROCESS_VALUE_RIGHT;
    1cca:	83 e0       	ldi	r24, 0x03	; 3
    1ccc:	80 93 60 00 	sts	0x0060, r24
    1cd0:	09 c0       	rjmp	.+18     	; 0x1ce4 <DelaySec+0xa0>
	}
	else if(Local_u8OVFCounter == DELAY_9_SECS)
    1cd2:	80 91 63 00 	lds	r24, 0x0063
    1cd6:	8d 38       	cpi	r24, 0x8D	; 141
    1cd8:	29 f4       	brne	.+10     	; 0x1ce4 <DelaySec+0xa0>
	{
		global_u8PB1_StateCounter = PROCESS_VALUE_STOP;
    1cda:	85 e0       	ldi	r24, 0x05	; 5
    1cdc:	80 93 60 00 	sts	0x0060, r24
		Local_u8OVFCounter=0;
    1ce0:	10 92 63 00 	sts	0x0063, r1
	}



}
    1ce4:	cf 91       	pop	r28
    1ce6:	df 91       	pop	r29
    1ce8:	08 95       	ret

00001cea <main>:

void main (void)
{
    1cea:	df 93       	push	r29
    1cec:	cf 93       	push	r28
    1cee:	cd b7       	in	r28, 0x3d	; 61
    1cf0:	de b7       	in	r29, 0x3e	; 62
    1cf2:	69 97       	sbiw	r28, 0x19	; 25
    1cf4:	0f b6       	in	r0, 0x3f	; 63
    1cf6:	f8 94       	cli
    1cf8:	de bf       	out	0x3e, r29	; 62
    1cfa:	0f be       	out	0x3f, r0	; 63
    1cfc:	cd bf       	out	0x3d, r28	; 61
	Leds_voidInit();
    1cfe:	0e 94 cb 0c 	call	0x1996	; 0x1996 <Leds_voidInit>
	Motor_voidInit();
    1d02:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Motor_voidInit>
	Buttons_voidInit();
    1d06:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <Buttons_voidInit>

	timer_config_type SW_PWM_timer2;
	SW_PWM_timer2.timer = TIMER_2;
    1d0a:	82 e0       	ldi	r24, 0x02	; 2
    1d0c:	8a 87       	std	Y+10, r24	; 0x0a
	SW_PWM_timer2.operated_mode = NORMAL_MODE;
    1d0e:	19 86       	std	Y+9, r1	; 0x09
	SW_PWM_timer2.T2_used_freq = TIMER_2_PRE_SCALER_e_8;
    1d10:	82 e0       	ldi	r24, 0x02	; 2
    1d12:	88 87       	std	Y+8, r24	; 0x08
	Timer_init(&SW_PWM_timer2);
    1d14:	ce 01       	movw	r24, r28
    1d16:	01 96       	adiw	r24, 0x01	; 1
    1d18:	0e 94 be 02 	call	0x57c	; 0x57c <Timer_init>
	Set_CallBack_TIMER_2_OVF_INT(SW_PWM);
    1d1c:	88 eb       	ldi	r24, 0xB8	; 184
    1d1e:	9d e0       	ldi	r25, 0x0D	; 13
    1d20:	0e 94 1e 02 	call	0x43c	; 0x43c <Set_CallBack_TIMER_2_OVF_INT>

	timer_config_type delay_timer1;
	delay_timer1.timer = TIMER_1;
    1d24:	81 e0       	ldi	r24, 0x01	; 1
    1d26:	8d 8b       	std	Y+21, r24	; 0x15
	delay_timer1.operated_mode = NORMAL_MODE;
    1d28:	1c 8a       	std	Y+20, r1	; 0x14
	delay_timer1.T0_T1_used_freq = TIMER_0_1_PRE_SCALER_e_8;
    1d2a:	82 e0       	ldi	r24, 0x02	; 2
    1d2c:	8a 8b       	std	Y+18, r24	; 0x12
	delay_timer1.initial_value = 48576; // Preload value to get 1 Sec
    1d2e:	80 ec       	ldi	r24, 0xC0	; 192
    1d30:	9d eb       	ldi	r25, 0xBD	; 189
    1d32:	99 8b       	std	Y+17, r25	; 0x11
    1d34:	88 8b       	std	Y+16, r24	; 0x10
	Set_CallBack_TIMER_1_OVF_INT(DelaySec);
    1d36:	82 e2       	ldi	r24, 0x22	; 34
    1d38:	9e e0       	ldi	r25, 0x0E	; 14
    1d3a:	0e 94 de 00 	call	0x1bc	; 0x1bc <Set_CallBack_TIMER_1_OVF_INT>

	//External interrupt as Emergency stop Button
	EXTINT_u8Enable(INT_1);
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <EXTINT_u8Enable>
	EXTINT_u8SenseCtrl(INT_1,INT1_RISE_EDGE_EN);
    1d44:	81 e0       	ldi	r24, 0x01	; 1
    1d46:	6c e0       	ldi	r22, 0x0C	; 12
    1d48:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <EXTINT_u8SenseCtrl>
	Set_CallBack_EXTINT_1(Emergency_voidStop);
    1d4c:	88 ea       	ldi	r24, 0xA8	; 168
    1d4e:	9d e0       	ldi	r25, 0x0D	; 13
    1d50:	0e 94 bc 06 	call	0xd78	; 0xd78 <Set_CallBack_EXTINT_1>

	Global_VidINTEnable();
    1d54:	0e 94 50 06 	call	0xca0	; 0xca0 <Global_VidINTEnable>

	while(1)
	{
		u8 local_u8PB1_State = BUTTON_NOT_PRESSED;
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	8f 8b       	std	Y+23, r24	; 0x17

		// reading Push Button 1 to start the program
		DIO_u8getPinValue(BUTTONS_PORT,PB1_PIN,&local_u8PB1_State);
    1d5c:	9e 01       	movw	r18, r28
    1d5e:	29 5e       	subi	r18, 0xE9	; 233
    1d60:	3f 4f       	sbci	r19, 0xFF	; 255
    1d62:	83 e0       	ldi	r24, 0x03	; 3
    1d64:	61 e0       	ldi	r22, 0x01	; 1
    1d66:	a9 01       	movw	r20, r18
    1d68:	0e 94 30 0c 	call	0x1860	; 0x1860 <DIO_u8getPinValue>

		if(local_u8PB1_State == BUTTON_PRESSED)
    1d6c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d6e:	88 23       	and	r24, r24
    1d70:	49 f4       	brne	.+18     	; 0x1d84 <main+0x9a>
		{
			global_u8PB1_StateCounter = PROCESS_VALUE_START;
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	80 93 60 00 	sts	0x0060, r24
			Timer_init(&delay_timer1);
    1d78:	ce 01       	movw	r24, r28
    1d7a:	0c 96       	adiw	r24, 0x0c	; 12
    1d7c:	0e 94 be 02 	call	0x57c	; 0x57c <Timer_init>
			global_u8RectanglePathState = RECTANGLE_START;
    1d80:	10 92 61 00 	sts	0x0061, r1
		}

		switch(global_u8PB1_StateCounter)
    1d84:	80 91 60 00 	lds	r24, 0x0060
    1d88:	28 2f       	mov	r18, r24
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	39 8f       	std	Y+25, r19	; 0x19
    1d8e:	28 8f       	std	Y+24, r18	; 0x18
    1d90:	88 8d       	ldd	r24, Y+24	; 0x18
    1d92:	99 8d       	ldd	r25, Y+25	; 0x19
    1d94:	82 30       	cpi	r24, 0x02	; 2
    1d96:	91 05       	cpc	r25, r1
    1d98:	09 f4       	brne	.+2      	; 0x1d9c <main+0xb2>
    1d9a:	50 c0       	rjmp	.+160    	; 0x1e3c <main+0x152>
    1d9c:	28 8d       	ldd	r18, Y+24	; 0x18
    1d9e:	39 8d       	ldd	r19, Y+25	; 0x19
    1da0:	23 30       	cpi	r18, 0x03	; 3
    1da2:	31 05       	cpc	r19, r1
    1da4:	54 f4       	brge	.+20     	; 0x1dba <main+0xd0>
    1da6:	88 8d       	ldd	r24, Y+24	; 0x18
    1da8:	99 8d       	ldd	r25, Y+25	; 0x19
    1daa:	00 97       	sbiw	r24, 0x00	; 0
    1dac:	c9 f0       	breq	.+50     	; 0x1de0 <main+0xf6>
    1dae:	28 8d       	ldd	r18, Y+24	; 0x18
    1db0:	39 8d       	ldd	r19, Y+25	; 0x19
    1db2:	21 30       	cpi	r18, 0x01	; 1
    1db4:	31 05       	cpc	r19, r1
    1db6:	59 f1       	breq	.+86     	; 0x1e0e <main+0x124>
    1db8:	cf cf       	rjmp	.-98     	; 0x1d58 <main+0x6e>
    1dba:	88 8d       	ldd	r24, Y+24	; 0x18
    1dbc:	99 8d       	ldd	r25, Y+25	; 0x19
    1dbe:	84 30       	cpi	r24, 0x04	; 4
    1dc0:	91 05       	cpc	r25, r1
    1dc2:	09 f4       	brne	.+2      	; 0x1dc6 <main+0xdc>
    1dc4:	80 c0       	rjmp	.+256    	; 0x1ec6 <main+0x1dc>
    1dc6:	28 8d       	ldd	r18, Y+24	; 0x18
    1dc8:	39 8d       	ldd	r19, Y+25	; 0x19
    1dca:	24 30       	cpi	r18, 0x04	; 4
    1dcc:	31 05       	cpc	r19, r1
    1dce:	0c f4       	brge	.+2      	; 0x1dd2 <main+0xe8>
    1dd0:	4c c0       	rjmp	.+152    	; 0x1e6a <main+0x180>
    1dd2:	88 8d       	ldd	r24, Y+24	; 0x18
    1dd4:	99 8d       	ldd	r25, Y+25	; 0x19
    1dd6:	85 30       	cpi	r24, 0x05	; 5
    1dd8:	91 05       	cpc	r25, r1
    1dda:	09 f4       	brne	.+2      	; 0x1dde <main+0xf4>
    1ddc:	5d c0       	rjmp	.+186    	; 0x1e98 <main+0x1ae>
    1dde:	bc cf       	rjmp	.-136    	; 0x1d58 <main+0x6e>
		{
		case INIT_VALUE:

			Motor_voidStop();
    1de0:	0e 94 77 0d 	call	0x1aee	; 0x1aee <Motor_voidStop>
			DIO_u8setPinValue(LEDS_PORT, LED3_PIN, LOW);
    1de4:	80 e0       	ldi	r24, 0x00	; 0
    1de6:	62 e0       	ldi	r22, 0x02	; 2
    1de8:	40 e0       	ldi	r20, 0x00	; 0
    1dea:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_u8setPinValue>
			DIO_u8setPinValue(LEDS_PORT, LED2_PIN, LOW);
    1dee:	80 e0       	ldi	r24, 0x00	; 0
    1df0:	61 e0       	ldi	r22, 0x01	; 1
    1df2:	40 e0       	ldi	r20, 0x00	; 0
    1df4:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_u8setPinValue>
			DIO_u8setPinValue(LEDS_PORT, LED4_PIN, LOW);
    1df8:	80 e0       	ldi	r24, 0x00	; 0
    1dfa:	63 e0       	ldi	r22, 0x03	; 3
    1dfc:	40 e0       	ldi	r20, 0x00	; 0
    1dfe:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_u8setPinValue>
			DIO_u8setPinValue(LEDS_PORT, LED1_PIN, LOW);
    1e02:	80 e0       	ldi	r24, 0x00	; 0
    1e04:	60 e0       	ldi	r22, 0x00	; 0
    1e06:	40 e0       	ldi	r20, 0x00	; 0
    1e08:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_u8setPinValue>
    1e0c:	a5 cf       	rjmp	.-182    	; 0x1d58 <main+0x6e>
			break;

		case PROCESS_VALUE_START:

			Motor_voidFoward();
    1e0e:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <Motor_voidFoward>
			DIO_u8setPinValue(LEDS_PORT, LED3_PIN, LOW);
    1e12:	80 e0       	ldi	r24, 0x00	; 0
    1e14:	62 e0       	ldi	r22, 0x02	; 2
    1e16:	40 e0       	ldi	r20, 0x00	; 0
    1e18:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_u8setPinValue>
			DIO_u8setPinValue(LEDS_PORT, LED2_PIN, LOW);
    1e1c:	80 e0       	ldi	r24, 0x00	; 0
    1e1e:	61 e0       	ldi	r22, 0x01	; 1
    1e20:	40 e0       	ldi	r20, 0x00	; 0
    1e22:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_u8setPinValue>
			DIO_u8setPinValue(LEDS_PORT, LED4_PIN, LOW);
    1e26:	80 e0       	ldi	r24, 0x00	; 0
    1e28:	63 e0       	ldi	r22, 0x03	; 3
    1e2a:	40 e0       	ldi	r20, 0x00	; 0
    1e2c:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_u8setPinValue>
			DIO_u8setPinValue(LEDS_PORT, LED1_PIN, LOW);
    1e30:	80 e0       	ldi	r24, 0x00	; 0
    1e32:	60 e0       	ldi	r22, 0x00	; 0
    1e34:	40 e0       	ldi	r20, 0x00	; 0
    1e36:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_u8setPinValue>
    1e3a:	8e cf       	rjmp	.-228    	; 0x1d58 <main+0x6e>
			break;

		case PROCESS_VALUE_FOR_LEN:

			Motor_voidFoward();
    1e3c:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <Motor_voidFoward>
			DIO_u8setPinValue(LEDS_PORT, LED3_PIN, LOW);
    1e40:	80 e0       	ldi	r24, 0x00	; 0
    1e42:	62 e0       	ldi	r22, 0x02	; 2
    1e44:	40 e0       	ldi	r20, 0x00	; 0
    1e46:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_u8setPinValue>
			DIO_u8setPinValue(LEDS_PORT, LED2_PIN, LOW);
    1e4a:	80 e0       	ldi	r24, 0x00	; 0
    1e4c:	61 e0       	ldi	r22, 0x01	; 1
    1e4e:	40 e0       	ldi	r20, 0x00	; 0
    1e50:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_u8setPinValue>
			DIO_u8setPinValue(LEDS_PORT, LED4_PIN, LOW);
    1e54:	80 e0       	ldi	r24, 0x00	; 0
    1e56:	63 e0       	ldi	r22, 0x03	; 3
    1e58:	40 e0       	ldi	r20, 0x00	; 0
    1e5a:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_u8setPinValue>
			DIO_u8setPinValue(LEDS_PORT, LED1_PIN, HIGH);
    1e5e:	80 e0       	ldi	r24, 0x00	; 0
    1e60:	60 e0       	ldi	r22, 0x00	; 0
    1e62:	41 e0       	ldi	r20, 0x01	; 1
    1e64:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_u8setPinValue>
    1e68:	77 cf       	rjmp	.-274    	; 0x1d58 <main+0x6e>
			break;

		case PROCESS_VALUE_RIGHT:

			Motor_voidRigthDir();
    1e6a:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <Motor_voidRigthDir>
			DIO_u8setPinValue(LEDS_PORT, LED1_PIN, LOW);
    1e6e:	80 e0       	ldi	r24, 0x00	; 0
    1e70:	60 e0       	ldi	r22, 0x00	; 0
    1e72:	40 e0       	ldi	r20, 0x00	; 0
    1e74:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_u8setPinValue>
			DIO_u8setPinValue(LEDS_PORT, LED2_PIN, LOW);
    1e78:	80 e0       	ldi	r24, 0x00	; 0
    1e7a:	61 e0       	ldi	r22, 0x01	; 1
    1e7c:	40 e0       	ldi	r20, 0x00	; 0
    1e7e:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_u8setPinValue>
			DIO_u8setPinValue(LEDS_PORT, LED3_PIN, LOW);
    1e82:	80 e0       	ldi	r24, 0x00	; 0
    1e84:	62 e0       	ldi	r22, 0x02	; 2
    1e86:	40 e0       	ldi	r20, 0x00	; 0
    1e88:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_u8setPinValue>
			DIO_u8setPinValue(LEDS_PORT, LED4_PIN, HIGH);
    1e8c:	80 e0       	ldi	r24, 0x00	; 0
    1e8e:	63 e0       	ldi	r22, 0x03	; 3
    1e90:	41 e0       	ldi	r20, 0x01	; 1
    1e92:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_u8setPinValue>
    1e96:	60 cf       	rjmp	.-320    	; 0x1d58 <main+0x6e>
			break;

		case PROCESS_VALUE_STOP:

			Motor_voidStop();
    1e98:	0e 94 77 0d 	call	0x1aee	; 0x1aee <Motor_voidStop>
			DIO_u8setPinValue(LEDS_PORT, LED1_PIN, LOW);
    1e9c:	80 e0       	ldi	r24, 0x00	; 0
    1e9e:	60 e0       	ldi	r22, 0x00	; 0
    1ea0:	40 e0       	ldi	r20, 0x00	; 0
    1ea2:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_u8setPinValue>
			DIO_u8setPinValue(LEDS_PORT, LED2_PIN, LOW);
    1ea6:	80 e0       	ldi	r24, 0x00	; 0
    1ea8:	61 e0       	ldi	r22, 0x01	; 1
    1eaa:	40 e0       	ldi	r20, 0x00	; 0
    1eac:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_u8setPinValue>
			DIO_u8setPinValue(LEDS_PORT, LED4_PIN, LOW);
    1eb0:	80 e0       	ldi	r24, 0x00	; 0
    1eb2:	63 e0       	ldi	r22, 0x03	; 3
    1eb4:	40 e0       	ldi	r20, 0x00	; 0
    1eb6:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_u8setPinValue>
			DIO_u8setPinValue(LEDS_PORT, LED3_PIN, HIGH);
    1eba:	80 e0       	ldi	r24, 0x00	; 0
    1ebc:	62 e0       	ldi	r22, 0x02	; 2
    1ebe:	41 e0       	ldi	r20, 0x01	; 1
    1ec0:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_u8setPinValue>
    1ec4:	49 cf       	rjmp	.-366    	; 0x1d58 <main+0x6e>
			break;

		case PROCESS_VALUE_FOR_WID:

			Motor_voidFoward();
    1ec6:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <Motor_voidFoward>
			DIO_u8setPinValue(LEDS_PORT, LED1_PIN, LOW);
    1eca:	80 e0       	ldi	r24, 0x00	; 0
    1ecc:	60 e0       	ldi	r22, 0x00	; 0
    1ece:	40 e0       	ldi	r20, 0x00	; 0
    1ed0:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_u8setPinValue>
			DIO_u8setPinValue(LEDS_PORT, LED3_PIN, LOW);
    1ed4:	80 e0       	ldi	r24, 0x00	; 0
    1ed6:	62 e0       	ldi	r22, 0x02	; 2
    1ed8:	40 e0       	ldi	r20, 0x00	; 0
    1eda:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_u8setPinValue>
			DIO_u8setPinValue(LEDS_PORT, LED4_PIN, LOW);
    1ede:	80 e0       	ldi	r24, 0x00	; 0
    1ee0:	63 e0       	ldi	r22, 0x03	; 3
    1ee2:	40 e0       	ldi	r20, 0x00	; 0
    1ee4:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_u8setPinValue>
			DIO_u8setPinValue(LEDS_PORT, LED2_PIN, HIGH);
    1ee8:	80 e0       	ldi	r24, 0x00	; 0
    1eea:	61 e0       	ldi	r22, 0x01	; 1
    1eec:	41 e0       	ldi	r20, 0x01	; 1
    1eee:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DIO_u8setPinValue>
    1ef2:	32 cf       	rjmp	.-412    	; 0x1d58 <main+0x6e>

00001ef4 <__udivmodhi4>:
    1ef4:	aa 1b       	sub	r26, r26
    1ef6:	bb 1b       	sub	r27, r27
    1ef8:	51 e1       	ldi	r21, 0x11	; 17
    1efa:	07 c0       	rjmp	.+14     	; 0x1f0a <__udivmodhi4_ep>

00001efc <__udivmodhi4_loop>:
    1efc:	aa 1f       	adc	r26, r26
    1efe:	bb 1f       	adc	r27, r27
    1f00:	a6 17       	cp	r26, r22
    1f02:	b7 07       	cpc	r27, r23
    1f04:	10 f0       	brcs	.+4      	; 0x1f0a <__udivmodhi4_ep>
    1f06:	a6 1b       	sub	r26, r22
    1f08:	b7 0b       	sbc	r27, r23

00001f0a <__udivmodhi4_ep>:
    1f0a:	88 1f       	adc	r24, r24
    1f0c:	99 1f       	adc	r25, r25
    1f0e:	5a 95       	dec	r21
    1f10:	a9 f7       	brne	.-22     	; 0x1efc <__udivmodhi4_loop>
    1f12:	80 95       	com	r24
    1f14:	90 95       	com	r25
    1f16:	bc 01       	movw	r22, r24
    1f18:	cd 01       	movw	r24, r26
    1f1a:	08 95       	ret

00001f1c <_exit>:
    1f1c:	f8 94       	cli

00001f1e <__stop_program>:
    1f1e:	ff cf       	rjmp	.-2      	; 0x1f1e <__stop_program>
